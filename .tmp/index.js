/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 29);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var Game={
    //Global variables
    HBOUND:innerWidth,//$('body')[0].scrollWidth
    VBOUND:innerHeight,//$('body')[0].scrollHeight
    infoBox:{
        x:145,
        y:innerHeight-110,
        width:innerWidth-295,
        height:110
    },
    team:0,
    playerNum:2,//By default
    teams:{},
    multiplayer:false,//By default
    cxt:$('#middleCanvas')[0].getContext('2d'),
    frontCxt:$('#frontCanvas')[0].getContext('2d'),
    backCxt:$('#backCanvas')[0].getContext('2d'),
    fogCxt:$('#fogCanvas')[0].getContext('2d'),
    _timer:-1,
    _frameInterval:100,
    mainTick:0,
    serverTick:0,
    commands:{},
    replay:{},
    randomSeed:0,//For later use
    selectedUnit:{},
    allSelected:[],
    _oldAllSelected:[],
    hackMode:false,
    isApp:false,
    offline:false,
    CDN:'',
    addIntoAllSelected:function(chara,override){
        if (chara instanceof Gobj){
            //Add into allSelected if not included
            if (Game.allSelected.indexOf(chara)==-1) {
                if (override) Game.allSelected=chara;
                else Game.allSelected.push(chara);
                chara.selected=true;
            }
        }
        //Override directly
        if (chara instanceof Array) {
            if (override) Game.allSelected=chara;
            else chara.forEach(function(char){
                //Add into allSelected if not included
                if (Game.allSelected.indexOf(char)==-1) Game.allSelected.push(char);
            });
            chara.forEach(function(char){
                char.selected=true;
            });
        }
        //Sort allSelected by its name order
        Game.allSelected.sort(function(chara1,chara2){
            //Need sort building icon together
            var name1=(chara1 instanceof Building)?(chara1.inherited.name+'.'+chara1.name):chara1.name;
            var name2=(chara2 instanceof Building)?(chara2.inherited.name+'.'+chara2.name):chara2.name;
            return ([name1,name2].sort()[0]!=name1)?1:-1;
        });
        //Notify referee to redraw
        Referee.alterSelectionMode();
    },
    //To replace setTimeout
    commandTimeout:function(func,delay){
        var dueTick=Game.mainTick+(delay/100>>0);
        if (!Game.commands[dueTick]) Game.commands[dueTick]=[];
        Game.commands[dueTick].push(func);
    },
    //To replace setInterval
    commandInterval:function(func,interval){
        var funcAdjust=function(){
            func();
            Game.commandTimeout(funcAdjust,interval);
        };
        Game.commandTimeout(funcAdjust,interval);
    },
    race:{
        selected:'Terran',//Terran race by default
        choose:function(race){
            this.selected=race;
            $('div#GamePlay').attr('race',race);
        }
    },
    layerSwitchTo:function(layerName){
        $('div.GameLayer').hide();
        $('#'+layerName).show(); //show('slow')
    },
    init:function(){
        //Prevent full select
        $('div.GameLayer').on("selectstart",function(event){
            event.preventDefault();
        });
        //Bind resize canvas handler
        window.onresize=Game.resizeWindow;
        /*window.requestAnimationFrame=requestAnimationFrame || webkitRequestAnimationFrame
         || mozRequestAnimationFrame || msRequestAnimationFrame || oRequestAnimationFrame;//Old browser compatible*/
        //Online mode
        if (!Game.offline){
            Game.CDN=prompt('Please input CDN location for images and audios:');
            if (Game.CDN){
                if (!Game.CDN.startsWith('http://')) Game.CDN='http://'+Game.CDN;
                if (!Game.CDN.endsWith('/')) Game.CDN+='/';
            }
        }
        //Start loading
        Game.layerSwitchTo("GameLoading");
        //Zerg
        sourceLoader.load("img",Game.CDN+"img/Charas/Mutalisk.png","Mutalisk");
        sourceLoader.load("img",Game.CDN+"img/Charas/Devourer.png","Devourer");
        sourceLoader.load("img",Game.CDN+"img/Charas/Guardian.png","Guardian");
        sourceLoader.load("img",Game.CDN+"img/Charas/Overlord.png","Overlord");
        sourceLoader.load("img",Game.CDN+"img/Charas/Drone.png","Drone");
        sourceLoader.load("img",Game.CDN+"img/Charas/Zergling.png","Zergling");
        sourceLoader.load("img",Game.CDN+"img/Charas/Hydralisk.png","Hydralisk");
        sourceLoader.load("img",Game.CDN+"img/Charas/Scourge.png","Scourge");
        sourceLoader.load("img",Game.CDN+"img/Charas/Lurker.png","Lurker");
        sourceLoader.load("img",Game.CDN+"img/Charas/Ultralisk.png","Ultralisk");
        sourceLoader.load("img",Game.CDN+"img/Charas/Broodling.png","Broodling");
        sourceLoader.load("img",Game.CDN+"img/Charas/InfestedTerran.png","InfestedTerran");
        sourceLoader.load("img",Game.CDN+"img/Charas/Queen.png","Queen");
        sourceLoader.load("img",Game.CDN+"img/Charas/Defiler.png","Defiler");
        sourceLoader.load("img",Game.CDN+"img/Charas/Larva.png","Larva");
        //Terran
        sourceLoader.load("img",Game.CDN+"img/Charas/BattleCruiser.png","BattleCruiser");
        sourceLoader.load("img",Game.CDN+"img/Charas/Wraith.png","Wraith");
        sourceLoader.load("img",Game.CDN+"img/Charas/SCV.png","SCV");
        sourceLoader.load("img",Game.CDN+"img/Charas/Civilian.png","Civilian");
        sourceLoader.load("img",Game.CDN+"img/Charas/Marine.png","Marine");
        sourceLoader.load("img",Game.CDN+"img/Charas/Firebat.png","Firebat");
        sourceLoader.load("img",Game.CDN+"img/Charas/Ghost.png","Ghost");
        sourceLoader.load("img",Game.CDN+"img/Charas/Vulture.png","Vulture");
        sourceLoader.load("img",Game.CDN+"img/Charas/Tank.png","Tank");
        sourceLoader.load("img",Game.CDN+"img/Charas/Goliath.png","Goliath");
        sourceLoader.load("img",Game.CDN+"img/Charas/Medic.png","Medic");
        sourceLoader.load("img",Game.CDN+"img/Charas/Dropship.png","Dropship");
        sourceLoader.load("img",Game.CDN+"img/Charas/Vessel.png","Vessel");
        sourceLoader.load("img",Game.CDN+"img/Charas/Valkyrie.png","Valkyrie");
        //Protoss
        sourceLoader.load("img",Game.CDN+"img/Charas/Probe.png","Probe");
        sourceLoader.load("img",Game.CDN+"img/Charas/Zealot.png","Zealot");
        sourceLoader.load("img",Game.CDN+"img/Charas/Dragoon.png","Dragoon");
        sourceLoader.load("img",Game.CDN+"img/Charas/Templar.png","Templar");
        sourceLoader.load("img",Game.CDN+"img/Charas/DarkTemplar.png","DarkTemplar");
        sourceLoader.load("img",Game.CDN+"img/Charas/Reaver.png","Reaver");
        sourceLoader.load("img",Game.CDN+"img/Charas/Archon.png","Archon");
        sourceLoader.load("img",Game.CDN+"img/Charas/DarkArchon.png","DarkArchon");
        sourceLoader.load("img",Game.CDN+"img/Charas/Shuttle.png","Shuttle");
        sourceLoader.load("img",Game.CDN+"img/Charas/Observer.png","Observer");
        sourceLoader.load("img",Game.CDN+"img/Charas/Arbiter.png","Arbiter");
        sourceLoader.load("img",Game.CDN+"img/Charas/Scout.png","Scout");
        sourceLoader.load("img",Game.CDN+"img/Charas/Carrier.png","Carrier");
        sourceLoader.load("img",Game.CDN+"img/Charas/Corsair.png","Corsair");
        //Neuture
        sourceLoader.load("img",Game.CDN+"img/Charas/Ragnasaur.png","Ragnasaur");
        sourceLoader.load("img",Game.CDN+"img/Charas/Rhynsdon.png","Rhynsdon");
        sourceLoader.load("img",Game.CDN+"img/Charas/Ursadon.png","Ursadon");
        sourceLoader.load("img",Game.CDN+"img/Charas/Bengalaas.png","Bengalaas");
        sourceLoader.load("img",Game.CDN+"img/Charas/Scantid.png","Scantid");
        sourceLoader.load("img",Game.CDN+"img/Charas/Kakaru.png","Kakaru");
        //Hero
        sourceLoader.load("img",Game.CDN+"img/Charas/HeroCruiser.png","HeroCruiser");
        sourceLoader.load("img",Game.CDN+"img/Charas/Sarah.png","Sarah");
        sourceLoader.load("img",Game.CDN+"img/Charas/Kerrigan.png","Kerrigan");
        sourceLoader.load("img",Game.CDN+"img/Charas/DevilHunter.png","DevilHunter");
        sourceLoader.load("img",Game.CDN+"img/Charas/Tassadar.png","Tassadar");
        //Building
        sourceLoader.load("img",Game.CDN+"img/Charas/ZergBuilding.png","ZergBuilding");
        sourceLoader.load("img",Game.CDN+"img/Charas/TerranBuilding.png","TerranBuilding");
        sourceLoader.load("img",Game.CDN+"img/Charas/ProtossBuilding.png","ProtossBuilding");
        /*sourceLoader.load("audio","bgm/PointError.wav","PointError");*/
        //Map
        sourceLoader.load("img",Game.CDN+"img/Maps/(2)Switchback.jpg","Map_Switchback");
        sourceLoader.load("img",Game.CDN+"img/Maps/(2)Volcanis.jpg","Map_Volcanis");
        sourceLoader.load("img",Game.CDN+"img/Maps/(3)Trench wars.jpg","Map_TrenchWars");
        sourceLoader.load("img",Game.CDN+"img/Maps/(4)Blood Bath.jpg","Map_BloodBath");
        sourceLoader.load("img",Game.CDN+"img/Maps/(4)Orbital Relay.jpg","Map_OrbitalRelay");
        sourceLoader.load("img",Game.CDN+"img/Maps/(4)TowerDefense.jpg","Map_TowerDefense");
        sourceLoader.load("img",Game.CDN+"img/Maps/(6)Thin Ice.jpg","Map_ThinIce");
        sourceLoader.load("img",Game.CDN+"img/Maps/(8)BigGameHunters.jpg","Map_BigGameHunters");
        sourceLoader.load("img",Game.CDN+"img/Maps/(8)TheHunters.jpg","Map_TheHunters");
        sourceLoader.load("img",Game.CDN+"img/Maps/(8)Turbo.jpg","Map_Turbo");
        sourceLoader.load("img",Game.CDN+"img/Maps/Map_Grass.jpg","Map_Grass");
        sourceLoader.load("img",Game.CDN+"img/Charas/Mud.png","Mud");
        //Extra
        sourceLoader.load("img",Game.CDN+"img/Charas/Burst.png","Burst");
        sourceLoader.load("img",Game.CDN+"img/Charas/BuildingBurst.png","BuildingBurst");
        sourceLoader.load("img",Game.CDN+"img/Charas/Portrait.png","Portrait");
        sourceLoader.load("img",Game.CDN+"img/Charas/Magic.png","Magic");
        sourceLoader.load("img",Game.CDN+"img/Menu/ControlPanel.png","ControlPanel");
        sourceLoader.load("img",Game.CDN+"img/Bg/GameStart.jpg","GameStart");
        sourceLoader.load("img",Game.CDN+"img/Bg/GameWin.jpg","GameWin");
        sourceLoader.load("img",Game.CDN+"img/Bg/GameLose.jpg","GameLose");

        sourceLoader.allOnLoad(function(){
            $('#GameStart').prepend(sourceLoader.sources['GameStart']);
            $('#GameWin').prepend(sourceLoader.sources['GameWin']);
            $('#GameLose').prepend(sourceLoader.sources['GameLose']);
            $('#GamePlay>canvas').attr('width',Game.HBOUND);//Canvas width adjust
            $('#GamePlay>canvas').attr('height',Game.VBOUND-Game.infoBox.height+5);//Canvas height adjust
            for (var N=1;N<=9;N++){
                $('div.panel_Control').append("<button num='"+N+"'></button>");
            }
            /*//Test image effect
            AlloyImage(sourceLoader.sources['Wraith']).act("setHSI",100,0,0,false).replace(sourceLoader.sources['Wraith']);
            AlloyImage(sourceLoader.sources['BattleCruiser']).act("setHSI",100,0,0,false).replace(sourceLoader.sources['BattleCruiser']);*/
            Game.start();
        })
    },
    start:function(){
        //Game start
        Game.layerSwitchTo("GameStart");
        //Init level selector
        for (var level=1; level<=Levels.length; level++){
            $('.levelSelectionBg').append("<div class='levelItem'>" +
                "<input type='radio' value='"+level+"' name='levelSelect'>"+
                (Levels[level-1].label?(Levels[level-1].label):("Level "+level))
                +"</input></div>");
        }
        //Wait for user select level and play game
        $('input[name="levelSelect"]').click(function(){
            //Prevent vibration
            if (Game.level!=null) return;
            Game.level=parseInt(this.value);
            Game.play();
        });
    },
    play:function(){
        //Load level to initial when no error occurs
        if (!(Levels[Game.level-1].load())){
            //Need Game.playerNum before expansion
            Game.expandUnitProps();
            Resource.init();
            //Game background
            Game.layerSwitchTo("GamePlay");
            Game.resizeWindow();
            //Collect login user info
            if (Game.hackMode) Multiplayer.sendUserInfo();
            //Bind controller
            mouseController.toControlAll();//Can control all units
            keyController.start();//Start monitor
            Game.pauseWhenHide();//Hew H5 feature:Page Visibility
            Game.initIndexDB();//Hew H5 feature:Indexed DB
            Game.animation();
        }
    },
    getPropArray:function(prop){
        var result=[];
        for (var N=0;N<Game.playerNum;N++){
            result.push(typeof(prop)=='object'?(_$.clone(prop)):prop);
        }
        return result;
    },
    //Do we need this because we only support Zerg vs Terran vs Protoss?
    expandUnitProps:function(){
        //Post-operation for all unit types, prepare basic properties for different team numbers, init in level.js
        _$.traverse([Zerg,Terran,Protoss,Neutral,Hero],function(unitType){
            ['HP','SP','MP','damage','armor','speed','attackRange','attackInterval','plasma','sight'].forEach(function(prop){
                //Prop array, first one for us, second for enemy
                if (unitType.prototype[prop]!=undefined) {
                    unitType.prototype[prop]=Game.getPropArray(unitType.prototype[prop]);
                }
            });
            if (unitType.prototype.isInvisible){
                for (var N=0;N<Game.playerNum;N++){
                    unitType.prototype['isInvisible'+N]=unitType.prototype.isInvisible;
                }
            }
            delete unitType.prototype.isInvisible;//No need anymore
            if (unitType.prototype.attackMode) {
                ['damage','attackRange','attackInterval'].forEach(function(prop){
                    //Prop array, first one for us, second for enemy
                    unitType.prototype.attackMode.flying[prop]=Game.getPropArray(unitType.prototype.attackMode.flying[prop]);
                    unitType.prototype.attackMode.ground[prop]=Game.getPropArray(unitType.prototype.attackMode.ground[prop]);
                });
            }
            unitType.upgrade=function(prop,value,team){
                switch (team){
                    case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:
                    eval('unitType.prototype.'+prop)[team]=value;
                    break;
                    default:
                        unitType.prototype[prop]=value;
                        break;
                }
            };
        });
        Protoss.Carrier.prototype.interceptorCapacity=Game.getPropArray(Protoss.Carrier.prototype.interceptorCapacity);
        Protoss.Reaver.prototype.scarabCapacity=Game.getPropArray(Protoss.Reaver.prototype.scarabCapacity);
        Referee.underArbiterUnits=Game.getPropArray([]);
        Referee.detectedUnits=Game.getPropArray([]);
        for (var N=0;N<Game.playerNum;N++){
            //Initial detector buffer
            var buffer={};
            buffer['isInvisible'+N]=false;
            Gobj.detectorBuffer.push(buffer);
            //Initial arbiter buffer
            Protoss.Arbiter.prototype.bufferObj['isInvisible'+N]=true;
        }
        for (var grade in Upgrade){
            if (Upgrade[grade].level!=null) {
                Upgrade[grade].level=Game.getPropArray(Upgrade[grade].level);
            }
        }
    },
    addSelectedIntoTeam:function(teamNum){
        //Build a new team
        Game.teams[teamNum]=_$.mixin([],Game.allSelected);
    },
    callTeam:function(teamNum){
        var team=_$.mixin([],Game.teams[teamNum]);
        //When team already exist
        if (team instanceof Array){
            Game.unselectAll();
            //GC
            $.extend([],team).forEach(function(chara){
                if (chara.status=='dead') team.splice(team.indexOf(chara),1);
            });
            Game.addIntoAllSelected(team,true);
            if (team[0] instanceof Gobj){
                Game.changeSelectedTo(team[0]);
                //Sound effect
                team[0].sound.selected.play();
                //Relocate map center
                Map.relocateAt(team[0].posX(),team[0].posY());
            }
        }
    },
    unselectAll:function(){
        //Unselect all
        var units=Unit.allUnits.concat(Building.allBuildings);
        units.forEach(function(chara){chara.selected=false});
        Game.addIntoAllSelected([],true);
    },
    multiSelectInRect:function(){
        Game.unselectAll();
        //Multi select in rect
        var startPoint={x:Map.offsetX+Math.min(mouseController.startPoint.x,mouseController.endPoint.x),
            y:Map.offsetY+Math.min(mouseController.startPoint.y,mouseController.endPoint.y)};
        var endPoint={x:Map.offsetX+Math.max(mouseController.startPoint.x,mouseController.endPoint.x),
            y:Map.offsetY+Math.max(mouseController.startPoint.y,mouseController.endPoint.y)};
        var inRectUnits=Unit.allOurUnits().filter(function(chara){
            return chara.insideRect({start:(startPoint),end:(endPoint)})
        });
        if (inRectUnits.length>0) Game.changeSelectedTo(inRectUnits[0]);
        else Game.changeSelectedTo({});
        Game.addIntoAllSelected(inRectUnits,true);
    },
    getSelectedOne:function(clickX,clickY,isEnemyFilter,unitBuildingFilter,isFlyingFilter,customFilter){
        var distance=function(chara){
            return (clickX-chara.posX())*(clickX-chara.posX())+(clickY-chara.posY())*(clickY-chara.posY());//Math.pow2
        };
        //Initial
        var selectedOne={},charas=[];
        switch (unitBuildingFilter){
            case true:
                charas=Unit.allUnits;
                break;
            case false:
                charas=Building.allBuildings;
                break;
            default:
                charas=Unit.allUnits.concat(Building.allBuildings);
        }
        switch (isEnemyFilter){
            case true:case false:
                charas=charas.filter(function(chara){
                    return chara.isEnemy()==isEnemyFilter;
                });
                break;
            case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:
                charas=charas.filter(function(chara){
                    return chara.team==isEnemyFilter;
                });
                break;
            case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':
                charas=charas.filter(function(chara){
                    return chara.team!=isEnemyFilter;
                });
        }
        if (isFlyingFilter!=null) {
            charas=charas.filter(function(chara){
                return chara.isFlying==isFlyingFilter;
            });
        }
        //customFilter is filter function
        if (customFilter!=null){
            charas=charas.filter(customFilter);
        }
        //Find nearest one
        selectedOne=charas.filter(function(chara){
            return chara.status!='dead' && chara.includePoint(clickX,clickY);
        }).sort(function(chara1,chara2){
            return distance(chara1)-distance(chara2);
        })[0];
        if (!selectedOne) selectedOne={};
        return selectedOne;
    },
    getInRangeOnes:function(clickX,clickY,range,isEnemyFilter,unitBuildingFilter,isFlyingFilter,customFilter){
        //Initial
        var selectedOnes=[],charas=[];
        switch (unitBuildingFilter){
            case true:
                charas=Unit.allUnits;
                break;
            case false:
                charas=Building.allBuildings;
                break;
            default:
                charas=Unit.allUnits.concat(Building.allBuildings);
        }
        switch (isEnemyFilter){
            case true:case false:
                charas=charas.filter(function(chara){
                    return chara.isEnemy()==isEnemyFilter;
                });
                break;
            case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:
                charas=charas.filter(function(chara){
                    return chara.team==isEnemyFilter;
                });
                break;
            case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':
                charas=charas.filter(function(chara){
                    return chara.team!=isEnemyFilter;
                });
        }
        if (isFlyingFilter!=null) {
            charas=charas.filter(function(chara){
                return chara.isFlying==isFlyingFilter;
            });
        }
        //customFilter is filter function
        if (customFilter!=null){
            charas=charas.filter(customFilter);
        }
        //Find in range ones
        selectedOnes=charas.filter(function(chara){
            return chara.status!='dead' && chara.insideSquare({centerX:clickX,centerY:clickY,radius:range});
        });
        return selectedOnes;
    },
    //For test use
    getSelected:function(){
        return Unit.allUnits.concat(Building.allBuildings).filter(function(chara){
            return chara.selected;
        });
    },
    showInfoFor:function(chara){
        //Show selected living unit info
        if (Game.selectedUnit instanceof Gobj && Game.selectedUnit.status!="dead") {
            //Display info
            $('div.panel_Info>div[class*="info"]').show();
            //Draw selected unit portrait
            if (chara.portrait) $('div.infoLeft div[name="portrait"]')[0].className=chara.portrait;//Override portrait
            else {
                if (Game.selectedUnit instanceof Unit)
                    $('div.infoLeft div[name="portrait"]')[0].className=Game.selectedUnit.name;
                if (Game.selectedUnit instanceof Building)
                    $('div.infoLeft div[name="portrait"]')[0].className=
                        Game.selectedUnit.attack?Game.selectedUnit.inherited.inherited.name:Game.selectedUnit.inherited.name;
            }
            //Show selected unit HP,SP and MP
            $('div.infoLeft span._Health')[0].style.color=Game.selectedUnit.lifeStatus();
            $('div.infoLeft span.life')[0].innerHTML=Game.selectedUnit.life>>0;
            $('div.infoLeft span.HP')[0].innerHTML=Game.selectedUnit.get('HP');
            if (Game.selectedUnit.SP) {
                $('div.infoLeft span.shield')[0].innerHTML=Game.selectedUnit.shield>>0;
                $('div.infoLeft span.SP')[0].innerHTML=Game.selectedUnit.get('SP');
                $('div.infoLeft span._Shield').show();
            }
            else {
                $('div.infoLeft span._Shield').hide();
            }
            if (Game.selectedUnit.MP) {
                $('div.infoLeft span.magic')[0].innerHTML=Game.selectedUnit.magic>>0;
                $('div.infoLeft span.MP')[0].innerHTML=Game.selectedUnit.get('MP');
                $('div.infoLeft span._Magic').show();
            }
            else {
                $('div.infoLeft span._Magic').hide();
            }
            //Draw selected unit name,kill,damage,armor and shield
            $('div.infoCenter h3.name')[0].innerHTML=Game.selectedUnit.name;
            if (Game.selectedUnit.detector) {
                $('div.infoCenter p.detector').show();
            }
            else {
                $('div.infoCenter p.detector').hide();
            }
            if (Game.selectedUnit.attack){
                $('div.infoCenter p.kill span')[0].innerHTML=Game.selectedUnit.kill;
                if (Game.selectedUnit.attackMode) {
                    $('div.infoCenter p.damage span')[0].innerHTML=(Game.selectedUnit.get('attackMode.ground.damage')+'/'+Game.selectedUnit.get('attackMode.flying.damage'));
                }
                else {
                    $('div.infoCenter p.damage span')[0].innerHTML=(Game.selectedUnit.get('damage')+(Game.selectedUnit.suicide?' (1)':''));
                }
                //Show kill and damage
                $('div.infoCenter p.kill').show();
                $('div.infoCenter p.damage').show();
            }
            else {
                //Hide kill and damage
                $('div.infoCenter p.kill').hide();
                $('div.infoCenter p.damage').hide();
            }
            $('div.infoCenter p.armor span')[0].innerHTML=Game.selectedUnit.get('armor');
            if (Game.selectedUnit.get('plasma')!=undefined) {
                $('div.infoCenter p.plasma span')[0].innerHTML=Game.selectedUnit.get('plasma');
                $('div.infoCenter p.plasma').show();
            }
            else {
                $('div.infoCenter p.plasma').hide();
            }
            //Can disable this filter for testing
            if (Game.selectedUnit.loadedUnits && Game.selectedUnit.team==Game.team) {
                $('div.infoCenter p.passenger span')[0].innerHTML=Game.selectedUnit.loadedUnits.length;
                $('div.infoCenter p.passenger').show();
                //Clear old icons
                $('div.infoCenter p.icons')[0].innerHTML='';
                //Show passenger icons
                Game.selectedUnit.loadedUnits.forEach(function(passenger){
                    $('div.infoCenter p.icons').append($('<span></span>')
                        .attr('class',passenger.name).css('border-color',passenger.lifeStatus()));
                });
                $('div.infoCenter p.icons').show();
            }
            else {
                $('div.infoCenter p.passenger').hide();
                $('div.infoCenter p.icons').hide();
            }
            //Draw upgraded
            var upgraded=Game.selectedUnit.upgrade;
            var team=Game.selectedUnit.team;
            if (upgraded){
                for (var N=0;N<3;N++){
                    var upgradeIcon=$('div.upgraded div[name="icon"]')[N];
                    upgradeIcon.innerHTML='';
                    upgradeIcon.style.display='none';
                    if (N<upgraded.length){
                        upgradeIcon.className=upgradeIcon.title=upgraded[N];
                        upgradeIcon.innerHTML=Upgrade[upgraded[N]].level[team];
                        if (Upgrade[upgraded[N]].level[team]){
                            upgradeIcon.setAttribute('disabled','false');
                            upgradeIcon.style.color='aqua';
                        }
                        else {
                            upgradeIcon.setAttribute('disabled','true');
                            upgradeIcon.style.color='red';
                        }
                        upgradeIcon.style.display='inline-block';
                    }
                }
                $('div.upgraded').show();
            }
            else {
                //$('div.upgraded div[name="icon"]').html('').removeAttr('title').hide();
                $('div.upgraded').hide();
            }
        }
        else {
            //Hide info
            $('div.panel_Info>div').hide();
        }
    },
    refreshInfo:function(){
        Game.showInfoFor(Game.selectedUnit);
    },
    changeSelectedTo:function(chara){
        Game.selectedUnit=chara;
        Button.equipButtonsFor(chara);
        if (chara instanceof Gobj){
            chara.selected=true;
        }
        Game.showInfoFor(chara);
    },
    draw:function(chara){
        //Can draw units and no-rotate bullets
        if (!(chara instanceof Gobj)) return;//Will only show Gobj
        if (chara.status=="dead") return;//Will not show dead
        //Won't draw units outside screen
        if (!chara.insideScreen()) return;
        //Choose context
        var cxt=((chara instanceof Unit) || (chara instanceof Building))?Game.cxt:Game.frontCxt;
        //Draw shadow
        cxt.save();
        //cxt.shadowBlur=50;//Different blur level on Firefox and Chrome, bad performance
        cxt.shadowOffsetX=(chara.isFlying)?5:3;
        cxt.shadowOffsetY=(chara.isFlying)?20:8;
        cxt.shadowColor="rgba(0,0,0,0.4)";
        //Close shadow for burrowed
        if (chara.buffer.Burrow) cxt.shadowOffsetX=cxt.shadowOffsetY=0;
        //Draw invisible
        if (chara['isInvisible'+Game.team]!=null){
            cxt.globalAlpha=(chara.isEnemy() && chara['isInvisible'+Game.team])?0:0.5;
            if (chara.burrowBuffer){
                if (chara.isEnemy()){
                    if (!chara['isInvisible'+Game.team]) cxt.globalAlpha=1;
                }
                else cxt.globalAlpha=1;
            }
        }
        //Draw unit or building
        var imgSrc;
        if (chara instanceof Building){
            if (chara.source) imgSrc=sourceLoader.sources[chara.source];
            else {
                imgSrc=sourceLoader.sources[chara.attack?chara.inherited.inherited.name:chara.inherited.name];
            }
        }
        //Unit, not building
        else imgSrc=sourceLoader.sources[chara.source?chara.source:chara.name];
        //Convert position
        var charaX=(chara.x-Map.offsetX)>>0;
        var charaY=(chara.y-Map.offsetY)>>0;
        //Same image in different directions
        if (chara.direction==undefined){
            var _left=chara.imgPos[chara.status].left;
            var _top=chara.imgPos[chara.status].top;
            //Multiple actions status
            if (_left instanceof Array || _top instanceof Array){
                cxt.drawImage(imgSrc,
                    _left[chara.action],_top[chara.action],chara.width,chara.height,
                    charaX,charaY,chara.width,chara.height);
            }
            //One action status
            else{
                cxt.drawImage(imgSrc,
                    _left,_top,chara.width,chara.height,
                    charaX,charaY,chara.width,chara.height);
            }
        }
        //Different image in different directions
        else{
            var _left=chara.imgPos[chara.status].left[chara.direction];
            var _top=chara.imgPos[chara.status].top[chara.direction];
            //Multiple actions status
            if (_left instanceof Array || _top instanceof Array){
                cxt.drawImage(imgSrc,
                    _left[chara.action],_top[chara.action],chara.width,chara.height,
                    charaX,charaY,chara.width,chara.height);
            }
            //One action status
            else{
                cxt.drawImage(imgSrc,
                    _left,_top,chara.width,chara.height,
                    charaX,charaY,chara.width,chara.height);
            }
        }
        //Remove shadow
        cxt.restore();
        //Draw HP if has selected and is true
        if (chara.selected==true){
            cxt=Game.frontCxt;
            //Draw selected circle
            cxt.strokeStyle=(chara.isEnemy())?"red":"green";//Distinguish enemy
            cxt.lineWidth=2;//Cannot see 1px width circle clearly
            cxt.beginPath();
            cxt.arc(chara.posX()-Map.offsetX,chara.posY()-Map.offsetY,chara.radius(),0,2*Math.PI);
            cxt.stroke();
            //Draw HP bar and SP bar and magic bar
            cxt.globalAlpha=1;
            cxt.lineWidth=1;
            var offsetY=-6-(chara.MP?5:0)-(chara.SP?5:0);
            var lifeRatio=chara.life/chara.get('HP');
            cxt.strokeStyle="black";
            if (chara.SP) {
                //Draw HP and SP
                cxt.fillStyle="blue";
                cxt.fillRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY,chara.width*chara.shield/chara.get('SP'),5);
                cxt.strokeRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY,chara.width,5);
                cxt.fillStyle=(lifeRatio>0.7)?"green":(lifeRatio>0.3)?"yellow":"red";//Distinguish life
                cxt.fillRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY+5,chara.width*lifeRatio,5);
                cxt.strokeRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY+5,chara.width,5);
            }
            else {
                //Only draw HP
                cxt.fillStyle=(lifeRatio>0.7)?"green":(lifeRatio>0.3)?"yellow":"red";//Distinguish life
                cxt.fillRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY,chara.width*lifeRatio,5);
                cxt.strokeRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY,chara.width,5);
            }
            if (chara.MP) {
                //Draw MP
                cxt.fillStyle="darkviolet";
                cxt.fillRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY+(chara.SP?10:5),chara.width*chara.magic/chara.get('MP'),5);
                cxt.strokeRect(chara.x-Map.offsetX,chara.y-Map.offsetY+offsetY+(chara.SP?10:5),chara.width,5);
            }
        }
    },
    drawEffect:function(chara){
        //Can draw units and no-rotate bullets
        if (!(chara instanceof Burst)) return;//Will only show Burst
        if (chara.status=="dead") return;//Will not show dead
        //Won't draw units outside screen
        if (!chara.insideScreen()) return;
        //Choose context
        var cxt=Game.frontCxt;
        //Draw shadow
        cxt.save();
        //cxt.shadowBlur=50;//Different blur level on Firefox and Chrome, bad performance
        cxt.shadowOffsetX=(chara.isFlying)?5:3;
        cxt.shadowOffsetY=(chara.isFlying)?20:8;
        cxt.shadowColor="rgba(0,0,0,0.4)";
        var imgSrc=sourceLoader.sources[chara.name];
        //Convert position
        var charaX=(chara.x-Map.offsetX)>>0;
        var charaY=(chara.y-Map.offsetY)>>0;
        var _left=chara.imgPos[chara.status].left;
        var _top=chara.imgPos[chara.status].top;
        //Will stretch effect if scale
        var times=chara.scale?chara.scale:1;
        //Multiple actions status
        if (_left instanceof Array || _top instanceof Array){
            cxt.drawImage(imgSrc,
                _left[chara.action],_top[chara.action],chara.width,chara.height,
                charaX,charaY,chara.width*times>>0,chara.height*times>>0);
        }
        //One action status
        else{
            cxt.drawImage(imgSrc,
                _left,_top,chara.width,chara.height,
                charaX,charaY,chara.width*times>>0,chara.height*times>>0);
        }
        //Remove shadow
        cxt.restore();
    },
    drawBullet:function(chara){
        //Can draw bullets need rotate
        if (!(chara instanceof Bullets)) return;//Will only show bullet
        if (chara.status=="dead") return;//Will not show dead
        //Won't draw bullets outside screen
        if (!chara.insideScreen()) return;
        //Draw unit
        var imgSrc=sourceLoader.sources[chara.name];
        var _left=chara.imgPos[chara.status].left;
        var _top=chara.imgPos[chara.status].top;
        //Convert position
        var centerX=(chara.posX()-Map.offsetX)>>0;
        var centerY=(chara.posY()-Map.offsetY)>>0;
        //Rotate canvas
        Game.frontCxt.save();
        //Rotate to draw bullet
        Game.frontCxt.translate(centerX,centerY);
        Game.frontCxt.rotate(-chara.angle);
        //Draw shadow
        //Game.frontCxt.shadowBlur=50;//Different blur level on Firefox and Chrome, bad performance
        Game.frontCxt.shadowOffsetX=(chara.owner.isFlying)?5:3;
        Game.frontCxt.shadowOffsetY=(chara.owner.isFlying)?20:5;
        Game.frontCxt.shadowColor="rgba(0,0,0,0.4)";
        //Game.frontCxt.shadowColor="rgba(255,0,0,1)";
        //Multiple actions status
        if (_left instanceof Array || _top instanceof Array){
            Game.frontCxt.drawImage(imgSrc,
                _left[chara.action],_top[chara.action],chara.width,chara.height,
                -chara.width/2>>0,-chara.height/2>>0,chara.width,chara.height);
        }
        //One action status
        else{
            Game.frontCxt.drawImage(imgSrc,
                _left,_top,chara.width,chara.height,
                -chara.width/2>>0,-chara.height/2>>0,chara.width,chara.height);
        }
        //Rotate canvas back and remove shadow
        Game.frontCxt.restore();
        //Below 2 separated steps might cause mess
        //Game.frontCxt.translate(-centerX,-centerY);
        //Game.frontCxt.rotate(chara.angle);
    },
    drawInfoBox:function(){
        //Update selected unit active info which need refresh
        if (Game.selectedUnit instanceof Gobj && Game.selectedUnit.status!="dead") {
            //Update selected unit life,shield and magic
            var lifeRatio=Game.selectedUnit.life/Game.selectedUnit.get('HP');
            $('div.infoLeft span._Health')[0].style.color=((lifeRatio>0.7)?"green":(lifeRatio>0.3)?"yellow":"red");
            $('div.infoLeft span.life')[0].innerHTML=Game.selectedUnit.life>>0;
            if (Game.selectedUnit.SP) {
                $('div.infoLeft span.shield')[0].innerHTML=Game.selectedUnit.shield>>0;
            }
            if (Game.selectedUnit.MP) {
                $('div.infoLeft span.magic')[0].innerHTML=Game.selectedUnit.magic>>0;
            }
            //Update selected unit kill
            if (Game.selectedUnit.kill!=null){
                $('div.infoCenter p.kill span')[0].innerHTML=Game.selectedUnit.kill;
            }
        }
    },
    drawSourceBox:function(){
        //Update min, gas, curMan and totalMan
        $('div.resource_Box span.mineNum')[0].innerHTML=Resource[Game.team].mine;
        $('div.resource_Box span.gasNum')[0].innerHTML=Resource[Game.team].gas;
        $('div.resource_Box span.manNum>span')[0].innerHTML=Resource[Game.team].curMan;
        $('div.resource_Box span.manNum>span')[1].innerHTML=Resource[Game.team].totalMan;
        //Check if man overflow
        $('div.resource_Box span.manNum')[0].style.color=(Resource[Game.team].curMan>Resource[Game.team].totalMan)?"red":"#00ff00";
    },
    drawProcessingBox:function(){
        //Show processing box if it's processing
        var processing=Game.selectedUnit.processing;
        //Can disable this filter for testing
        if (processing && Game.selectedUnit.team==Game.team){
            $('div.upgrading div[name="icon"]')[0].className=processing.name;
            //var percent=((new Date().getTime()-processing.startTime)/(processing.time)+0.5)>>0;
            var percent=((Game.mainTick-processing.startTime)*100/(processing.time)+0.5)>>0;
            $('div.upgrading div[name="processing"] span')[0].innerHTML=percent;
            $('div.upgrading div[name="processing"] div.processedBar')[0].style.width=percent+'%';
            $('div.upgrading').attr('title',processing.name).show();
        }
        else {
            //Select nothing, show replay progress
            if (Game.replayFlag && Game.endTick>0){
                $('div.upgrading div[name="icon"]')[0].className='Replay';
                var percent=(Game.mainTick*100/(Game.endTick)+0.5)>>0;
                $('div.upgrading div[name="processing"] span')[0].innerHTML=percent;
                $('div.upgrading div[name="processing"] div.processedBar')[0].style.width=percent+'%';
                $('div.upgrading').attr('title','Replay Progress').show();
                if (!(Game.selectedUnit instanceof Gobj)){
                    $('div.infoRight').show();
                    $('div.upgraded').hide();
                }
            }
            else $('div.upgrading').removeAttr('title').hide();
        }
    },
    refreshMultiSelectBox:function(){
        var divs=$('div.override div.multiSelection div');
        //Only refresh border color on current multiSelect box
        for (var n=0;n<divs.length;n++){
            divs[n].style.borderColor=Game.allSelected[n].lifeStatus();
        }
    },
    drawMultiSelectBox:function(){
        //Clear old icons
        $('div.override div.multiSelection')[0].innerHTML='';
        //Redraw all icons
        Game.allSelected.forEach(function(chara,N){
            var node=document.createElement('div');
            node.setAttribute('name','portrait');
            //Override portrait
            if (chara.portrait) node.className=chara.portrait;
            else node.className=(chara instanceof Building)?(chara.attack?chara.inherited.inherited.name:chara.inherited.name):chara.name;
            node.title=chara.name;
            node.style.borderColor=chara.lifeStatus();
            node.onclick=function(){
                //Selection execute
                Game.unselectAll();
                Game.changeSelectedTo(chara);
                //Single selection mode
                $('div.override').hide();
                $('div.override div.multiSelection').hide();
            };
            $('div.override div.multiSelection')[0].appendChild(node);
        });
        var iconNum=$('div.override div.multiSelection div').length;
        //Adjust width if unit icon space overflow
        $('div.override div.multiSelection').css('width',(iconNum>12?Math.ceil(iconNum/2)*55:330)+'px');
        //Adjust background position after added into DOM, nth starts from 1st(no 0th)
        for (var n=1;n<=iconNum;n++){
            var bgPosition=$('div.override div.multiSelection div:nth-child('+n+')').css('background-position');
            bgPosition=bgPosition.split(' ').map(function(pos){
                return parseInt(pos)*0.75+'px';
            }).join(' ');
            $('div.override div.multiSelection div:nth-child('+n+')').css('background-position',bgPosition);
        }
    },
    animation:function(){
        Game.animation.loop=function(){
            //Process due commands for current frame before drawing
            var commands=Game.commands[Game.mainTick];
            if (commands instanceof Array){
                for (var N=0;N<commands.length;N++){
                    commands[N]();
                }
                delete Game.commands[Game.mainTick];
            }
            /************ Draw part *************/
            //Clear all canvas
            Game.cxt.clearRect(0,0,Game.HBOUND,Game.VBOUND);
            Game.frontCxt.clearRect(0,0,Game.HBOUND,Game.VBOUND);
            //DrawLayer0: Refresh map if needed
            if (mouseController.mouseX<Map.triggerMargin) Map.needRefresh="LEFT";
            if (mouseController.mouseX>(Game.HBOUND-Map.triggerMargin)) Map.needRefresh="RIGHT";
            if (mouseController.mouseY<Map.triggerMargin) Map.needRefresh="TOP";
            if (mouseController.mouseY>(Game.VBOUND-Map.triggerMargin)) Map.needRefresh="BOTTOM";
            if (Map.needRefresh) {
                Map.refresh(Map.needRefresh);
                Map.needRefresh=false;
            }
            //DrawLayer1: Show all buildings
            for (var N=0;N<Building.allBuildings.length;N++){
                var build=Building.allBuildings[N];
                //GC
                if (build.status=="dead") {
                    Building.allBuildings.splice(N,1);
                    N--;//Next unit come to this position
                    continue;
                }
                //Draw
                Game.draw(build);
            }
            //DrawLayer2: Show all existed units
            for (var N=0;N<Unit.allUnits.length;N++){
                var chara=Unit.allUnits[N];
                //GC
                if (chara.status=="dead") {
                    Unit.allUnits.splice(N,1);
                    N--;
                    continue;
                }
                //Draw
                Game.draw(chara);
            }
            //DrawLayer3: Draw all bullets
            for (var N=0;N<Bullets.allBullets.length;N++){
                var bullet=Bullets.allBullets[N];
                //GC
                if (bullet.status=="dead" && bullet.used) {
                    Bullets.allBullets.splice(N,1);
                    N--;
                    continue;
                }
                Game.drawBullet(bullet);
            }
            //DrawLayer4: Draw effects above units
            for (var N=0;N<Burst.allEffects.length;N++){
                var effect=Burst.allEffects[N];
                //GC
                if (effect.status=="dead" || (effect.target && effect.target.status=="dead")) {
                    Burst.allEffects.splice(N,1);
                    N--;
                    continue;
                }
                Game.drawEffect(effect);
            }
            //DrawLayer5: Draw drag rect
            if (mouseController.drag) {
                Game.cxt.lineWidth=3;
                Game.cxt.strokeStyle="green";
                Game.cxt.strokeRect(mouseController.startPoint.x,mouseController.startPoint.y,
                    mouseController.endPoint.x-mouseController.startPoint.x,
                    mouseController.endPoint.y-mouseController.startPoint.y);
            }
            //DrawLayerBottom: Draw info box and resource box
            Game.drawInfoBox();
            Game.drawSourceBox();
            Game.drawProcessingBox();
            /************ Calculate for next frame *************/
            //Clock ticking
            Game.mainTick++;
            //For network mode
            if (Multiplayer.ON){
                //Send current tick to server
                Multiplayer.webSocket.send(JSON.stringify({
                    type:'tick',
                    tick:Game.mainTick,
                    cmds:(Multiplayer.cmds.length?Multiplayer.cmds:null)
                }));
            }
            else {
                //Record user moves and execute if have
                if (Multiplayer.cmds.length>0) {
                    //MainTick++ just before this code piece
                    Game.replay[Game.mainTick]=$.extend([],Multiplayer.cmds);
                    //Execute command
                    Multiplayer.parseTickCmd({
                        tick:Game.mainTick,
                        cmds:Multiplayer.cmds
                    });
                }
            }
            //Clear commands
            if (Multiplayer.cmds.length>0){
                Multiplayer.cmds=[];
            }
            //Postpone play frames and AI after drawing (consume time)
            Building.allBuildings.concat(Unit.allUnits).concat(Bullets.allBullets).concat(Burst.allEffects).forEach(function(chara){
                //Add this makes chara intelligent for attack
                if (chara.AI) chara.AI();
                //Judge reach destination
                if (chara instanceof Unit) Referee.judgeReachDestination(chara);
                //Join timers together
                chara.playFrames();
            });
            //Will invite Mr.Referee to make some judgments
            Referee.tasks.forEach(function(task){
                Referee[task]();
            });
            //Release selected unit when unit died or is invisible enemy
            if (Game.selectedUnit instanceof Gobj){
                if (Game.selectedUnit.status=="dead" || (Game.selectedUnit['isInvisible'+Game.team] && Game.selectedUnit.isEnemy())) {
                    Game.selectedUnit.selected=false;
                    Game.changeSelectedTo({});
                }
            }
        };
        if (Multiplayer.ON){
            Game._timer=setInterval(function(){
                if (Game.mainTick<Game.serverTick) Game.animation.loop();
            },Game._frameInterval);
        }
        else Game.startAnimation();
    },
    stopAnimation:function(){
        if (Game._timer!=-1) clearInterval(Game._timer);
        Game._timer=-1;
    },
    startAnimation:function(){
        if (Game._timer==-1) Game._timer=setInterval(Game.animation.loop,Game._frameInterval);
    },
    stop:function(charas){
        charas.forEach(function(chara){
            chara.stop();
        });
        Game.stopAnimation();
    },
    win:function(){
        if (Multiplayer.ON){
            Multiplayer.webSocket.send(JSON.stringify({
                type:'getReplay'
            }));
        }
        else {
            Game.saveReplay();
            Game.saveReplayIntoDB();
        }
        $('div#GamePlay').fadeOut(3000,function(){
            Game.stop(Unit.allUnits);
            //Win poster
            Game.layerSwitchTo("GameWin");
            new Audio(Game.CDN+'bgm/GameWin.wav').play();
        });
        //Self destruction to prevent duplicate fadeout
        Game.win=function(){};
    },
    lose:function(){
        if (Multiplayer.ON){
            Multiplayer.webSocket.send(JSON.stringify({
                type:'getReplay'
            }));
        }
        else {
            Game.saveReplay();
            Game.saveReplayIntoDB();
        }
        $('div#GamePlay').fadeOut(3000,function(){
            Game.stop(Unit.allUnits);
            //Lose poster
            Game.layerSwitchTo("GameLose");
            new Audio(Game.CDN+'bgm/GameLose.wav').play();
        });
        //Self destruction to prevent duplicate fadeout
        Game.lose=function(){};
    },
    saveReplay:function(replayData){
        if (!Game.replayFlag) {
            localStorage.setItem('lastReplay',JSON.stringify({
                level:Game.level,
                team:Game.team,
                //Save Game.replay by default
                cmds:(replayData!=null)?replayData:(Game.replay),
                end:Game.mainTick
            }));
        }
    },
    showWarning:function(msg,interval){
        //Default interval
        if (!interval) interval=3000;
        //Show message for a period
        $('div.warning_Box').html(msg).show();
        //Hide message after a period
        setTimeout(function(){
            $('div.warning_Box').html('').hide();
        },interval);
    },
    showMessage:function(){
        //Clossure timer
        var _timer=0;
        return function(msg,interval){
            //Default interval
            if (!interval) interval=3000;
            //Show message for a period
            $('div.message_Box').append('<p>'+msg+'</p>').show();
            //Can show multiple lines together
            if (_timer) clearTimeout(_timer);
            //Hide message after a period
            _timer=setTimeout(function(){
                $('div.message_Box').html('').hide();
            },interval);
        };
    }(),
    //Return from 0 to 0.99
    getNextRandom:(function(){
        //Clossure variable and function
        var rands=[];
        var getRands=function(){
            //Use current tick as seed
            var seed=Game.mainTick+Game.randomSeed;
            var rands=[];
            for (var N=0;N<100;N++){
                //Seed grows up in range 100
                seed=(seed*21+3)%100;
                rands.push(seed);
            }
            return rands;
        };
        return function(){
            //If all rands used, generate new ones
            if (rands.length==0) rands=getRands();
            return rands.shift()/100;
        };
    })(),
    resizeWindow:function(){
        //Update parameters
        Game.HBOUND=innerWidth;//$('body')[0].scrollWidth
        Game.VBOUND=innerHeight;//$('body')[0].scrollHeight
        Game.infoBox.width=Game.HBOUND-295;
        Game.infoBox.y=Game.VBOUND-110;
        //Resize canvas
        $('#GamePlay>canvas').attr('width',Game.HBOUND);//Canvas width adjust
        $('#GamePlay>canvas').attr('height',Game.VBOUND-Game.infoBox.height+5);//Canvas height adjust
        //Resize panel_Info
        $('div.panel_Info')[0].style.width=((Game.HBOUND-295)+'px');
        if (Map.ready){
            //Update map inside-stroke size
            Map.insideStroke.width=(130*Game.HBOUND/Map.getCurrentMap().width)>>0;
            Map.insideStroke.height=(130*Game.VBOUND/Map.getCurrentMap().height)>>0;
            //Redraw background
            Map.drawBg();
            //Need re-calculate fog immediately
            Map.drawFogAndMinimap();
        }
    },
    getCurrentTs:function(){
        var now=new Date();
        var formatNum=function(num){
            if (num<10) return ('0'+num);
            else return num.toString();
        };
        var timestamp=now.getFullYear()+'-'+formatNum(now.getMonth()+1)+'-'+formatNum(now.getDate())+' '
            +formatNum(now.getHours())+':'+formatNum(now.getMinutes())+':'+formatNum(now.getSeconds());
        return timestamp;
    },
    //New H5 features demo
    pauseWhenHide:function(){
        //Add pause when hide window
        $(document).on('visibilitychange',function(){
            if ($(document).attr('hidden')!=null){
                if ($(document).attr('hidden')){
                    Button.pauseHandler();
                    $('title').html('Paused...');
                }
                else {
                    Button.playHandler();
                    $('title').html('StarCraft');
                }
            }
        });
    },
    initIndexDB:function(){
        window.indexedDB=(indexedDB || webkitIndexedDB || mozIndexedDB || msIndexedDB);
        var connect=indexedDB.open('StarCraftHTML5',1);
        connect.onupgradeneeded=function(evt){
            var db=evt.target.result;
            var objStore=db.createObjectStore('Replays',{keyPath:'id',autoIncrement:true});
            objStore.createIndex('levelIndex','level',{unique:false});
            objStore.createIndex('teamIndex','team',{unique:false});
            objStore.createIndex('endIndex','end',{unique:false});
            objStore.createIndex('msIndex','millisec',{unique:false});
            objStore.createIndex('tsIndex','timestamp',{unique:false});
            objStore.createIndex('offlineIndex','offline',{unique:false});
            db.close();
        }
    },
    saveReplayIntoDB:function(){
        var connect=indexedDB.open('StarCraftHTML5',1);
        connect.onsuccess=function(evt){
            var db=evt.target.result;
            var objStore=db.transaction(['Replays'],'readwrite').objectStore('Replays');
            objStore.add({
                level:Game.level,
                team:Game.team,
                cmds:Game.replay,
                end:Game.mainTick,
                millisec:new Date().getTime(),
                timestamp:Game.getCurrentTs(),
                offline:Boolean(Game.offline).toString()
            });
            db.close();
        }
    }
};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var $ = __webpack_require__(27);
// import './Utils/gFrame.js';
// import './Utils/sourceLoader.js';
// var Gobj = require('./Characters/Gobj.js');
// import './Characters/Burst.js';
// import './Characters/Animation.js';
// import './Characters/Units.js';
// import './Characters/Magic.js';
// import './Characters/Upgrade.js';
// import './Characters/Building.js';
// import './Characters/Zerg.js';
// import './Characters/Terran.js';
// import './Characters/Protoss.js';
// import './Characters/Neutral.js';
// import './Characters/Hero.js';
// import './Characters/Bullets.js';
// import './Characters/Button.js';
// import './Characters/Map.js';
// import './GameRule/Multiplayer.js';
// import './GameRule/Resource.js';
// import './GameRule/Referee.js';
__webpack_require__(0);
// import './GameRule/Levels.js';
// import './GameRule/Cheat.js';
// import './Controller/mouseController.js';
// import './Controller/keyController.js';
//########## AutoStart1 ##########//
$(function () {
    Game.init();
});
/*
import 'core-js/client/shim';
import 'zone.js/dist/zone';

import '@angular/common';
import 'rxjs';

import './index.scss';

import {enableProdMode} from '@angular/core';
import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';
import {AppModule} from './app';
*/
/*
declare var process: any;
if (process.env.NODE_ENV === 'production') {
  enableProdMode();
} else {
  Error['stackTraceLimit'] = Infinity; // tslint:disable-line:no-string-literal
  require('zone.js/dist/long-stack-trace-zone'); // tslint:disable-line:no-var-requires
}

platformBrowserDynamic().bootstrapModule(AppModule);
*/


/***/ }),
/* 2 */
/***/ (function(module, exports) {

//Alias
var Animation=Burst;
Animation.getAllAnimations=function(){
    var allAnimes=[];
    for (var attr in Animation){
        if (Animation[attr].super===Animation) allAnimes.push(Animation[attr]);
    }
    return allAnimes;
};
Animation.getName=function(anime){
    for (var attr in Animation){
        //Should be animation constructor firstly
        if (Animation[attr].super===Animation && (anime instanceof Animation[attr])) return attr;
    }
};

Animation.RightClickCursor=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 44, 88, 132],
                top:[1087,1087,1087,1087]
            }
        },
        width:44,
        height:28,
        frame:{
            burst:4
        }
    }
});
Animation.PsionicStorm=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 188, 376, 564, 0, 188, 376, 564, 0, 188, 376, 564, 0, 188],
                top:[0, 0, 0, 0, 153, 153, 153, 153, 306, 306, 306, 306, 459, 459]
            }
        },
        width:188,
        height:153,
        scale:1.2,
        duration:7000,
        frame:{
            burst:14
        }
    }
});
Animation.Hallucination=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[752, 815, 878, 941, 1004, 1067, 1130, 1193, 1256, 752, 815, 878, 941, 1004, 1067, 1130, 1193, 1256],
                top:[0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 63, 63, 63, 63, 63]
            }
        },
        width:63,
        height:63,
        above:true,
        frame:{
            burst:18
        }
    }
});
Animation.Consume=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[752, 826, 900, 974, 1048, 1122, 1196, 1270, 1344, 752, 826, 900, 974, 1048, 1122, 1196, 1270, 1344],
                top:[126, 126, 126, 126, 126, 126, 126, 126, 126, 196, 196, 196, 196, 196, 196, 196, 196, 196]
            }
        },
        width:74,
        height:70,
        above:true,
        autoSize:true,
        frame:{
            burst:18
        }
    }
});
Animation.StasisField=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:376,
                top:459
            }
        },
        width:130,
        height:110,
        above:true,
        autoSize:'MAX',
        scale:1.25,
        duration:30000,
        frame:{
            burst:1
        }
    }
});
Animation.Lockdown=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[330, 0, 110, 220, 330, 0, 0, 0, 110, 220, 330, 0, 110, 220],
                top:[723, 834, 834, 834, 834, 945, 0, 612, 612, 612, 612, 723, 723, 723]
            }
        },
        width:110,
        height:111,
        above:true,
        autoSize:'MAX',
        duration:60000,
        frame:{
            burst:6
        }
    }
});
Animation.DarkSwarm=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1260, 752, 1006, 1260, 752, 0, 752, 1006, 1260, 752, 1006],
                top:[456, 645, 645, 645, 834, 0, 267, 267, 267, 456, 456]
            }
        },
        width:254,
        height:189,
        scale:1.2,
        duration:60000,
        frame:{
            burst:5
        }
    }
});
Animation.Plague=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1144, 1274, 1404, 754, 884, 1014, 1144, 1274, 1404, 754, 884, 1014, 1144, 1274],
                top:[892, 892, 892, 1022, 1022, 1022, 1022, 1022, 1022, 1152, 1152, 1152, 1152, 1152]
            }
        },
        width:130,
        height:130,
        scale:1.2,
        frame:{
            burst:14
        }
    }
});
Animation.PurpleEffect=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[440, 499, 558, 617],
                top:[902,902,902,902]
            }
        },
        width:59,
        height:60,
        above:true,
        autoSize:'MIN',
        duration:30000,
        frame:{
            burst:4
        }
    }
});
Animation.RedEffect=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1006, 1068, 1130, 1192],
                top:[836,836,836,836]
            }
        },
        width:62,
        height:50,
        above:true,
        autoSize:'MIN',
        duration:30000,
        frame:{
            burst:4
        }
    }
});
Animation.GreenEffect=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1256, 1313, 1370, 1427],
                top:[836,836,836,836]
            }
        },
        width:57,
        height:46,
        above:true,
        autoSize:'MIN',
        duration:30000,
        frame:{
            burst:4
        }
    }
});
Animation.Ensnare=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 131, 262, 393, 524, 0, 131, 262, 393, 524, 0, 131, 262, 393, 524],
                top:[1056, 1056, 1056, 1056, 1056, 1181, 1181, 1181, 1181, 1181, 1306, 1306, 1306, 1306, 1306]
            }
        },
        width:131,
        height:125,
        scale:1.2,
        frame:{
            burst:15
        }
    }
});
Animation.ScannerSweep=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1012, 1012, 1167, 1167, 1322, 1322, 1012, 1012, 1167, 1167, 1322, 1322],
                top:[2220, 2220, 2220, 2220, 2220, 2220, 2335, 2335, 2335, 2335, 2335, 2335]
            }
        },
        width:155,
        height:115,
        scale:1.5,
        duration:15600,
        sight:350,
        frame:{
            burst:12
        }
    }
});
Animation.Feedback=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[632, 702, 772, 842, 912, 982, 1052, 1122, 1192, 1262, 1332, 1402],
                top:[2872, 2872, 2872, 2872, 2872, 2872, 2872, 2872, 2872, 2872, 2872, 2872]
            }
        },
        width:70,
        height:70,
        above:true,
        autoSize:true,
        frame:{
            burst:12
        }
    }
});
Animation.HellFire=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[655, 730, 805, 880, 955, 1030, 1105, 1180, 1255, 1330],
                top:[1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284]
            }
        },
        width:75,
        height:75,
        above:true,
        autoSize:true,
        frame:{
            burst:10
        }
    }
});
Animation.MindControl=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[658, 720, 782, 844, 906, 968, 1030, 1092, 1154, 1216, 1278, 1340],
                top:[1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378]
            }
        },
        width:62,
        height:40,
        above:true,
        autoSize:true,
        frame:{
            burst:12
        }
    }
});
Animation.RechargeShields=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 64, 128, 192, 256, 320, 384, 448, 0, 64, 128, 192, 256, 320, 384, 448],
                top:[1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496]
            }
        },
        width:64,
        height:64,
        above:true,
        autoSize:true,
        frame:{
            burst:16
        }
    }
});
Animation.DisruptionWeb=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1396,1396,1396,1396,1088,1088,1242,1242,1392,1392,1392,1392],
                top:[1194,1194,1322,1322,1432,1432,1432,1432,1432,1432,1538,1538]
            }
        },
        width:154,
        height:112,
        scale:1.2,
        duration:25000,
        frame:{
            burst:12
        }
    }
});
Animation.DefensiveMatrix=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1327, 1427, 1327, 1427, 1327],
                top:[1664, 1664, 1751, 1751, 1838]
            }
        },
        width:90,
        height:84,
        above:true,
        autoSize:true,
        duration:60000,
        frame:{
            burst:5
        }
    }
});
Animation.BlueShield=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 130, 260, 390, 520, 0, 130, 260, 390, 520],
                top:[1560, 1560, 1560, 1560, 1560, 1690, 1690, 1690, 1690, 1690]
            }
        },
        width:130,
        height:130,
        above:true,
        autoSize:true,
        duration:60000,
        frame:{
            burst:10
        }
    }
});
Animation.MaelStorm=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[2, 70, 130, 195, 252, 312, 372, 430, 492, 554],
                top:[2870, 2870, 2870, 2870, 2870, 2870, 2870, 2870, 2870, 2870]
            }
        },
        width:60,
        height:60,
        above:true,
        autoSize:true,
        duration:18000,//Normal 12 sec
        frame:{
            burst:10
        }
    }
});
Animation.RedShield=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[650, 780, 910, 1040, 1170, 650, 780, 910, 1040, 1170],
                top:[1560, 1560, 1560, 1560, 1560, 1690, 1690, 1690, 1690, 1690]
            }
        },
        width:130,
        height:130,
        above:true,
        autoSize:true,
        duration:18000,//Normal 12 sec
        frame:{
            burst:10
        }
    }
});
Animation.BurningCircle=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 112, 224, 336, 448, 560],
                top:[1820, 1820, 1820, 1820, 1820, 1820]
            }
        },
        width:112,
        height:126,
        above:true,
        autoSize:true,
        duration:18000,
        frame:{
            burst:6
        }
    }
});
Animation.Irradiate=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[668, 792, 916, 1042, 1172],
                top:[1820,1820,1820,1820,1820]
            }
        },
        width:126,
        height:110,
        above:true,
        autoSize:true,
        duration:30000,
        frame:{
            burst:5
        }
    }
});
Animation.Recall=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 86, 188, 282, 386, 488, 588, 688, 788, 894],
                top:[1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938]
            }
        },
        width:98,
        height:98,
        frame:{
            burst:10
        }
    }
});
Animation.Ice=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1024, 1164, 1304, 1444],
                top:[1942,1942,1942,1942]
            }
        },
        width:78,
        height:88,
        above:true,
        autoSize:true,
        duration:30000,
        frame:{
            burst:4
        }
    }
});
Animation.EMPShockwave=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 180, 356, 534, 708, 886, 1068],
                top:[2038, 2038, 2038, 2038, 2038, 2038, 2038]
            }
        },
        width:180,
        height:146,
        scale:1.5,
        frame:{
            burst:7
        }
    }
});
Animation.StasisFieldSpell=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1384, 1250, 1250, 1384],
                top:[2044, 2044, 2044, 2044]
            }
        },
        width:128,
        height:84,
        frame:{
            burst:4
        }
    }
});
Animation.MaelStormSpell=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[1384, 1250, 1250, 1384],
                top:[2134, 2134, 2134, 2134]
            }
        },
        width:128,
        height:84,
        frame:{
            burst:4
        }
    }
});
Animation.Restoration=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 128, 256, 384, 512, 640, 768, 896, 0, 128, 256, 384, 512, 640, 768, 896],
                top:[2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2318, 2318, 2318, 2318, 2318, 2318, 2318, 2318]
            }
        },
        width:128,
        height:128,
        above:true,
        autoSize:true,
        frame:{
            burst:16
        }
    }
});
Animation.Shockwave=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 135, 270, 405, 540, 675, 810, 945, 1080, 1215, 1350],
                top:[2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446, 2446]
            }
        },
        width:135,
        height:120,
        frame:{
            burst:11
        }
    }
});
Animation.NuclearStrike=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[0, 154, 308, 462, 616, 770, 924, 1078, 1232, 1386, 0, 154, 308, 462, 616, 770, 924, 1078, 1232, 1386],
                top:[2562,2562,2562,2562,2562,2562,2562,2562,2562,2562,2716,2716,2716,2716,2716,2716,2716,2716,2716,2716]
            }
        },
        width:154,
        height:154,
        scale:2.5,
        frame:{
            burst:20
        }
    }
});
//Evolve related
Animation.EvolveGroundUnit=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left: [524, 562, 600, 638, 676, 714, 524, 562, 600, 638, 676, 714],
                top: [724, 724, 724, 724, 724, 724, 766, 766, 766, 766, 766, 766]
            }
        },
        width:38,
        height:43,
        frame:{
            burst:12
        }
    }
});
Animation.EvolveFlyingUnit=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left: [438, 501, 564, 627, 690, 438, 501, 564, 627],
                top: [810, 810, 810, 810, 810, 855, 855, 855, 855]
            }
        },
        width:63,
        height:46,
        frame:{
            burst:9
        }
    }
});
Animation.SmallMutationComplete=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [1316, 1476, 1636, 1796],
                top: [962, 962, 962, 962]
            }
        },
        width:88,
        height:84,
        frame:{
            burst:4
        }
    }
});
Animation.MiddleMutationComplete=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [980, 1140, 1300],
                top: [1048, 1048, 1048]
            }
        },
        width:120,
        height:112,
        frame:{
            burst:3
        }
    }
});
Animation.LargeMutationComplete=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [960, 1120, 1280],
                top: [1160, 1160, 1160]
            }
        },
        width:160,
        height:150,
        frame:{
            burst:3
        }
    }
});
Animation.ProtossBuildingComplete=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ProtossBuilding",
        imgPos:{
            burst:{
                left: [486, 486, 636, 636],
                top: [648, 648, 648, 648]
            }
        },
        width:152,
        height:152,
        frame:{
            burst:4
        }
    }
});
//Damaged related
Animation.redFireL=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"TerranBuilding",
        imgPos:{
            burst:{
                left: [14, 78, 142, 206, 270, 334, 398, 462, 526, 590, 654, 718],
                top: [546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546]
            }
        },
        width:40,//64N+14
        height:70,
        //above:true,
        //Keep playing until killed
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.redFireM=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"TerranBuilding",
        imgPos:{
            burst:{
                left: [14, 78, 142, 206, 270, 334, 398, 462, 526, 590, 654, 718],
                top: [632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632]
            }
        },
        width:40,//64N+14
        height:70,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.redFireR=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"TerranBuilding",
        imgPos:{
            burst:{
                left: [10, 74, 138, 202, 266, 330, 394, 458, 522, 586, 650, 714],
                top: [722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722]
            }
        },
        width:48,//64N+10
        height:60,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.blueFireL=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ProtossBuilding",
        imgPos:{
            burst:{
                left: [14, 78, 142, 206, 270, 334, 398, 462, 526, 590, 654, 718],
                top: [424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424]
            }
        },
        width:40,//64N+14
        height:70,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.blueFireM=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ProtossBuilding",
        imgPos:{
            burst:{
                left: [14, 78, 142, 206, 270, 334, 398, 462, 526, 590, 654, 718],
                top: [506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506]
            }
        },
        width:40,//64N+14
        height:70,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.blueFireR=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ProtossBuilding",
        imgPos:{
            burst:{
                left: [10, 74, 138, 202, 266, 330, 394, 458, 522, 586, 650, 714],
                top: [588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588, 588]
            }
        },
        width:48,//64N+10
        height:60,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.bloodA=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472],
                top: [1320,1320,1320,1320,1320,1320,1320,1320,1320,1320,1320,1320]
            }
        },
        width:64,
        height:50,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.bloodB=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472],
                top: [1376,1376,1376,1376,1376,1376,1376,1376,1376,1376,1376,1376]
            }
        },
        width:64,
        height:50,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.bloodC=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704],
                top: [1376,1376,1376,1376,1376,1376,1376,1376,1376,1376,1376,1376]
            }
        },
        width:64,
        height:50,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});
Animation.bloodD=Animation.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"ZergBuilding",
        imgPos:{
            burst:{
                left: [0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704],
                top: [1320,1320,1320,1320,1320,1320,1320,1320,1320,1320,1320,1320]
            }
        },
        width:64,
        height:50,
        //above:true,
        forever:true,
        frame:{
            burst:12
        }
    }
});


/***/ }),
/* 3 */
/***/ (function(module, exports) {

var Building=Gobj.extends({
    constructorPlus:function(props){
        //Add id for building
        this.id=Unit.currentID++;
        this.life=this.get('HP');
        if (this.SP) this.shield=this.get('SP');
        if (this.MP) this.magic=50;
        this.selected=false;
        this.isFlying=false;
        this.injuryAnimations=[];
        // Finish below after fully constructed, postpone
        var myself=this;
        Game.commandTimeout(function(){
            //Add this unit into Game
            Building.allBuildings.push(myself);
            //Show unit
            myself.dock();
        },0);
    },
    prototypePlus:{
        name:"Building",
        armor:0,
        sight:385,
        //Override to support multiple hidden frames
        animeFrame:function(){
            //Animation play
            this.action++;
            //Override Gobj here, building doesn't have direction
            var arrLimit=(this.imgPos[this.status].left instanceof Array)?(this.imgPos[this.status].left.length):1;
            if (this.action==this.frame[this.status] || this.action>=arrLimit) this.action=0;
            //Multiple hidden frames support
            if (this.imgPos[this.status].left[this.action]==-1) this.action=0;
        },
        //Dock means stop moving but keep animation
        dock:function(){
            //Clear old timer
            this.stop();
            //Launch new dock timer
            this.status="dock";
            var myself=this;
            var animateFrame=function(){
                //Only play animation, will not move
                myself.animeFrame();
            };
            this.allFrames['animate']=animateFrame;
        },
        //Cannot move
        moving:function(){
            //Nothing
        },
        //Override for sound effect
        die:function(){
            //Old behavior
            Gobj.prototype.die.call(this);
            this.life=0;
            //Clear all injury animations
            this.injuryAnimations.forEach(function(anime){
                anime.die();
            });
            //If has sound effect
            if (this.sound.death && this.insideScreen()) {
                this.sound.death.play();
            }
        },
        reactionWhenAttackedBy:function(enemy){
            //Cannot fight back or escape
            //Resign and give reward to enemy if has no life before dead
            if (this.life<=0) {
                //If multiple target, only die once and give reward
                if (this.status!="dead") {
                    //Killed by enemy
                    this.die();
                    //Give enemy reward
                    enemy.kill++;
                }
            }
        },
        //Fix bug, for consistent, cause 100% damage on building
        calculateDamageBy:function(enemyObj){
            return (enemyObj instanceof Gobj)?enemyObj.get('damage'):enemyObj;
        },
        //Calculate damage, for consistence
        getDamageBy:function(enemy,percent){
            if (percent==undefined) percent=1;//100% by default
            var damage=0;
            //If has SP and shield remain
            if (this.shield>0) {
                damage=((this.calculateDamageBy(enemy)-this.get('plasma'))*percent)>>0;
                if (damage<1) damage=1;
                this.shield-=damage;
                if (this.shield<0) {
                    //Inherit damage
                    this.life+=(this.shield);
                    this.shield=0;
                }
            }
            else {
                damage=((enemy.get('damage')-this.get('armor'))*percent)>>0;
                if (damage<1) damage=1;
                this.life-=damage;
            }
        },
        //Life status
        lifeStatus:function(){
            var lifeRatio=this.life/this.get('HP');
            return ((lifeRatio>0.7)?"green":(lifeRatio>0.3)?"yellow":"red");
        }
    }
});
//Store all buildings
Building.allBuildings=[];
Building.ourBuildings=function(){
    return Building.allBuildings.filter(function(chara){
        return !(chara.isEnemy());
    });
};
Building.enemyBuildings=function(){
    return Building.allBuildings.filter(function(chara){
        return chara.isEnemy();
    });
};

//Zerg buildings
Building.ZergBuilding=Building.extends({
    constructorPlus:function(props){
        this.sound={
            selected:new Audio(Game.CDN+'bgm/ZergBuilding.selected.wav'),
            death:new Audio(Game.CDN+'bgm/ZergBuilding.death.wav')
        };
        //Need draw mud for it
        Map.needRefresh="MAP";
    },
    prototypePlus: {
        //Add basic unit info
        name: "ZergBuilding",
        dieEffect:Burst.ZergBuildingBurst,
        injuryNames:['bloodA','bloodB','bloodC'],
        recover:function(){
            if (this.life<this.get('HP')) this.life+=0.5;
            if (this.magic!=null && this.magic<this.get('MP')) this.magic+=0.5;
        }
    }
});
//Terran buildings
Building.TerranBuilding=Building.extends({
    constructorPlus:function(props){
        this.sound={
            normal:new Audio(Game.CDN+'bgm/TerranBuilding.selected.wav'),
            onfire:new Audio(Game.CDN+'bgm/Building.onfire.wav'),
            death:new Audio(Game.CDN+'bgm/TerranBuilding.death.wav')
        };
        this.sound.selected=this.sound.normal;
    },
    prototypePlus: {
        //Add basic unit info
        name: "TerranBuilding",
        dieEffect:Burst.TerranBuildingBurst,
        injuryNames:['redFireL','redFireM','redFireR'],
        recover:function(){
            if (this.life<(this.get('HP')/4) && (this instanceof Building)) this.life--;
            if (this.magic!=null && this.magic<this.get('MP')) this.magic+=0.5;
        }
    }
});
//Protoss buildings
Building.ProtossBuilding=Building.extends({
    constructorPlus:function(props){
        this.sound={
            normal:new Audio(Game.CDN+'bgm/ProtossBuilding.selected.wav'),
            onfire:new Audio(Game.CDN+'bgm/Building.onfire.wav'),
            death:new Audio(Game.CDN+'bgm/ProtossBuilding.death.wav')
        };
        this.sound.selected=this.sound.normal;
    },
    prototypePlus: {
        //Add basic unit info
        name: "ProtossBuilding",
        plasma:0,
        dieEffect:Burst.ProtossBuildingBurst,
        injuryNames:['blueFireL','blueFireM','blueFireR'],
        recover:function(){
            if (this.shield<this.get('SP')) this.shield+=0.5;
            if (this.magic!=null && this.magic<this.get('MP')) this.magic+=0.5;
        }
    }
});
//Attackable interface
Building.Attackable={
    constructorPlus:function(props){
        this.bullet={};
        this.kill=0;
        this.target={};
        //Idle by default
        this.targetLock=false;
        //Can fire by default
        this.coolDown=true;
    },
    prototypePlus: {
        //Add basic unit info
        name:"AttackableBuilding",
        isInAttackRange:AttackableUnit.prototype.isInAttackRange,
        matchAttackLimit:AttackableUnit.prototype.matchAttackLimit,
        attack:function(enemy){
            //Cannot attack invisible unit or unit who mismatch your attack type
            if (enemy['isInvisible'+this.team] || !(this.matchAttackLimit(enemy))) {
                Referee.voice('pError').play();
                this.stopAttack();
                return;
            }
            if (enemy instanceof Gobj && enemy.status!="dead") {
                //Stop old attack and moving
                this.stopAttack();
                this.dock();
                //New attack
                this.target=enemy;
                var myself=this;
                var attackFrame=function(){
                    //If enemy already dead or becomes invisible or we just miss enemy
                    if (enemy.status=="dead" || enemy['isInvisible'+myself.team] || (myself.isMissingTarget && myself.isMissingTarget())) {
                        myself.stopAttack();
                        myself.dock();
                    }
                    else {
                        //Cannot come in until reload cool down, only dock down can finish attack animation
                        if (myself.isReloaded && myself.isReloaded()) {
                            //Load bullet
                            myself.coolDown=false;
                            //Cool down after attack interval
                            Game.commandTimeout(function(){
                                myself.coolDown=true;
                            },myself.get('attackInterval'));
                            //If AOE, init enemies
                            var enemies;
                            if (myself.AOE) {
                                //Get possible targets
                                switch(myself.attackLimit){
                                    case "flying":
                                        enemies=Unit.allUnits.filter(function(chara){
                                            return chara.team!=myself.team && chara.isFlying;
                                        });
                                        break;
                                    case "ground":
                                        var enemyUnits=Unit.allUnits.filter(function(chara){
                                            return chara.team!=myself.team && !(chara.isFlying);
                                        });
                                        var enemyBuildings=Building.allBuildings.filter(function(chara){
                                            return chara.team!=myself.team;
                                        });
                                        enemies=enemyUnits.concat(enemyBuildings);
                                        break;
                                    default:
                                        enemies=(Unit.allUnits.concat(Building.allBuildings)).filter(function(chara){
                                            return chara.team!=myself.team;
                                        });
                                        break;
                                }
                                //Range filter
                                switch (myself.AOE.type) {
                                    case "LINE":
                                        //Calculate inter-points between enemy
                                        var N=Math.ceil(myself.distanceFrom(enemy)/(myself.AOE.radius));
                                        enemies=enemies.filter(function(chara){
                                            for (var n=1;n<=N;n++){
                                                var X=myself.posX()+n*(enemy.posX()-myself.posX())/N;
                                                var Y=myself.posY()+n*(enemy.posY()-myself.posY())/N;
                                                if (chara.insideCircle({centerX:X>>0,centerY:Y>>0,radius:myself.AOE.radius})
                                                    && !chara['isInvisible'+myself.team]) {
                                                    return true;
                                                }
                                            }
                                            return false;
                                        });
                                        break;
                                    case "MULTIPLE":
                                    case "CIRCLE":
                                    //Default type is CIRCLE
                                    default:
                                        enemies=enemies.filter(function(chara){
                                            return chara.insideCircle(
                                                {centerX:enemy.posX(),centerY:enemy.posY(),radius:myself.AOE.radius})
                                                && !chara['isInvisible'+myself.team];
                                        })
                                }
                            }
                            //Show attack animation if has
                            if (myself.imgPos.attack) {
                                myself.action=0;
                                //Change status to show attack frame
                                myself.status="attack";
                                //Will return to dock after attack
                                Game.commandTimeout(function(){
                                    //If still show attack
                                    if (myself.status=="attack") {
                                        myself.status="dock";
                                        myself.action=0;
                                    }
                                },myself.frame.attack*100);//attackAnimation < attackInterval
                            }
                            //If has bullet
                            if (myself.Bullet) {
                                var fireBullet=function(){
                                    //Will shoot multiple bullets in one time
                                    if (myself.continuousAttack) {
                                        myself.bullet=[];
                                        for (var N=0;N<myself.continuousAttack.count;N++){
                                            var bullet=new myself.Bullet({
                                                from:myself,
                                                to:enemy
                                            });
                                            //Reassign bullets location
                                            if (myself.continuousAttack.layout) myself.continuousAttack.layout(bullet,N);
                                            if (myself.continuousAttack.onlyOnce && N!=(myself.continuousAttack.count/2>>0)) {
                                                bullet.noDamage=true;
                                            }
                                            bullet.fire();
                                            myself.bullet.push(bullet);
                                        }
                                    }
                                    else {
                                        if (myself.AOE && myself.AOE.type=="MULTIPLE"){
                                            for (var N=0;N<Math.min(myself.AOE.count,enemies.length);N++){
                                                new myself.Bullet({
                                                    from:myself,
                                                    to:enemies[N]
                                                }).fire();
                                            }
                                        }
                                        else {
                                            //Reload one new bullet
                                            myself.bullet=new myself.Bullet({
                                                from:myself,
                                                to:enemy
                                            });
                                            myself.bullet.fire();
                                        }
                                    }
                                };
                                if (myself.fireDelay) Game.commandTimeout(function(){
                                    fireBullet();
                                },myself.fireDelay);
                                else fireBullet();
                            }
                            //Else will cause damage immediately (melee attack)
                            else {
                                //Cause damage when burst appear, after finish whole melee attack action
                                if (myself.AOE) {
                                    enemies.forEach(function(chara){
                                        chara.getDamageBy(myself);
                                        chara.reactionWhenAttackedBy(myself);
                                    })
                                }
                                else {
                                    //Cause damage after finish whole melee attack action
                                    Game.commandTimeout(function(){
                                        enemy.getDamageBy(myself);
                                        enemy.reactionWhenAttackedBy(myself);
                                    },myself.frame.attack*100);
                                }
                            }
                            //If has attack effect (burst)
                            if (myself.attackEffect) {
                                if (myself.AOE && myself.AOE.hasEffect) {
                                    enemies.forEach(function(chara){
                                        new myself.attackEffect({x:chara.posX(),y:chara.posY()});
                                    })
                                }
                                else {
                                    new myself.attackEffect({x:enemy.posX(),y:enemy.posY()});
                                }
                            }
                            //Sound effect, missile attack unit will play sound when bullet fire
                            if (!myself.Bullet && myself.insideScreen()) myself.sound.attack.play();
                        }
                    }
                };
                this.allFrames['attack']=attackFrame;
            }
        },
        stopAttack:AttackableUnit.prototype.stopAttack,
        findNearbyTargets:function(){
            //Initial
            var myself=this;
            var units=Unit.allUnits.filter(function(chara){
                return chara.team!=myself.team;
            });
            var buildings=Building.allBuildings.filter(function(chara){
                return chara.team!=myself.team;
            });
            var results=[];
            var myX=myself.posX();
            var myY=myself.posY();
            [units,buildings].forEach(function(charas){
                charas=charas.filter(function(chara){
                    return !chara['isInvisible'+myself.team] && myself.isInAttackRange(chara) && myself.matchAttackLimit(chara);
                }).sort(function(chara1,chara2){
                    var X1=chara1.posX(),Y1=chara1.posY(),X2=chara2.posX(),Y2=chara1.posY();
                    return (X1-myX)*(X1-myX)+(Y1-myY)*(Y1-myY)-(X2-myX)*(X2-myX)-(Y2-myY)*(Y2-myY);
                });
                results=results.concat(charas);
            });
            //Only attack nearest one, unit prior to building
            return results;
        },
        highestPriorityTarget:AttackableUnit.prototype.highestPriorityTarget,
        AI:function(){
            //Dead unit doesn't have following AI
            if (this.status=='dead') return;
            //AI:Attack insight enemy automatically when alive
            if (this.isAttacking()) {
                // target ran out of attack range
                if (this.cannotReachTarget()) {
                    //Forgive target and find other target
                    this.stopAttack();
                    this.targetLock=false;
                }
            }
            else {
                //Find another in-range enemy
                var enemy=this.highestPriorityTarget();
                //Change target if has one
                if (enemy) this.attack(enemy);
            }
        },
        isAttacking:AttackableUnit.prototype.isAttacking,
        cannotReachTarget:function(){
            return !(this.isInAttackRange(this.target));
        },
        isMissingTarget:AttackableUnit.prototype.isMissingTarget,
        isReloaded:AttackableUnit.prototype.isReloaded,
        //Override for attackable unit
        die:function(){
            //Old behavior
            Building.prototype.die.call(this);
            //Clear new timer for unit
            this.stopAttack();
            this.selected=false;
        }
    }
};
//Define all buildings
Building.ZergBuilding.Hatchery=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        this.larvas=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Hatchery",
        imgPos: {
            dock: {
                left: 20,
                top: 44
            }
        },
        width: 128,
        height: 94,
        frame: {
            dock: 1
        },
        HP: 1250,
        manPlus: 10,
        produceLarva:true,
        cost:{
            mine:300,
            time:1200
        },
        items: {
            '1':{name:'SelectLarva'},
            '2':{name:'SetRallyPoint'},
            '3':{name:'EvolveBurrow'},
            '7':{name:'Lair',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='SpawningPool';
                })
            }}
        },
        injuryOffsets:[{x:-18,y:12},{x:-12,y:-22},{x:18,y:12}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ],
        buildZergBuilding:function(){
            var target=Building.ZergBuilding[this.buildName];
            var mutation=this.evolveTo({
                type:eval('Building.'+target.prototype.evolves[0].step),
                chain:true
            });
            mutation.buildName=this.buildName;
            //Calculate duration
            var duration=Resource.getCost(this.buildName).time;
            //Cheat: Operation cwal
            if (Cheat.cwal) duration=40;
            //Processing flag on transfer
            mutation.processing={
                name:mutation.buildName,
                startTime:Game.mainTick,//new Date().getTime()
                time:duration
            };
            //Evolve chain
            for (var N=1;N<target.prototype.evolves.length;N++){
                (function(n){
                    var evolveInfo=target.prototype.evolves[n];
                    Game.commandTimeout(function(){
                        if (mutation.status!='dead'){
                            //Evolve
                            var evolveTarget=(eval('Building.'+evolveInfo.step));
                            //Step is constructor function
                            if (evolveTarget){
                                var old=mutation;
                                mutation=mutation.evolveTo({
                                    type:evolveTarget,
                                    chain:true
                                });
                                mutation.processing=old.processing;
                                mutation.buildName=old.buildName;
                            }
                            //Step is status string
                            else {
                                mutation.status=evolveInfo.step;
                            }
                        }
                    },duration*100*evolveInfo.percent);
                })(N);
            }
            //Final evolve
            Game.commandTimeout(function(){
                if (mutation.status!='dead'){
                    //Evolve
                    mutation.evolveTo({
                        type:Building.ZergBuilding[mutation.buildName],
                        burstArr:mutation.evolveEffect
                    });
                }
            },duration*100);
        }
    }
});
Building.ZergBuilding.Lair=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        this.larvas=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Lair",
        imgPos: {
            dock: {
                left: 22,
                top: 172
            }
        },
        width: 136,
        height: 114,
        frame: {
            dock: 1
        },
        HP: 1800,
        manPlus: 10,
        produceLarva:true,
        cost:{
            mine:150,
            gas:100,
            time:1000
        },
        items: {
            '1':{name:'SelectLarva'},
            '2':{name:'SetRallyPoint'},
            '3':{name:'EvolveBurrow'},
            '4':{name:'EvolveVentralSacs'},
            '5':{name:'EvolveAntennas'},
            '6':{name:'EvolvePneumatizedCarapace'},
            '7':{name:'Hive',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='QueenNest';
                })
            }}
        },
        injuryOffsets:[{x:-22,y:14},{x:-12,y:-22},{x:22,y:14}],
        evolves: [
            {step:'ZergBuilding.MutationM',percent:0}
        ],
        buildZergBuilding:function(){
            Building.ZergBuilding.Hatchery.prototype.buildZergBuilding.call(this);
        }
    }
});
Building.ZergBuilding.Hive=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        this.larvas=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Hive",
        imgPos: {
            dock: {
                left: 26,
                top: 300
            }
        },
        width: 130,
        height: 132,
        frame: {
            dock: 1
        },
        HP: 2500,
        manPlus: 10,
        produceLarva:true,
        cost:{
            mine:200,
            gas:150,
            time:1200
        },
        items: {
            '1':{name:'SelectLarva'},
            '2':{name:'SetRallyPoint'},
            '3':{name:'EvolveBurrow'},
            '4':{name:'EvolveVentralSacs'},
            '5':{name:'EvolveAntennas'},
            '6':{name:'EvolvePneumatizedCarapace'}
        },
        injuryOffsets:[{x:-26,y:16},{x:2,y:-32},{x:26,y:16}],
        evolves: [
            {step:'ZergBuilding.MutationM',percent:0},
            {step:'ZergBuilding.MutationL',percent:0.5}
        ]
    }
});
Building.ZergBuilding.CreepColony=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "CreepColony",
        imgPos: {
            dock: {
                left: 924,
                top: 544
            }
        },
        width: 72,
        height: 66,
        frame: {
            dock: 1
        },
        HP: 400,
        cost:{
            mine:75,
            time:200
        },
        items: {
            '7':{name:'SporeColony',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='EvolutionChamber';
                })
            }},
            '8':{name:'SunkenColony',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='SpawningPool';
                })
            }}
        },
        injuryOffsets:[{x:-14,y:8},{x:-4,y:-16},{x:20,y:8}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0}
        ],
        buildZergBuilding:function(){
            Building.ZergBuilding.Hatchery.prototype.buildZergBuilding.call(this);
        }
    }
});
Building.ZergBuilding.SunkenColony=Building.ZergBuilding.extends(Building.Attackable).extends({
    constructorPlus:function(props){
        this.sound.attack=new Audio(Game.CDN+'bgm/Colony.attack.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "SunkenColony",
        imgPos: {
            dock:{
                left:916,
                top:714
            },
            attack: {
                left:[20,116,212,308,404,500,596,692,788,884],
                top:[802,802,802,802,802,802,802,802,802,802]
            }
        },
        width: 84,//96N+20
        height: 66,
        frame: {
            dock: 1,
            attack:10
        },
        HP: 300,
        cost:{
            mine:50,
            time:200
        },
        //Attackable
        damage:40,
        attackRange: 245,
        attackInterval:2200,
        attackLimit:"ground",
        attackEffect:Burst.Sunken,
        attackType:AttackableUnit.BURST_ATTACK,
        injuryOffsets:[{x:-14,y:8},{x:-4,y:-12},{x:20,y:8}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0}
        ]
    }
});
Building.ZergBuilding.SporeColony=Building.ZergBuilding.extends(Building.Attackable).extends({
    constructorPlus:function(props){
        this.imgPos.attack=this.imgPos.dock;
        this.frame.attack=this.frame.dock;
        this.sound.attack=new Audio(Game.CDN+'bgm/Colony.attack.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "SporeColony",
        imgPos: {
            dock: {
                left: 924,
                top: 618
            }
        },
        width: 70,
        height: 80,
        frame: {
            dock: 1
        },
        HP: 400,
        detector:Gobj.detectorBuffer,
        cost:{
            mine:50,
            time:200
        },
        //Attackable
        damage:15,
        attackRange:245,
        attackInterval:1500,
        attackLimit:"flying",
        attackType:AttackableUnit.NORMAL_ATTACK,
        injuryOffsets:[{x:-14,y:8},{x:-12,y:-16},{x:14,y:8}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0}
        ]
    }
});
Building.ZergBuilding.Extractor=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Extractor",
        imgPos: {
            dock: {
                left: 768,
                top: 26
            }
        },
        width: 128,
        height: 116,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:50,
            time:400
        },
        injuryOffsets:[{x:-24,y:14},{x:-18,y:-16},{x:24,y:14}],
        evolves: [
            {step:'ZergBuilding.MutationL',percent:0}
        ]
    }
});
Building.ZergBuilding.SpawningPool=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "SpawningPool",
        imgPos: {
            dock: {
                left: 784,
                top: 210
            }
        },
        width: 100,
        height: 78,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:150,
            time:800
        },
        items: {
            '1':{name:'EvolveMetabolicBoost'},
            '2':{name:'EvolveAdrenalGlands'}
        },
        injuryOffsets:[{x:-15,y:10},{x:0,y:-18},{x:15,y:10}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.EvolutionChamber=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "EvolutionChamber",
        imgPos: {
            dock: {
                left: 1468,
                top: 684
            }
        },
        width: 100,
        height: 94,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:75,
            time: 400
        },
        items: {
            '1':{name:'UpgradeMeleeAttacks'},
            '2':{name:'UpgradeMissileAttacks'},
            '3':{name:'EvolveCarapace'}
        },
        injuryOffsets:[{x:-18,y:12},{x:0,y:-22},{x:18,y:12}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.HydraliskDen=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "HydraliskDen",
        imgPos: {
            dock: {
                left: 1472,
                top: 8
            }
        },
        width: 96,
        height: 104,
        frame: {
            dock: 1
        },
        HP: 850,
        cost:{
            mine:100,
            gas:50,
            time:400
        },
        items: {
            '1':{name:'EvolveMuscularAugments'},
            '2':{name:'EvolveGroovedSpines'},
            '4':{name:'EvolveLurkerAspect'}
        },
        injuryOffsets:[{x:-20,y:12},{x:0,y:-24},{x:20,y:12}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.Spire=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Spire",
        imgPos: {
            dock: {
                left: 1486,
                top: 444
            }
        },
        width: 68,
        height: 102,
        frame: {
            dock: 1
        },
        HP: 600,
        cost:{
            mine:200,
            gas:150,
            time:1200
        },
        items: {
            '1':{name:'UpgradeFlyerAttacks'},
            '2':{name:'UpgradeFlyerCarapace'},
            '7':{name:'GreaterSpire',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Hive';
                })
            }}
        },
        injuryOffsets:[{x:-20,y:18},{x:-12,y:-16},{x:20,y:18}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ],
        buildZergBuilding:function(){
            Building.ZergBuilding.Hatchery.prototype.buildZergBuilding.call(this);
        }
    }
});
Building.ZergBuilding.GreaterSpire=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "GreaterSpire",
        imgPos: {
            dock: {
                left: 1484,
                top: 558
            }
        },
        width: 78,
        height: 102,
        frame: {
            dock: 1
        },
        HP: 1000,
        cost:{
            mine:100,
            gas:150,
            time: 1200
        },
        items: {
            '1':{name:'UpgradeFlyerAttacks'},
            '2':{name:'UpgradeFlyerCarapace'}
        },
        injuryOffsets:[{x:-20,y:22},{x:-12,y:-16},{x:20,y:22}],
        evolves: [
            {step:'ZergBuilding.MutationM',percent:0}
        ]
    }
});
Building.ZergBuilding.QueenNest=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "QueenNest",
        imgPos: {
            dock: {
                left: 1462,
                top: 236
            }
        },
        width: 84,
        height: 90,
        frame: {
            dock: 1
        },
        HP: 850,
        cost:{
            mine:150,
            gas:100,
            time: 600
        },
        items: {
            '1':{name:'EvolveSpawnBroodling'},
            '2':{name:'EvolveEnsnare'},
            '3':{name:'EvolveGameteMeiosis'}
        },
        injuryOffsets:[{x:-16,y:10},{x:-12,y:-20},{x:16,y:10}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.NydusCanal=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "NydusCanal",
        imgPos: {
            dock: {
                left: 908,
                top: 444
            }
        },
        width: 72,
        height: 76,
        frame: {
            dock: 1
        },
        HP: 250,
        cost:{
            mine:150,
            time: 400
        },
        items: {
            '1':{name:'NydusCanal'}
        },
        injuryOffsets:[{x:-14,y:14},{x:-18,y:-18},{x:14,y:14}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.UltraliskCavern=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "UltraliskCavern",
        imgPos: {
            dock: {
                left: 1468,
                top: 122
            }
        },
        width: 102,
        height: 98,
        frame: {
            dock: 1
        },
        HP: 600,
        cost:{
            mine:150,
            gas:200,
            time: 800
        },
        items: {
            '1':{name:'EvolveAnabolicSynthesis'},
            '2':{name:'EvolveChitinousPlating'}
        },
        injuryOffsets:[{x:-20,y:12},{x:-12,y:-24},{x:20,y:12}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.DefilerMound=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "DefilerMound",
        imgPos: {
            dock: {
                left: 1458,
                top: 344
            }
        },
        width: 118,
        height: 90,
        frame: {
            dock: 1
        },
        HP: 850,
        cost:{
            mine:100,
            gas:100,
            time: 600
        },
        items: {
            '1':{name:'EvolvePlague'},
            '2':{name:'EvolveConsume'},
            '3':{name:'EvolveMetasynapticNode'}
        },
        injuryOffsets:[{x:-18,y:12},{x:-12,y:-22},{x:18,y:12}],
        evolves: [
            {step:'ZergBuilding.MutationS',percent:0},
            {step:'ZergBuilding.MutationM',percent:0.5}
        ]
    }
});
Building.ZergBuilding.InfestedBase=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "InfestedBase",
        noMud:true,
        imgPos: {
            dock: {
                left: 1160,
                top: 328
            }
        },
        width: 134,
        height: 108,
        frame: {
            dock: 1
        },
        HP: 1500,
        items: {
            '1':{name:'InfestedTerran'},
            '6':{name:'SetRallyPoint'}
        },
        injuryOffsets:[{x:-22,y:14},{x:-6,y:-26},{x:22,y:14}]
    }
});
Building.ZergBuilding.OvermindI=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "OvermindI",
        imgPos: {
            dock: {
                left: 6,
                top: 476
            }
        },
        width: 208,
        height: 122,
        frame: {
            dock: 1
        },
        HP: 3000,
        injuryOffsets:[{x:-24,y:15},{x:-6,y:-30},{x:24,y:15}]
    }
});
Building.ZergBuilding.OvermindII=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "OvermindII",
        imgPos: {
            dock: {
                left: 6,
                top: 626
            }
        },
        width: 208,
        height: 136,
        frame: {
            dock: 1
        },
        HP: 3000,
        injuryOffsets:[{x:-28,y:18},{x:-6,y:-34},{x:28,y:18}]
    }
});

Building.TerranBuilding.CommandCenter=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "CommandCenter",
        imgPos: {
            dock: {
                left: 0,
                top: 6
            }
        },
        width: 129,
        height: 106,
        frame: {
            dock: 1
        },
        HP: 1500,
        manPlus: 10,
        cost:{
            mine:400,
            time:1200
        },
        items: {
            '1':{name:'SCV'},
            '6':{name:'SetRallyPoint'},
            '7':{name:'ComstatStation',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead') && Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Academy';
                })
            }},
            '8':{name:'NuclearSilo',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead') && Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='ConvertOps';
                })
            }},
            '9':{name:'LiftOff'}
        },
        injuryOffsets:[{x:-35,y:-30},{x:-2,y:-15},{x:35,y:-15}],
        evolves: [
            {step:'TerranBuilding.ConstructionL',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ],
        buildTerranBuilding:function(){
            var target=Building.TerranBuilding[this.buildName];
            var construction=new (eval('Building.'+target.prototype.evolves[0].step))
                ({x:this.x+this.width,y:this.y+this.height-target.prototype.height,team:this.team});
            construction.buildName=this.buildName;
            this.attachment=construction;
            Button.reset();
            //Calculate duration
            var duration=Resource.getCost(this.buildName).time;
            //Cheat: Operation cwal
            if (Cheat.cwal) duration=40;
            //Processing flag on transfer
            construction.processing={
                name:construction.buildName,
                startTime:Game.mainTick,//new Date().getTime()
                time:duration
            };
            var myself=this;
            //Evolve chain
            for (var N=1;N<target.prototype.evolves.length;N++){
                (function(n){
                    var evolveInfo=target.prototype.evolves[n];
                    Game.commandTimeout(function(){
                        if (construction.status!='dead'){
                            //Evolve
                            var evolveTarget=(eval('Building.'+evolveInfo.step));
                            //Step is constructor function
                            if (evolveTarget){
                                var old=construction;
                                construction=construction.evolveTo({
                                    type:evolveTarget,
                                    mixin:(evolveTarget.prototype.name=='ConstructionSkeleton')?{type:construction.buildName}:null,
                                    chain:true
                                });
                                construction.processing=old.processing;
                                construction.buildName=old.buildName;
                                myself.attachment=construction;
                            }
                            //Step is status string
                            else {
                                construction.status=evolveInfo.step;
                            }
                        }
                    },duration*100*evolveInfo.percent);
                })(N);
            }
            //Final evolve
            Game.commandTimeout(function(){
                if (construction.status!='dead'){
                    //Evolve
                    myself.attachment=construction.evolveTo({
                        type:Building.TerranBuilding[construction.buildName]
                    });
                }
            },duration*100);
        }
    }
});
Building.TerranBuilding.SupplyDepot=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "SupplyDepot",
        imgPos: {
            dock: {
                left: [0,95,190,285,380],
                top: [292,292,292,292,292]
            }
        },
        width: 96,
        height: 76,
        frame: {
            dock: 5
        },
        HP: 500,
        manPlus: 8,
        cost:{
            mine:100,
            time:400
        },
        injuryOffsets:[{x:-20,y:-25},{x:0,y:-10},{x:25,y:-10}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.Refinery=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Refinery",
        imgPos: {
            dock: {
                left: 256,
                top: 16
            }
        },
        width: 124,
        height: 96,
        frame: {
            dock: 1
        },
        HP: 500,
        cost:{
            mine:100,
            time:400
        },
        injuryOffsets:[{x:-26,y:-36},{x:0,y:10},{x:38,y:5}],
        evolves: [
            {step:'TerranBuilding.ConstructionR',percent:0},
            {step:'step2',percent:0.3},
            {step:'TerranBuilding.ConstructionF',percent:0.7}
        ]
    }
});
Building.TerranBuilding.Barracks=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Barracks",
        imgPos: {
            dock: {
                left: 128,
                top: 0
            }
        },
        width: 126,
        height: 110,
        frame: {
            dock: 1
        },
        HP: 1000,
        cost:{
            mine:150,
            time:800
        },
        items: {
            '1':{name:'Marine'},
            '2':{name:'Firebat',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Academy';
                })
            }},
            '3':{name:'Ghost',condition:function(){
                //Has ScienceFacility with attachment ConvertOps
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='ScienceFacility'
                        && (chara.attachment && chara.attachment.status!='dead' && chara.attachment.name=='ConvertOps');
                });
            }},
            '4':{name:'Medic',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Academy';
                })
            }},
            '6':{name:'SetRallyPoint'},
            '9':{name:'LiftOff'}
        },
        injuryOffsets:[{x:-25,y:-40},{x:35,y:0},{x:5,y:-5}],
        evolves: [
            {step:'TerranBuilding.ConstructionL',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.EngineeringBay=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "EngineeringBay",
        imgPos: {
            dock: {
                left: 380,
                top: 14
            }
        },
        width: 144,
        height: 98,
        frame: {
            dock: 1
        },
        HP: 850,
        cost:{
            mine:125,
            time:600
        },
        items: {
            '1':{name:'UpgradeInfantryWeapons'},
            '2':{name:'UpgradeInfantryArmors'}
        },
        injuryOffsets:[{x:-25,y:-40},{x:25,y:-10},{x:15,y:-50}],
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.MissileTurret=Building.TerranBuilding.extends(Building.Attackable).extends({
    constructorPlus:function(props){
        this.imgPos.attack=this.imgPos.dock;
        this.frame.attack=this.frame.dock;
        this.sound.attack=new Audio(Game.CDN+'bgm/Wraith.attackF.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "MissileTurret",
        imgPos: {
            dock: {
                left: [0, 44, 88, 132, 176, 220, 264, 308, 352, 396,
                    440, 484, 528, 572, 616, 660, 704, 748, 792],
                top: [368,368,368,368,368,368,368,368,368,368,
                    368,368,368,368,368,368,368,368,368]
            }
        },
        width: 44,
        height: 56,
        frame: {
            dock: 19
        },
        HP: 200,
        detector:Gobj.detectorBuffer,
        cost:{
            mine:100,
            time:300
        },
        //Attackable
        damage:20,
        attackRange: 245,
        attackInterval:1500,
        attackLimit:"flying",
        attackType:AttackableUnit.BURST_ATTACK,
        injuryOffsets:[{x:-10,y:-15},{x:10,y:-10},{x:0,y:12}],
        injuryScale:0.6,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'TerranBuilding.ConstructionF',percent:0.5}
        ]
    }
});
Building.TerranBuilding.Academy=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Academy",
        imgPos: {
            dock: {
                left: 526,
                top: 16
            }
        },
        width: 92,
        height: 96,
        frame: {
            dock: 1
        },
        HP: 600,
        cost:{
            mine:150,
            time:800
        },
        items: {
            '1':{name:'ResearchU238Shells'},
            '2':{name:'ResearchStimPackTech'},
            '4':{name:'ResearchRestoration'},
            '5':{name:'ResearchOpticalFlare'},
            '6':{name:'ResearchCaduceusReactor'}
        },
        injuryOffsets:[{x:-20,y:-28},{x:26,y:-46},{x:16,y:12}],
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.Bunker=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Bunker",
        imgPos: {
            dock: {
                left: 620,
                top: 50
            }
        },
        width: 96,
        height: 62,
        frame: {
            dock: 1
        },
        HP: 350,
        cost:{
            mine:100,
            time:300
        },
        items: {
            '8':{name:'Load'}
        },
        injuryOffsets:[{x:4,y:-24},{x:-26,y:-18},{x:20,y:-2}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.Factory=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Factory",
        imgPos: {
            dock: {
                left: 716,
                top: 0
            }
        },
        width: 114,
        height: 112,
        frame: {
            dock: 1
        },
        HP: 1250,
        cost:{
            mine:200,
            gas:100,
            time:800
        },
        items: {
            '1':{name:'Vulture'},
            '2':{name:'Tank',condition:function(){
                var attach=Game.selectedUnit.attachment;
                return (attach && attach.status!='dead' && attach.name=='MachineShop');
            }},
            '3':{name:'Goliath',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Armory';
                })
            }},
            '6':{name:'SetRallyPoint'},
            '7':{name:'MachineShop',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead');
            }},
            '9':{name:'LiftOff'}
        },
        injuryOffsets:[{x:-32,y:-38},{x:45,y:-26},{x:10,y:-32}],
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ],
        buildTerranBuilding:function(){
            Building.TerranBuilding.CommandCenter.prototype.buildTerranBuilding.call(this);
        }
    }
});
Building.TerranBuilding.Starport=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Starport",
        imgPos: {
            dock: {
                left: 830,
                top: 4
            }
        },
        width: 108,
        height: 108,
        frame: {
            dock: 1
        },
        HP: 1300,
        cost:{
            mine:150,
            gas:100,
            time:700
        },
        items: {
            '1':{name:'Wraith'},
            '2':{name:'Dropship',condition:function(){
                var attach=Game.selectedUnit.attachment;
                return (attach && attach.status!='dead' && attach.name=='ControlTower');
            }},
            '3':{name:'Vessel',condition:function(){
                var attach=Game.selectedUnit.attachment;
                //Has attachment ControlTower, and has ScienceFacility
                return (attach && attach.status!='dead' && attach.name=='ControlTower')
                    && Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='ScienceFacility';
                })
            }},
            '4':{name:'BattleCruiser',condition:function(){
                var attach=Game.selectedUnit.attachment;
                //Has attachment ControlTower, and has ScienceFacility with attachment PhysicsLab
                return (attach && attach.status!='dead' && attach.name=='ControlTower')
                    && Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='ScienceFacility'
                        && (chara.attachment && chara.attachment.status!='dead' && chara.attachment.name=='PhysicsLab');
                    });
            }},
            '5':{name:'Valkyrie',condition:function(){
                var attach=Game.selectedUnit.attachment;
                //Has attachment ControlTower, and has Armory
                return (attach && attach.status!='dead' && attach.name=='ControlTower')
                    && Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Armory';
                })
            }},
            '6':{name:'SetRallyPoint'},
            '7':{name:'ControlTower',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead');
            }},
            '9':{name:'LiftOff'}
        },
        injuryOffsets:[{x:-32,y:-10},{x:0,y:-10},{x:24,y:-35}],
        evolves: [
            {step:'TerranBuilding.ConstructionL',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ],
        buildTerranBuilding:function(){
            Building.TerranBuilding.CommandCenter.prototype.buildTerranBuilding.call(this);
        }
    }
});
Building.TerranBuilding.ScienceFacility=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ScienceFacility",
        imgPos: {
            dock: {
                left: 1042,
                top: 20
            }
        },
        width: 108,
        height: 92,
        frame: {
            dock: 1
        },
        HP: 850,
        cost:{
            mine:100,
            gas:150,
            time:600
        },
        items: {
            '1':{name:'ResearchEMPShockwaves'},
            '2':{name:'ResearchIrradiate'},
            '3':{name:'ResearchTitanReactor'},
            '7':{name:'ConvertOps',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead');
            }},
            '8':{name:'PhysicsLab',condition:function(){
                return (!Game.selectedUnit.attachment || Game.selectedUnit.attachment.status=='dead');
            }},
            '9':{name:'LiftOff'}
        },
        injuryOffsets:[{x:-28,y:-40},{x:28,y:-32},{x:-20,y:5}],
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ],
        buildTerranBuilding:function(){
            Building.TerranBuilding.CommandCenter.prototype.buildTerranBuilding.call(this);
        }
    }
});
Building.TerranBuilding.Armory=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Armory",
        imgPos: {
            dock: {
                left: 938,
                top: 14
            }
        },
        width: 102,
        height: 98,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:100,
            gas:50,
            time: 800
        },
        items: {
            '1':{name:'UpgradeVehicleWeapons'},
            '2':{name:'UpgradeShipWeapons'},
            '4':{name:'UpgradeVehicleArmors'},
            '5':{name:'UpgradeShipArmors'}
        },
        injuryOffsets:[{x:-30,y:12},{x:-8,y:-22},{x:20,y:-12}],
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.ComstatStation=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ComstatStation",
        imgPos: {
            dock: {
                left: 0,
                top: 122
            }
        },
        width: 68,
        height: 62,
        frame: {
            dock: 1
        },
        HP: 750,
        MP: 200,
        cost:{
            mine:50,
            gas:50,
            time: 400
        },
        items:{
            '1':{name:'ScannerSweep'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.NuclearSilo=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "NuclearSilo",
        imgPos: {
            dock: {
                left: 282,
                top: 124
            }
        },
        width: 64,
        height: 60,
        frame: {
            dock: 1
        },
        HP: 600,
        cost:{
            mine:100,
            gas:100,
            time: 800
        },
        items:{
            '1':{name:'ArmNuclearSilo'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.MachineShop=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "MachineShop",
        imgPos: {
            dock: {
                left: 208,
                top: 112
            }
        },
        width: 74,
        height: 72,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:50,
            gas:50,
            time: 400
        },
        items: {
            '1':{name:'ResearchIonThrusters'},
            '2':{name:'ResearchSpiderMines'},
            '3':{name:'ResearchSiegeTech'},
            '4':{name:'ResearchCharonBoosters'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.ControlTower=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ControlTower",
        imgPos: {
            dock: {
                left: 68,
                top: 120
            }
        },
        width: 72,
        height: 64,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:50,
            gas:50,
            time: 400
        },
        items: {
            '1':{name:'ResearchCloakingField'},
            '2':{name:'ResearchApolloReactor'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionM',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.PhysicsLab=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "PhysicsLab",
        imgPos: {
            dock: {
                left: 348,
                top: 120
            }
        },
        width: 66,
        height: 64,
        frame: {
            dock: 1
        },
        HP: 600,
        cost:{
            mine:50,
            gas:50,
            time: 400
        },
        items: {
            '1':{name:'ResearchYamatoGun'},
            '2':{name:'ResearchColossusReactor'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.ConvertOps=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ConvertOps",
        imgPos: {
            dock: {
                left: 140,
                top: 132
            }
        },
        width: 68,
        height: 52,
        frame: {
            dock: 1
        },
        HP: 750,
        cost:{
            mine:50,
            gas:50,
            time: 400
        },
        items: {
            '1':{name:'ResearchLockdown'},
            '2':{name:'ResearchPersonalCloaking'},
            '4':{name:'ResearchOcularImplants'},
            '5':{name:'ResearchMoebiusReactor'}
        },
        injuryOffsets:[{x:-12,y:-26},{x:16,y:0},{x:16,y:-20}],
        injuryScale:0.8,
        evolves: [
            {step:'TerranBuilding.ConstructionS',percent:0},
            {step:'step2',percent:0.25},
            {step:'step3',percent:0.5},
            {step:'TerranBuilding.ConstructionF',percent:0.75}
        ]
    }
});
Building.TerranBuilding.CrashCruiser=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "CrashCruiser",
        imgPos: {
            dock: {
                left: 154,
                top: 440
            }
        },
        width: 106,
        height: 108,
        frame: {
            dock: 1
        },
        HP: 250,
        injuryOffsets:[{x:-8,y:-38},{x:24,y:-20},{x:-22,y:6}]
    }
});
Building.TerranBuilding.BigCannon=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "BigCannon",
        imgPos: {
            dock: {
                left: 0,
                top: 423
            }
        },
        width: 152,
        height: 110,
        frame: {
            dock: 1
        },
        HP: 500,
        injuryOffsets:[{x:-10,y:-40},{x:42,y:-30},{x:8,y:26}]
    }
});

Building.ProtossBuilding.Nexus=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Nexus",
        imgPos: {
            dock: {
                left: 24,
                top: 12
            }
        },
        width: 146,
        height: 136,
        frame: {
            dock: 1
        },
        HP: 750,
        SP: 750,
        manPlus: 10,
        cost:{
            mine:400,
            time:1200
        },
        items: {
            '1':{name:'Probe'},
            '6':{name:'SetRallyPoint'}
        },
        injuryOffsets:[{x:-10,y:-30},{x:0,y:36},{x:38,y:30}]
    }
});
Building.ProtossBuilding.Pylon=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Pylon",
        imgPos: {
            dock: {
                left: 454,
                top: 314
            }
        },
        width: 60,
        height: 68,
        frame: {
            dock: 1
        },
        HP: 300,
        SP: 300,
        manPlus: 8,
        cost:{
            mine:100,
            time:300
        },
        injuryOffsets:[{x:8,y:6},{x:0,y:-16},{x:0,y:0}],
        injuryScale:0.8
    }
});
Building.ProtossBuilding.Assimilator=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Assimilator",
        imgPos: {
            dock: {
                left: 300,
                top: 36
            }
        },
        width: 126,
        height: 100,
        frame: {
            dock: 1
        },
        HP: 450,
        SP: 450,
        cost:{
            mine:100,
            time:400
        },
        injuryOffsets:[{x:-18,y:-38},{x:40,y:-26},{x:20,y:-38}]
    }
});
Building.ProtossBuilding.Gateway=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Gateway",
        imgPos: {
            dock: {
                left: 580,
                top: 20
            }
        },
        width: 128,
        height: 110,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:150,
            time:600
        },
        items: {
            '1':{name:'Zealot'},
            '2':{name:'Dragoon',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='CyberneticsCore';
                })
            }},
            '3':{name:'Templar',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='TemplarArchives';
                })
            }},
            '4':{name:'DarkTemplar',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='TemplarArchives';
                })
            }},
            '6':{name:'SetRallyPoint'}
        },
        injuryOffsets:[{x:0,y:-54},{x:-42,y:-24},{x:36,y:16}]
    }
});
Building.ProtossBuilding.Forge=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Forge",
        imgPos: {
            dock: {
                left: 210,
                top: 178
            }
        },
        width: 102,
        height: 80,
        frame: {
            dock: 1
        },
        HP: 550,
        SP: 550,
        cost:{
            mine:150,
            time:400
        },
        items: {
            '1':{name:'UpgradeGroundWeapons'},
            '2':{name:'UpgradeGroundArmor'},
            '3':{name:'UpgradePlasmaShields'}
        },
        injuryOffsets:[{x:23,y:-47},{x:-23,y:-4},{x:25,y:1}]
    }
});
Building.ProtossBuilding.PhotonCannon=Building.ProtossBuilding.extends(Building.Attackable).extends({
    constructorPlus:function(props){
        this.imgPos.attack=this.imgPos.dock;
        this.sound.attack=new Audio(Game.CDN+'bgm/Dragoon.attack.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "PhotonCannon",
        imgPos: {
            dock: {
                left: [98,162,226,290,290,290,290,290,290],
                top: [320,320,320,320,320,320,320,320,320]
            }
        },
        width: 62,
        height: 54,
        frame: {
            dock: 1,
            attack: 9
        },
        HP: 100,
        SP: 100,
        detector:Gobj.detectorBuffer,
        cost:{
            mine:150,
            time:500
        },
        //Attackable
        damage:20,
        attackRange: 245,
        attackInterval:2200,
        attackType:AttackableUnit.NORMAL_ATTACK,
        fireDelay:400,
        injuryOffsets:[{x:-12,y:-18},{x:12,y:0},{x:12,y:-20}],
        injuryScale:0.8
    }
});
Building.ProtossBuilding.CyberneticsCore=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "CyberneticsCore",
        imgPos: {
            dock: {
                left: 314,
                top: 168
            }
        },
        width: 90,
        height: 88,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:200,
            time:600
        },
        items: {
            '1':{name:'UpgradeAirWeapons'},
            '2':{name:'UpgradeAirArmor'},
            '3':{name:'DevelopSingularityCharge'}
        },
        injuryOffsets:[{x:-8,y:-36},{x:28,y:10},{x:-18,y:4}]
    }
});
Building.ProtossBuilding.ShieldBattery=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ShieldBattery",
        imgPos: {
            dock: {
                left: 360,
                top: 318
            }
        },
        width: 90,
        height: 64,
        frame: {
            dock: 1
        },
        HP: 200,
        SP: 200,
        MP: 200,
        cost:{
            mine:100,
            time:300
        },
        items:{
            '1':{name:'RechargeShields'}
        },
        injuryOffsets:[{x:-12,y:-32},{x:0,y:-20},{x:12,y:-8}],
        injuryScale:0.8
    }
});
Building.ProtossBuilding.RoboticsFacility=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "RoboticsFacility",
        imgPos: {
            dock: {
                left: 504,
                top: 166
            }
        },
        width: 96,
        height: 92,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:200,
            gas:200,
            time:800
        },
        items: {
            '1':{name:'Shuttle'},
            '2':{name:'Reaver',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='RoboticsSupportBay';
                })
            }},
            '3':{name:'Observer',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='Observatory';
                })
            }},
            '6':{name:'SetRallyPoint'}
        },
        injuryOffsets:[{x:-18,y:-25},{x:12,y:10},{x:18,y:-15}]
    }
});
Building.ProtossBuilding.StarGate=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "StarGate",
        imgPos: {
            dock: {
                left: 708,
                top: 10
            }
        },
        width: 124,
        height: 116,
        frame: {
            dock: 1
        },
        HP: 600,
        SP: 600,
        cost:{
            mine:150,
            gas:150,
            time:700
        },
        items: {
            '1':{name:'Scout'},
            '2':{name:'Carrier',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='FleetBeacon';
                })
            }},
            '3':{name:'Arbiter',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='ArbiterTribunal';
                })
            }},
            '4':{name:'Corsair'},
            '6':{name:'SetRallyPoint'}
        },
        injuryOffsets:[{x:10,y:-65},{x:35,y:12},{x:-20,y:-42}]
    }
});
Building.ProtossBuilding.CitadelOfAdun=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "CitadelOfAdun",
        imgPos: {
            dock: {
                left: 114,
                top: 172
            }
        },
        width: 98,
        height: 86,
        frame: {
            dock: 1
        },
        HP: 450,
        SP: 450,
        cost:{
            mine:150,
            gas:100,
            time:600
        },
        items: {
            '1':{name:'DevelopLegEnhancements'}
        },
        injuryOffsets:[{x:-20,y:-30},{x:28,y:-40},{x:25,y:-8}]
    }
});
Building.ProtossBuilding.RoboticsSupportBay=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "RoboticsSupportBay",
        imgPos: {
            dock: {
                left: 6,
                top: 168
            }
        },
        width: 100,
        height: 88,
        frame: {
            dock: 1
        },
        HP: 450,
        SP: 450,
        cost:{
            mine:150,
            gas:100,
            time:300
        },
        items: {
            '1':{name:'UpgradeScarabDamage'},
            '2':{name:'IncreaseReaverCapacity'},
            '3':{name:'DevelopGraviticDrive'}
        },
        injuryOffsets:[{x:-20,y:-5},{x:5,y:10},{x:25,y:-5}],
        injuryScale:0.8
    }
});
Building.ProtossBuilding.FleetBeacon=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "FleetBeacon",
        imgPos: {
            dock: {
                left: 440,
                top: 26
            }
        },
        width: 136,
        height: 100,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:300,
            gas:200,
            time: 600
        },
        items: {
            '1':{name:'DevelopApialSensors'},
            '2':{name:'DevelopGraviticThrusters'},
            '3':{name:'IncreaseCarrierCapacity'},
            '4':{name:'DevelopDistruptionWeb'},
            '5':{name:'DevelopArgusJewel'}
        },
        injuryOffsets:[{x:0,y:-55},{x:38,y:-42},{x:-26,y:-4}]
    }
});
Building.ProtossBuilding.TemplarArchives=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "TemplarArchives",
        imgPos: {
            dock: {
                left: 180,
                top: 24
            }
        },
        width: 114,
        height: 104,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:150,
            gas:200,
            time:600
        },
        items: {
            '1':{name:'DevelopPsionicStorm'},
            '2':{name:'DevelopHallucination'},
            '3':{name:'DevelopKhaydarinAmulet'},
            '4':{name:'DevelopMindControl'},
            '5':{name:'DevelopMaelStorm'},
            '6':{name:'DevelopArgusTalisman'}
        },
        injuryOffsets:[{x:-18,y:-28},{x:42,y:18},{x:14,y:10}]
    }
});
Building.ProtossBuilding.Observatory=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Observatory",
        imgPos: {
            dock: {
                left: 0,
                top: 302
            }
        },
        width: 96,
        height: 82,
        frame: {
            dock: 1
        },
        HP: 250,
        SP: 250,
        cost:{
            mine:50,
            gas:100,
            time:300
        },
        items: {
            '1':{name:'DevelopGraviticBooster'},
            '2':{name:'DevelopSensorArray'}
        },
        injuryOffsets:[{x:32,y:-33},{x:-12,y:-26},{x:-16,y:10}]
    }
});
Building.ProtossBuilding.ArbiterTribunal=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "ArbiterTribunal",
        imgPos: {
            dock: {
                left: 408,
                top: 176
            }
        },
        width: 94,
        height: 80,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        cost:{
            mine:200,
            gas:150,
            time: 600
        },
        items: {
            '1':{name:'DevelopRecall'},
            '2':{name:'DevelopStasisField'},
            '3':{name:'DevelopKhaydarinCore'}
        },
        injuryOffsets:[{x:-20,y:0},{x:5,y:-20},{x:28,y:8}],
        injuryScale:0.8
    }
});
Building.ProtossBuilding.TeleportGate=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "TeleportGate",
        imgPos: {
            dock: {
                left: 602,
                top: 132
            }
        },
        width: 126,
        height: 148,
        frame: {
            dock: 1
        },
        HP: 500,
        SP: 500,
        injuryOffsets:[{x:-14,y:30},{x:5,y:-16},{x:30,y:30}]
    }
});
Building.ProtossBuilding.Pyramid=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Pyramid",
        imgPos: {
            dock: {
                left: 620,
                top: 284
            }
        },
        width: 128,
        height: 120,
        frame: {
            dock: 1
        },
        HP: 1500,
        SP: 1500,
        injuryOffsets:[{x:-20,y:15},{x:5,y:-5},{x:28,y:23}]
    }
});
Building.ProtossBuilding.TeleportPoint=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "TeleportPoint",
        imgPos: {
            dock: {
                left: 516,
                top: 320
            }
        },
        width: 100,
        height: 64,
        frame: {
            dock: 1
        },
        HP: 100,
        SP: 100,
        injuryOffsets:[{x:-20,y:-10},{x:5,y:-30},{x:28,y:-2}],
        injuryScale:0.8
    }
});
//Evolve related
Building.ZergBuilding.Egg=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        this.sound={
            selected:new Audio(Game.CDN+'bgm/Egg.selected.wav'),
            death:new Audio(Game.CDN+'bgm/Egg.death.wav')
        };
        //Hidden frames
        this.action=13;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Egg",
        source: "Larva",
        portrait: "Egg",
        noMud:true,
        imgPos: {
            dock: {
                left: [2,38,74,110,146,182,218,254,290,326,362,398,-1,2,38,74,110,-1,291,329,367,405,442,480],
                top: [213,213,213,213,213,213,213,213,213,213,213,213,-1,173,173,173,173,-1,372,372,372,372,372,372]
            }
        },
        width: 36,
        height: 40,
        frame: {
            dock: 12
        },
        HP: 200,
        armor: 10,
        sight: 35,
        dieEffect: Burst.EggDeath
    }
});
Building.ZergBuilding.Cocoon=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        this.sound={
            selected:new Audio(Game.CDN+'bgm/Cocoon.selected.wav'),
            death:new Audio(Game.CDN+'bgm/Mutalisk.death.wav')
        };
        //Override default flyingFlag for building
        this.isFlying=true;
        //Hidden frames
        this.action=10;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Cocoon",
        source: "Larva",
        portrait: "Cocoon",
        noMud:true,
        imgPos: {
            dock: {
                left: [0,63,126,189,252,315,378,441,504,-1,0,63,126,189,252,315],
                top: [1105,1105,1105,1105,1105,1105,1105,1105,1105,-1,1060,1060,1060,1060,1060,1060]
            }
        },
        width: 62,
        height: 45,
        frame: {
            dock: 9
        },
        HP: 200,
        armor: 10,
        sight: 35,
        dieEffect: Burst.SmallZergFlyingDeath
    }
});
Building.ZergBuilding.MutationS=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Hidden frames
        this.action=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Mutation",
        imgPos: {
            dock: {
                left: [356, 516, 676, 836, 996, 1156, -1, 36, 36, 196, 196],
                top: [962, 962, 962, 962, 962, 962, -1, 962, 962, 962, 962]
            }
        },
        width: 88,//160N+36
        height: 84,
        frame: {
            dock: 6
        },
        HP: 200,
        armor: 0,
        sight: 350,
        evolveEffect: ['SmallMutationComplete']
    }
});
Building.ZergBuilding.MutationM=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Mutation",
        imgPos: {
            dock: {
                left: [20, 180, 340, 500, 660, 820],
                top: [1048,1048,1048,1048,1048,1048]
            }
        },
        width: 120,//160N+20
        height: 112,
        frame: {
            dock: 6
        },
        HP: 400,
        armor: 0,
        sight: 350,
        evolveEffect: ['MiddleMutationComplete']
    }
});
Building.ZergBuilding.MutationL=Building.ZergBuilding.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Mutation",
        imgPos: {
            dock: {
                left: [0, 160, 320, 480, 640, 800],
                top: [1160,1160,1160,1160,1160,1160]
            }
        },
        width: 160,//160N
        height: 150,
        frame: {
            dock: 6
        },
        HP: 600,
        armor: 0,
        sight: 350,
        evolveEffect: ['LargeMutationComplete']
    }
});
Building.TerranBuilding.ConstructionS=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        this.imgPos.dock=this.imgPos.step1;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Construction",
        imgPos: {
            step1: {
                left: 798,
                top: 296
            },
            step2: {
                left: 894,
                top: 296
            },
            step3: {
                left: 990,
                top: 296
            }
        },
        width: 72,
        height: 70,
        frame: {
            step1: 1,
            step2: 1,
            step3: 1,
            dock: 1
        },
        HP: 400,
        armor: 0,
        sight: 350
    }
});
Building.TerranBuilding.ConstructionM=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        this.imgPos.dock=this.imgPos.step1;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Construction",
        imgPos: {
            step1: {
                left: 498,
                top: 296
            },
            step2: {
                left: 594,
                top: 296
            },
            step3: {
                left: 690,
                top: 296
            }
        },
        width: 96,
        height: 70,
        frame: {
            step1: 1,
            step2: 1,
            step3: 1,
            dock: 1
        },
        HP: 400,
        armor: 0,
        sight: 350
    }
});
Building.TerranBuilding.ConstructionL=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        this.imgPos.dock=this.imgPos.step1;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Construction",
        imgPos: {
            step1: {
                left: 276,
                top: 442
            },
            step2: {
                left: 404,
                top: 442
            },
            step3: {
                left: 540,
                top: 442
            }
        },
        width: 124,
        height: 86,
        frame: {
            step1: 1,
            step2: 1,
            step3: 1,
            dock: 1
        },
        HP: 400,
        armor: 0,
        sight: 350
    }
});
Building.TerranBuilding.ConstructionR=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        this.imgPos.dock=this.imgPos.step1;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Construction",
        imgPos: {
            step1: {
                left: 848,
                top: 366
            },
            step2: {
                left: 956,
                top: 366
            }
        },
        width: 108,
        height: 70,
        frame: {
            step1: 1,
            step2: 1,
            dock: 1
        },
        HP: 400,
        armor: 0,
        sight: 350
    }
});
Building.TerranBuilding.ConstructionF=Building.TerranBuilding.extends({
    constructorPlus:function(props){
        this.type=props.type;
        //Override imgPos
        this.imgPos=_$.clone(this.imgPos);
        this.imgPos.dock=this.imgPos[this.type];
        this.width=Building.TerranBuilding[this.type].prototype.width;
        this.height=Building.TerranBuilding[this.type].prototype.height;
        //Continue adjusting position after initialize
        if (props.target instanceof Gobj){
            this.x-=(this.width/2);
            this.y-=(this.height/2);
        }
    },
    prototypePlus: {
        //Add basic unit info
        name: "ConstructionSkeleton",
        imgPos: {
            CommandCenter: {
                left: 674,
                top: 440
            },
            SupplyDepot: {
                left: 1034,
                top: 118
            },
            Refinery: {
                left: 950,
                top: 434
            },
            Barracks: {
                left: 812,
                top: 432
            },
            EngineeringBay: {
                left: 772,
                top: 542
            },
            MissileTurret: {
                left: 877,
                top: 118
            },
            Academy: {
                left: 1042,
                top: 536
            },
            Bunker: {
                left: 930,
                top: 123
            },
            Factory: {
                left: 917,
                top: 530
            },
            Starport: {
                left: 782,
                top: 635
            },
            ScienceFacility: {
                left: 907,
                top: 641
            },
            Armory: {
                left: 1027,
                top: 634
            },
            ComstatStation: {
                left: 426,
                top: 122
            },
            NuclearSilo: {
                left: 576,
                top: 120
            },
            MachineShop: {
                left: 724,
                top: 114
            },
            ControlTower: {
                left: 648,
                top: 118
            },
            PhysicsLab: {
                left: 504,
                top: 116
            },
            ConvertOps: {
                left: 797,
                top: 122
            }
        },
        width: 0,
        height: 0,
        frame: {
            dock: 1
        },
        HP: 400,
        armor: 0,
        sight: 350
    }
});
Building.ProtossBuilding.ArchonEvolve=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Hidden frames
        this.action=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Archon",
        source: "Archon",
        portrait: "Archon",
        imgPos: {
            dock: {
                left: [1340,1460,1580,1700,1820,1940,-1,1100,1220],
                top: [1700,1700,1700,1700,1700,1700,-1,1700,1700]
            }
        },
        width: 80,
        height: 80,
        frame: {
            dock: 6
        },
        HP: 10,
        SP: 350,
        armor: 0,
        plasma:0,
        sight: 280,
        dieEffect: Burst.BigBlueExplode
    }
});
Building.ProtossBuilding.DarkArchonEvolve=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Hidden frames
        this.action=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "DarkArchon",
        source: "DarkArchon",
        portrait: "DarkArchon",
        imgPos: {
            dock: {
                left: [1340,1460,1580,1700,1820,1940,-1,1100,1220],
                top: [1220,1220,1220,1220,1220,1220,-1,1220,1220]
            }
        },
        width: 80,
        height: 80,
        frame: {
            dock: 6
        },
        HP: 25,
        SP: 200,
        armor: 1,
        plasma:0,
        sight: 350,
        dieEffect: Burst.BigBlueExplode
    }
});
Building.ProtossBuilding.WrapRift=Building.ProtossBuilding.extends({
    constructorPlus:function(props){
        //Hidden frames
        this.action=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "WrapRift",
        imgPos: {
            dock: {
                left: [10,74,150,234,328,418,-1,10,74,150,234,328,418],
                top: [722,722,722,722,722,722,-1,658,658,658,658,658,658]
            }
        },
        width: 64,
        height: 64,
        frame: {
            dock: 6
        },
        HP: 200,
        SP: 200,
        armor: 0,
        plasma:0,
        sight: 350
    }
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var Bullets=Gobj.extends({
    constructorPlus:function(props){
        this.owner=props.from;
        this.target=props.to;
        //Makes below initial steps before fire
        var ownerX=(this.owner instanceof Gobj)?(this.owner.posX()):(this.owner.x);
        var ownerY=(this.owner instanceof Gobj)?(this.owner.posY()):(this.owner.y);
        var targetX=(this.target instanceof Gobj)?(this.target.posX()):(this.target.x);
        var targetY=(this.target instanceof Gobj)?(this.target.posY()):(this.target.y);
        //Convert from center point to left-top
        this.x=ownerX-this.width/2;
        this.y=ownerY-this.height/2;
        if (this.forbidRotate) this.angle=0;
        else {
            //Below angle represents direction toward target
            this.angle=Math.atan((ownerY-targetY)/(targetX-ownerX));
            if (targetX<ownerX) this.angle+=Math.PI;
        }
        //Initial by fixed speed
        if (this.speedVal){
            //Calculate speed
            var K=this.speedVal/Math.pow((targetX-ownerX)*(targetX-ownerX)+(targetY-ownerY)*(targetY-ownerY),0.5);
            this.speed={
                x:K*(targetX-ownerX)>>0,
                y:K*(targetY-ownerY)>>0
            };
            //For Lurker thron
            if (this.duration==null) this.duration=(1/K>>0)*100;
        }
        //Initial by fixed duration: match frames and sound
        else {
            this.speed={
                x:(targetX-ownerX)/(this.duration/100+1),
                y:(targetY-ownerY)/(this.duration/100+1)
            };
        }
        //By default it's not shown
        this.status="dead";
        //Fixed damage if be set
        if (props.damage!=null) this.damage=props.damage;
        //Will show after constructed
        Bullets.allBullets.push(this);
    },
    prototypePlus:{
        //Override to use 8 directions speed
        updateLocation:function(){
            //No direction speed
            this.x+=this.speed.x;
            this.y+=this.speed.y;
        },
        burst:function(){
            var owner=this.owner;
            var target=this.target;
            //Bullet over, now burst turn to show
            this.die();
            //Filter out magic bullet with fixed destination
            if (!(target instanceof Gobj)) return;
            //Init targets if AOE
            var targets;
            if (owner.AOE) {
                //Get possible targets
                switch(owner.attackLimit){
                    case "flying":
                        targets=Unit.allUnits.filter(function(chara){
                            return chara.team!=owner.team && chara.isFlying;
                        });
                        break;
                    case "ground":
                        var enemyUnits=Unit.allUnits.filter(function(chara){
                            return chara.team!=owner.team && !(chara.isFlying);
                        });
                        var enemyBuildings=Building.allBuildings.filter(function(chara){
                            return chara.team!=owner.team;
                        });
                        targets=enemyUnits.concat(enemyBuildings);
                        break;
                    default:
                        targets=(Unit.allUnits.concat(Building.allBuildings)).filter(function(chara){
                            return chara.team!=owner.team;
                        });
                        break;
                }
                //Range filter
                switch (owner.AOE.type) {
                    case "LINE":
                        //Calculate inter-points between enemy
                        var N=Math.ceil(owner.distanceFrom(target)/(owner.AOE.radius));
                        targets=targets.filter(function(chara){
                            for (var n=1;n<=N;n++){
                                var X=owner.posX()+n*(target.posX()-owner.posX())/N;
                                var Y=owner.posY()+n*(target.posY()-owner.posY())/N;
                                if (chara.insideCircle({centerX:X>>0,centerY:Y>>0,radius:owner.AOE.radius})
                                    && !chara['isInvisible'+owner.team]) {
                                    return true;
                                }
                            }
                            return false;
                        });
                        break;
                    //Default type is CIRCLE
                    case "CIRCLE":
                    default:
                        targets=targets.filter(function(chara){
                            return chara.insideCircle(
                                {centerX:target.posX(),centerY:target.posY(),radius:owner.AOE.radius})
                                && !chara['isInvisible'+owner.team];
                        });
                }
            }
            if (this.burstEffect) {
                //Show burst effect on target
                if (owner.AOE && owner.AOE.hasEffect) {
                    var burstEffect=this.burstEffect;
                    targets.forEach(function(chara){
                        new burstEffect({target:chara,above:true,team:owner.team});
                    })
                }
                else {
                    new this.burstEffect({target:target,above:true,team:owner.team});
                }
            }
            //Real bullet
            if (!this.noDamage) {
                //Cause damage when burst appear
                if (owner.AOE) {
                    var myself=this;
                    targets.forEach(function(chara){
                        if (myself.damage!=null) chara.getDamageBy(myself.damage);
                        else chara.getDamageBy(owner);
                        chara.reactionWhenAttackedBy(owner);
                    })
                }
                else {
                    if (this.damage!=null) target.getDamageBy(this.damage);
                    else target.getDamageBy(owner);
                    target.reactionWhenAttackedBy(owner);
                }
            }
            //Fired flag
            this.used=true;
        },
        //Upgrade Gobj moving, replace run as fire
        fire:function(callback){
            //Start firing
            this.moving();
            //Layout bullet in front by add one frame
            this.updateLocation();
            this.detectOutOfBound();
            //Sound effect
            if (this.insideScreen() && this.owner.sound && this.owner.sound.attack) this.owner.sound.attack.play();
            //Will burst and stop moving after time limit arrive
            var myself=this;
            Game.commandTimeout(function(){
                myself.burst();
                //Something happens after bullet burst
                if (callback) callback();
            },this.duration);
        }
    }
});
//All bullets here for show
Bullets.allBullets=[];
Bullets.Spooge=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Hydralisk",
        duration:400,
        imgPos:{
            moving:{
                left:[14, 72, 136, 204],
                top:[758,758,758,758]
            }
        },
        width:56,
        height:28,
        frame:{
            moving:4
        },
        burstEffect:Burst.HydraSpark
    }
});
Bullets.Thorn=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Lurker",
        speedVal:25,
        duration:600,
        imgPos:{
            moving:{
                left:[61,88,117,144,117,88],
                top:[711,711,711,711,711,711]
            }
        },
        width:28,
        height:35,
        frame:{
            moving:6
        },
        forbidRotate:true
    }
});
Bullets.Darts=Bullets.extends({
    constructorPlus:function(props){
        this.life=this.traceTimes;
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:400,
        imgPos:{
            moving:{
                left:[0, 36, 72, 108, 144, 180, 216, 252, 288, 324],
                top:[1051,1051,1051,1051,1051,1051,1051,1051,1051,1051]
            }
        },
        width:36,
        height:36,
        frame:{
            moving:10
        },
        burstEffect:Burst.GreenFog,
        //Chain tracing attack
        traceTimes:3,
        traceRadius:100,
        //Override
        noDamage:true,
        die:function(){
            var target=this.target;
            var owner=this.owner;
            //Interrupt tracing if target is dead first
            if (target.status=="dead") {
                //Former behavior before override
                this.inherited.die.call(this);
            }
            //Override damage, damage reduce
            target.getDamageBy(owner,this.life/this.traceTimes);
            target.reactionWhenAttackedBy(owner);
            //Bullet reduce
            this.life--;
            var myself=this;
            var traceEnemies;
            //Get all possible enemies
            switch(owner.attackLimit){
                case "flying":
                    traceEnemies=Unit.allUnits.filter(function(chara){
                        return chara.team!=owner.team && chara.isFlying;
                    });
                    break;
                case "ground":
                    traceEnemies=Unit.allUnits.filter(function(chara){
                        return chara.team!=owner.team && !(chara.isFlying);
                    });
                    break;
                default:
                    traceEnemies=Unit.allUnits.filter(function(chara){
                        return chara.team!=owner.team;
                    });
                    break;
            }
            //Filter out trace-able enemies
            traceEnemies=traceEnemies.filter(function(chara) {
                return (chara!=myself.target) &&
                    chara.insideCircle({centerX:myself.posX(),centerY:myself.posY(),radius:myself.traceRadius});
            });
            //Attack trace enemy
            if (traceEnemies.length>0 && this.life>0){
                //Initial position again before jumping
                this.x=target.posX()-this.width/2;
                this.y=target.posY()-this.height/2;
                this.target=traceEnemies[0];
                var targetX=this.target.posX();
                var targetY=this.target.posY();
                var myX=this.posX();
                var myY=this.posY();
                //Update bullet speed
                this.speed={
                    x:(targetX-myX)/(this.duration/100),
                    y:(targetY-myY)/(this.duration/100)
                };
                //Update bullet angle
                if (this.forbidRotate) this.angle=0;
                else {
                    //Below angle represents direction toward target
                    this.angle=Math.atan((myY-targetY)/(targetX-myX));
                    if (targetX<myX) this.angle+=Math.PI;
                }
                //Fire bullet
                Game.commandTimeout(function(){
                    myself.burst();
                },this.duration);
            }
            else {
                //Former behavior before override
                this.inherited.die.call(this);
            }
        }
    }
});
Bullets.Parasite=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:152,
                top:0
            }
        },
        width:10,
        height:34,
        frame:{
            moving:1
        },
        burstEffect:Burst.Parasite
    }
});
Bullets.GreenBall=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Guardian",
        speedVal:35,
        imgPos:{
            moving:{
                left:32,
                top:520
            }
        },
        width:20,
        height:20,
        frame:{
            moving:1
        },
        forbidRotate:true,
        burstEffect:Burst.GreenBallBroken
    }
});
Bullets.PurpleCloud=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Devourer",
        speedVal:20,
        imgPos:{
            moving:{
                left:8,
                top:973
            }
        },
        width:70,
        height:32,
        frame:{
            moving:1
        },
        burstEffect:Burst.PurpleCloudSpread
    }
});
Bullets.Spore=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:40,
        imgPos:{
            moving:{
                left:522,
                top:6
            }
        },
        width:20,
        height:20,
        frame:{
            moving:1
        },
        burstEffect:Burst.Spore
    }
});
Bullets.Flame=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:300,
        imgPos:{
            moving:{
                left:[15,15,80,80,170,170],
                top:[86,86,86,86,86,86]
            }
        },
        width:76,
        height:40,
        frame:{
            moving:6
        }
    }
});
Bullets.VultureBall=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:152,
                top:0
            }
        },
        width:10,
        height:34,
        frame:{
            moving:1
        },
        burstEffect:Burst.VultureSpark
    }
});
Bullets.Missile=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Wraith",
        speedVal:25,
        imgPos:{
            moving:{
                left:8,
                top:132
            }
        },
        width:16,
        height:32,
        frame:{
            moving:1
        },
        burstEffect:Burst.FireSparkSound
    }
});
Bullets.LongMissile=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:35,
        imgPos:{
            moving:{
                left:0,
                top:0
            }
        },
        width:35,
        height:30,
        frame:{
            moving:1
        },
        burstEffect:Burst.FireSparkSound
    }
});
Bullets.SingleMissile=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:35,
        imgPos:{
            moving:{
                left:0,
                top:0
            }
        },
        width:35,
        height:15,
        frame:{
            moving:1
        },
        burstEffect:Burst.FireSparkSound
    }
});
Bullets.MultipleMissile=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:304,
                top:56
            }
        },
        width:94,
        height:50,
        frame:{
            moving:1
        },
        burstEffect:Burst.FireSparkSound
    }
});
Bullets.Laser=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"BattleCruiser",
        speedVal:50,
        imgPos:{
            moving:{
                left:16,
                top:248
            }
        },
        width:68,
        height:12,
        frame:{
            moving:1
        },
        burstEffect:Burst.LaserSpark
    }
});
Bullets.SmallLaser=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"BattleCruiser",
        speedVal:40,
        imgPos:{
            moving:{
                left:20,
                top:248
            }
        },
        width:22,
        height:12,
        frame:{
            moving:1
        },
        burstEffect:Burst.LaserSpark
    }
});
/*Bullets.HeatLaser=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"HeroCruiser",
        duration:300,
        imgPos:{
            moving:{
                left:16,
                top:170
            }
        },
        width:68,
        height:12,
        frame:{
            moving:1
        },
        burstEffect:Burst.SmallExplode
    }
});*/
Bullets.Yamato=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:400,
        imgPos:{
            moving:{
                left:[288, 192, 96, 0],
                top:[1195,1195,1195,1195]
            }
        },
        width:96,
        height:96,
        frame:{
            moving:4
        },
        burstEffect:Burst.MiddleExplode
    }
});
Bullets.NuclearBomb=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:1000,
        imgPos:{
            moving:{
                left:428,
                top:66
            }
        },
        width:74,
        height:32,
        frame:{
            moving:1
        }
    }
});
Bullets.DragoonBall=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:30,
        imgPos:{
            moving:{
                left:[5, 36, 70, 101, 133],
                top:[862,862,862,862,862]
            }
        },
        width:23,
        height:21,
        frame:{
            moving:5
        },
        forbidRotate:true,
        burstEffect:Burst.DragoonBallBroken
    }
});
Bullets.ArchonLightening=Bullets.extends({
    constructorPlus:function(props){
        //Override position to hands
        this.x+=this.speed.x*6;//N/8==40/70 (ArchonRadius/AttackRange)
        this.y+=this.speed.y*6;
        //Override speed, will not move
        this.speed={x:0,y:0};
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:800,
        imgPos:{
            moving:{
                left:[4, 192, 388, 580],
                top:[704,704,704,704]
            }
        },
        width:90,
        height:75,
        frame:{
            moving:4
        }
    }
});
Bullets.ScoutMissile=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:53,//53//580
                top:0
            }
        },
        width:30,//30//55
        height:34,//34//45
        frame:{
            moving:1
        },
        burstEffect:Burst.DragoonBallBroken
    }
});
Bullets.ReaverBomb=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:350,//186
                top:0
            }
        },
        width:70,//62
        height:34,
        frame:{
            moving:1
        },
        burstEffect:Burst.ReaverBurst,
        //Override
        fire:function(){
            Bullets.prototype.fire.call(this);
            //Consume scarab
            if (this.owner.scarabNum>0) {
                this.owner.scarabNum--;
                Button.refreshButtons();
            }
        }
    }
});
Bullets.ReaverBombII=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        speedVal:25,
        imgPos:{
            moving:{
                left:300,
                top:0
            }
        },
        width:40,
        height:30,
        frame:{
            moving:1
        },
        forbidRotate:true,
        burstEffect:Burst.ReaverBurst
    }
});
Bullets.Interceptor=Bullets.extends({
    constructorPlus:function(props){},
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        duration:1000,
        imgPos:{
            moving:{
                left:[120,170,220,272,272,120,120,120,120,120],
                top:[582,582,582,582,582,582,582,582,582,582]
            }
        },
        width:44,
        height:28,
        frame:{
            moving:10
        },
        //Override cause damage timing
        noDamage:true,
        fire:function(){
            this.inherited.fire.call(this);
            var target=this.target;
            var owner=this.owner;
            Game.commandTimeout(function(){
                target.getDamageBy(owner);
                target.reactionWhenAttackedBy(owner);
            },500);
        }
    }
});
Bullets.DevilBall=Bullets.extends({
    constructorPlus:function(props){
        this.life=this.traceTimes;
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",
        duration:300,
        imgPos:{
            moving:{
                left:352,
                top:442
            }
        },
        width:20,
        height:20,
        frame:{
            moving:1
        },
        burstEffect:Burst.PurpleFog,
        //Delay fire for Dragoon and PhotonCannon
        fire:Bullets.DragoonBall.prototype.fire,
        //Chain tracing attack
        traceTimes:4,
        traceRadius:200,
        //Override
        noDamage:true,
        //Chain attack type
        die:Bullets.Darts.prototype.die
    }
});
//Mapping for apply, need to move it into Units.js
Zerg.Drone.prototype.Bullet=Bullets.Spooge;
Zerg.Hydralisk.prototype.Bullet=Bullets.Spooge;
Zerg.Lurker.prototype.Bullet=Bullets.Thorn;
Zerg.Mutalisk.prototype.Bullet=Bullets.Darts;
Zerg.Guardian.prototype.Bullet=Bullets.GreenBall;
Zerg.Devourer.prototype.Bullet=Bullets.PurpleCloud;

Terran.Wraith.prototype.attackMode.flying.Bullet=Bullets.Missile;
Terran.Wraith.prototype.attackMode.ground.Bullet=Bullets.SmallLaser;
Terran.BattleCruiser.prototype.Bullet=Bullets.Laser;
Terran.Firebat.prototype.Bullet=Bullets.Flame;
Terran.Vulture.prototype.Bullet=Bullets.VultureBall;
Terran.Goliath.prototype.attackMode.flying.Bullet=Bullets.LongMissile;
Terran.Valkyrie.prototype.Bullet=Bullets.MultipleMissile;

Protoss.Dragoon.prototype.Bullet=Bullets.DragoonBall;
Protoss.Archon.prototype.Bullet=Bullets.ArchonLightening;
Protoss.Reaver.prototype.Bullet=Bullets.ReaverBomb;
Protoss.Scout.prototype.attackMode.flying.Bullet=Bullets.ScoutMissile;
Protoss.Arbiter.prototype.Bullet=Bullets.DragoonBall;
Protoss.Carrier.prototype.Bullet=Bullets.Interceptor;

Hero.HeroCruiser.prototype.Bullet=Bullets.Yamato;
Hero.DevilHunter.prototype.Bullet=Bullets.DevilBall;

Building.ZergBuilding.SporeColony.prototype.Bullet=Bullets.Spore;
Building.TerranBuilding.MissileTurret.prototype.Bullet=Bullets.SingleMissile;
Building.ProtossBuilding.PhotonCannon.prototype.Bullet=Bullets.DragoonBall;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

//One animation period which only play for a while and die
var Burst=Gobj.extends({
    constructorPlus:function(props){
        //Override if has props.scale
        if (props.scale) this.scale=props.scale;
        //Resize drawing by scale
        var times=this.scale?(this.scale):1;
        //Behavior like effect on target
        if (props.target) {
            this.target=props.target;
            //Ahead of owner
            if (props.above) this.above=true;
            //Animation duration
            //Match owner size
            if (props.autoSize) this.autoSize=true;
            if (this.autoSize!=null) {
                //Can mix autoSize with scale
                switch(this.autoSize){
                    case 'MAX':
                        this.scale=Math.max(this.target.width,this.target.height)*2*times/(this.width+this.height);
                        break;
                    case 'MIN':
                        this.scale=Math.min(this.target.width,this.target.height)*2*times/(this.width+this.height);
                        break;
                    default:
                        this.scale=(this.target.width+this.target.height)*times/(this.width+this.height);
                }
                times=this.scale;
            }
            //Location
            this.x=(this.target.posX()-this.width*times/2)>>0;
            this.y=(this.target.posY()-this.height*times/2)>>0;
            //Onfire or bleed will have offset
            if (props.offset){
                this.x+=props.offset.x;
                this.y+=props.offset.y;
            }
        }
        //Independent burst
        else {
            //Target location, from centerP to top-left
            this.x=props.x-this.width*times/2;
            this.y=props.y-this.height*times/2;
        }
        //Play duration
        if (this.forever) this.duration=-1;//Keep playing until killed
        if (props.duration!=null) this.duration=props.duration;//Override duration
        //Restore callback after burst finish
        if (props.callback) this.callback=props.callback;
        //By default it will burst
        this.burst();
        //Will show after constructed
        Burst.allEffects.push(this);
    },
    prototypePlus:{
        //Override Gobj method
        animeFrame:function(){
            //Animation play
            this.action++;
            //Override Gobj here, can have hidden frames
            var arrLimit=(this.imgPos[this.status].left instanceof Array)?(this.imgPos[this.status].left.length):1;
            if (this.action==this.frame[this.status] || this.action==arrLimit) {
                this.action=0;
            }
            //Update location here
            if (this.above && this.target) {
                //Update location: copied from constructor
                var times=this.scale?(this.scale):1;
                this.x=(this.target.posX()-this.width*times/2)>>0;
                this.y=(this.target.posY()-this.height*times/2)>>0;
            }
        },
        burst:function(){
            this.status="burst";
            //Start play burst animation
            var myself=this;
            var animateFrame=function(){
                //Only play animation, will not move
                myself.animeFrame();
            };
            this.allFrames['animate']=animateFrame;
            //Will die(stop playing) after time limit arrive
            var duration=this.duration?this.duration:(this.frame['burst']*100);
            //Last forever if duration<0 (-1)
            if (duration>0){
                Game.commandTimeout(function(){
                    myself.die();
                },duration);
            }
        },
        die:function(){
            //Run callback when burst die
            if (this.callback) this.callback();
            Gobj.prototype.die.call(this);
        }
    }
});
//All burst effects here for show
Burst.allEffects=[];
//Define different bursts
Burst.GreenFog=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/GreenFog.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",//Source img inside Mutalisk.png
        imgPos:{
            burst:{
                left:[8,68,134,198,263,8,68,134,198,263],
                top:[468,468,468,468,468,532,532,532,532,532]
            }
        },
        width:52,
        height:57,
        frame:{
            burst:10
        }
    }
});
Burst.Parasite=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Parasite.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",
        imgPos:{
            burst:{
                left:[8,68,134,198,263,8,68,134,198,263],
                top:[468,468,468,468,468,532,532,532,532,532]
            }
        },
        width:52,
        height:57,
        frame:{
            burst:10
        }
    }
});
Burst.Spore=Burst.extends({
    constructorPlus:function(props){
        //No sound
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",
        imgPos:{
            burst:{
                left:[8,68,134,198,263,8,68,134,198,263],
                top:[468,468,468,468,468,532,532,532,532,532]
            }
        },
        width:52,
        height:57,
        frame:{
            burst:10
        }
    }
});
Burst.GreenBallBroken=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/Greenball.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Guardian",
        imgPos:{
            burst:{
                left:[0,56,119,182,252,322,396,470],
                top:[556,556,556,556,556,556,556,556]
            }
        },
        width:60,
        height:60,
        frame:{
            burst:8
        }
    }
});
Burst.PurpleCloudSpread=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/PurpleCloud.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Devourer",
        imgPos:{
            burst:{
                left:[17,70,122,174,230,280,335,390,452],
                top:[1022,1022,1022,1022,1022,1022,1022,1022,1022]
            }
        },
        width:50,
        height:60,
        callback:function(){
            var chara=this.target;
            //Fix all spored issue
            if (chara.status=='dead' || chara.status==null) return;
            //Effect:PurpleBuffer when cloud spread on target chara
            //Buffer flag, can add up
            if (chara.buffer.PurpleCloud==9) return;//9 at max
            if (chara.buffer.PurpleCloud>0) chara.buffer.PurpleCloud++;
            else chara.buffer.PurpleCloud=1;
            //Decrease defense and slow down attack rate
            var bufferObj={
                armor:chara.get('armor')-1
            };
            if (chara.plasma!=null) bufferObj.plasma=chara.get('plasma')-1;
            if (chara.attackInterval) bufferObj.attackInterval=Math.round(chara.get('attackInterval')*1.1);
            //Apply buffer
            chara.addBuffer(bufferObj);
            if (!chara.purpleBuffer) chara.purpleBuffer=[];
            chara.purpleBuffer.push(bufferObj);
            //Purple effect
            new Animation.PurpleEffect({team:this.team,target:chara,callback:function(){
                //Restore in 30 seconds, Last In First Out
                if (chara.purpleBuffer && chara.removeBuffer(chara.purpleBuffer.pop())) {
                    chara.buffer.PurpleCloud--;
                }
                //Full restore
                if (chara.buffer.PurpleCloud==0) {
                    delete chara.buffer.PurpleCloud;
                    delete chara.purpleBuffer;
                }
            }});
        },
        frame:{
            burst:9
        }
    }
});
Burst.Sunken=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/Sunken.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[46,174,302,432,560,688],
                top:[626,626,626,626,626,626]
            }
        },
        width:28,
        height:40,
        frame:{
            burst:6
        }
    }
});
Burst.SmallFireSpark=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/FireSpark.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Wraith",
        imgPos:{
            burst:{
                left:[64,106,64],
                top:[132,132,132]
            }
        },
        width:32,
        height:30,
        frame:{
            burst:3
        }
    }
});
Burst.FireSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Ghost",
        imgPos:{
            burst:{
                left:[0, 38, 76, 114, 152, 190, 228, 266, 304, 342],
                top:[596,596,596,596,596,596,596,596,596,596]
            }
        },
        width:38,
        height:36,
        frame:{
            burst:10
        }
    }
});
Burst.FireSparkSound=Burst.FireSpark.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/FireSpark.burst.wav').play();
    },
    prototypePlus:{
        //Nothing
    }
});
Burst.LaserSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[18,70,128,182],
                top:[50,50,50,50]
            }
        },
        width:30,
        height:30,
        frame:{
            burst:4
        }
    }
});
Burst.VultureSpark=Burst.LaserSpark.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/VultureSpark.burst.wav').play();
    },
    prototypePlus: {
        //Nothing
    }
});
Burst.HydraSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Hydralisk",
        imgPos:{
            burst:{
                left:[0, 34, 68, 102, 136, 170, 204, 238],
                top:[801,801,801,801,801,801,801,801]
            }
        },
        width:34,
        height:35,
        frame:{
            burst:8
        }
    }
});
Burst.CorsairCloud=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[5,57],//[1, 64, 128]
                top:[576,576]
            }
        },
        width:40,//62
        height:44,//44
        frame:{
            burst:2
        }
    }
});
Burst.ArchonBurst=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 80, 160, 240, 320, 400],
                top:[779,779,779,779,779,779]
            }
        },
        width:80,
        height:80,
        frame:{
            burst:6
        }
    }
});
Burst.DragoonBallBroken=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/DragoonBall.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480, 520],
                top:[891,891,891,891,891,891,891,891,891,891,891,891,891,891]
            }
        },
        width:38,
        height:40,
        frame:{
            burst:14
        }
    }
});
Burst.ShootSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 40, 80, 120, 160, 200, 240, 280, 320, 360],
                top:[1011,1011,1011,1011,1011,1011,1011,1011,1011,1011]
            }
        },
        width:40,
        height:40,
        frame:{
            burst:10
        }
    }
});
Burst.BlueShootSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[32, 64, 96, 128, 160, 192, 224, 256],
                top:[1115,1115,1115,1115,1115,1115,1115,1115]
            }
        },
        width:32,
        height:32,
        frame:{
            burst:8
        }
    }
});
Burst.SCVSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 48, 96, 144, 192, 240, 288, 336, 384, 432],
                top:[1147,1147,1147,1147,1147,1147,1147,1147,1147,1147]
            }
        },
        width:48,
        height:48,
        frame:{
            burst:10
        }
    }
});
Burst.ProbeSpark=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 48, 96, 144, 192, 240, 288],
                top:[672,672,672,672,672,672,672]
            }
        },
        width:48,
        height:32,
        frame:{
            burst:7
        }
    }
});
Burst.ReaverBurst=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/ReaverBomb.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Burst",
        imgPos:{
            burst:{
                left:[0, 80, 160, 240, 320, 400, 480, 560, 640, 720],
                top:[931,931,931,931,931,931,931,931,931,931]
            }
        },
        width:78,
        height:64,
        frame:{
            burst:10
        }
    }
});
Burst.PurpleFog=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/ReaverBomb.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",
        imgPos:{
            burst:{
                left:[338,398,464,528,593,338,398,464,528,593],
                top:[468,468,468,468,468,532,532,532,532,532]
            }
        },
        width:52,
        height:57,
        frame:{
            burst:10
        }
    }
});

Burst.InfestedBomb=Burst.extends({
    constructorPlus:function(props){
        //Has burst sound effect
        if (this.insideScreen()) new Audio(Game.CDN+'bgm/ReaverBomb.burst.wav').play();
    },
    prototypePlus:{
        //Add basic unit info
        name:"InfestedTerran",
        imgPos:{
            burst:{
                left:[0, 78, 156, 234, 312, 0, 78, 156, 234, 312],
                top:[432,432,432,432,432,496,496,496,496,496]
            }
        },
        width:78,
        height:64,
        frame:{
            burst:10
        }
    }
});
Burst.ScourgeBomb=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Scourge",
        imgPos:{
            burst:{
                left:[0, 52, 104, 156, 208, 260, 312, 364, 416],
                top:[218,218,218,218,218,218,218,218,218]
            }
        },
        width:52,
        height:46,
        frame:{
            burst:9
        }
    }
});

Burst.SmallExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[56,156,256,360],
                top:[1686,1686,1686,1686]
            }
        },
        width:80,
        height:60,
        frame:{
            burst:4
        }
    }
});
Burst.MiddleExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[44,192,342,498],
                top:[1754,1754,1754,1754]
            }
        },
        width:120,
        height:90,
        frame:{
            burst:4
        }
    }
});
Burst.BigExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[26,226,424,632],
                top:[1846,1846,1846,1846]
            }
        },
        width:160,
        height:120,
        frame:{
            burst:4
        }
    }
});
Burst.SmallBlueExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[50,150,250,356],
                top:[1424,1424,1424,1424]
            }
        },
        width:80,
        height:60,
        frame:{
            burst:4
        }
    }
});
Burst.MiddleBlueExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[36,184,338,494],
                top:[1484,1484,1484,1484]
            }
        },
        width:120,
        height:90,
        frame:{
            burst:4
        }
    }
});
Burst.BigBlueExplode=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[22,222,420,632],
                top:[1566,1566,1566,1566]
            }
        },
        width:160,
        height:120,
        frame:{
            burst:4
        }
    }
});
Burst.ZergBuildingBurst=Burst.extends({
    constructorPlus:function(props){
        //Need clear mud when ZergBuildingBurst finished
        this.callback=function(){
            Map.needRefresh="MAP";
        };
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[0,200,400,600,800,0,200,400,600,800,0,200,400,400,600,600,800,800],
                top:[0,0,0,0,0,200,200,200,200,200,400,400,400,400,400,400,400,400]
            }
        },
        width:200,
        height:200,
        frame:{
            burst:18
        }
    }
});
Burst.TerranBuildingBurst=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[0,0,200,200,400,400,600,600,800,800,0,0,200,200,400,400,600,600],
                top:[600,600,600,600,600,600,600,600,600,600,800,800,800,800,800,800,800,800]
            }
        },
        width:200,
        height:200,
        frame:{
            burst:18
        }
    }
});
Burst.ProtossBuildingBurst=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"BuildingBurst",
        imgPos:{
            burst:{
                left:[0,0,200,200,400,400,600,600,800,800,0,0,200,200,400,400,600,600],
                top:[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1200,1200,1200,1200,1200,1200,1200,1200]
            }
        },
        width:200,
        height:200,
        frame:{
            burst:18
        }
    }
});
Burst.HumanDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Civilian",
        imgPos:{
            burst:{
                left:[6,58,106,158,6,54,102,152],
                top:[286,286,286,286,320,320,320,320]
            }
        },
        width:42,
        height:30,
        frame:{
            burst:8
        }
    }
});
Burst.MedicDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Medic",
        imgPos:{
            burst:{
                left:[0, 64, 128, 192, 256, 320, 384, 448],
                top:[832,832,832,832,832,832,832,832]
            }
        },
        width:64,
        height:64,
        frame:{
            burst:8
        }
    }
});
Burst.SmallZergFlyingDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Mutalisk",
        imgPos:{
            burst:{
                left:[71,143,215,283,355,432,502],
                top:[372,372,372,372,372,372,372]
            }
        },
        width:64,
        height:62,
        frame:{
            burst:7
        }
    }
});
Burst.BigZergFlyingDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Devourer",
        imgPos:{
            burst:{
                left:[0, 114, 228, 342, 456, 570, 684, 798],
                top:[860,860,860,860,860,860,860,860]
            }
        },
        width:114,
        height:102,
        frame:{
            burst:8
        }
    }
});
Burst.DroneDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Drone",
        imgPos:{
            burst:{
                left:[0, 128, 256, 384, 512, 640, 768, 896],
                top:[1280,1280,1280,1280,1280,1280,1280,1280]
            }
        },
        width:128,
        height:128,
        frame:{
            burst:8
        }
    }
});
Burst.ZerglingDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Zergling",
        imgPos:{
            burst:{
                left:[0, 68, 136, 204, 272, 340, 408],
                top:[506,506,506,506,506,506,506]
            }
        },
        width:68,
        height:55,
        frame:{
            burst:7
        }
    }
});
Burst.HydraliskDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Hydralisk",
        imgPos:{
            burst:{
                left:[0, 66, 132, 198, 264, 330, 396, 462, 528, 594, 660, 726],
                top:[704,704,704,704,704,704,704,704,704,704,704,704]
            }
        },
        width:66,
        height:50,
        frame:{
            burst:12
        }
    }
});
Burst.LurkerDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Lurker",
        imgPos:{
            burst:{
                left:[85, 170, 255, 340, 0, 85, 170, 255, 340],
                top:[582,582,582,582,646,646,646,646,646]
            }
        },
        width:85,
        height:64,
        frame:{
            burst:9
        }
    }
});
Burst.UltraliskDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Ultralisk",
        imgPos:{
            burst:{
                left:[0, 101, 202, 303, 404, 505, 606, 707, 808, 909],
                top:[1620,1620,1620,1620,1620,1620,1620,1620,1620,1620]
            }
        },
        width:101,
        height:108,
        frame:{
            burst:10
        }
    }
});
Burst.DefilerDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Defiler",
        imgPos:{
            burst:{
                left:[0, 70, 140, 210, 280, 350, 420, 490, 560, 630],
                top:[558,558,558,558,558,558,558,558,558,558]
            }
        },
        width:70,
        height:46,
        frame:{
            burst:10
        }
    }
});
Burst.BroodlingDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Queen",
        imgPos:{
            burst:{
                left:[0, 40, 80, 120, 160],
                top:[782,782,782,782,782]
            }
        },
        width:40,
        height:22,
        frame:{
            burst:5
        }
    }
});
Burst.LarvaDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,50,100,150,200,250,300,350,400],
                top:[146,146,146,146,146,146,146,146,146]
            }
        },
        width:50,
        height:26,
        frame:{
            burst:9
        }
    }
});
Burst.EggDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,70,140,210,280,350,0,70,140,210,280,350],
                top:[254,254,254,254,254,254,312,312,312,312,312,312]
            }
        },
        width:70,
        height:59,
        frame:{
            burst:12
        }
    }
});
Burst.EggBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[2,38,74,110,146,182,218,254],
                top:[372,372,372,372,372,372,372,372]
            }
        },
        width:36,
        height:40,
        frame:{
            burst:8
        }
    }
});
Burst.DroneBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[1,68,135,202,269,336,403],
                top:[442,442,442,442,442,442,442]
            }
        },
        width:67,
        height:44,
        frame:{
            burst:7
        }
    }
});
Burst.OverlordBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,63,126,189,252,315,378],
                top:[486,486,486,486,486,486,486]
            }
        },
        width:63,
        height:95,
        frame:{
            burst:7
        }
    }
});
Burst.ZerglingBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,59,118,177,236,295,354],
                top:[582,582,582,582,582,582,582]
            }
        },
        width:59,
        height:45,
        frame:{
            burst:7
        }
    }
});
Burst.HydraliskBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,63,126,189,252,315,378],
                top:[666,666,666,666,666,666,666]
            }
        },
        width:63,
        height:45,
        frame:{
            burst:7
        }
    }
});
Burst.MutaliskBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,66,132,198,264,330,396],
                top:[712,712,712,712,712,712,712]
            }
        },
        width:66,
        height:88,
        frame:{
            burst:7
        }
    }
});
Burst.ScourgeBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,62,124,186,248,310,372],
                top:[798,798,798,798,798,798,798]
            }
        },
        width:62,
        height:70,
        frame:{
            burst:7
        }
    }
});
Burst.QueenBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,62,124,186,248,310,372],
                top:[867,867,867,867,867,867,867]
            }
        },
        width:62,
        height:84,
        frame:{
            burst:7
        }
    }
});
Burst.UltraliskBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,72,144,216,288,360,432],
                top:[950,950,950,950,950,950,950]
            }
        },
        width:72,
        height:60,
        frame:{
            burst:7
        }
    }
});
Burst.DefilerBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Larva",
        imgPos:{
            burst:{
                left:[0,64,128,192,256,320,384],
                top:[1011,1011,1011,1011,1011,1011,1011]
            }
        },
        width:64,
        height:48,
        frame:{
            burst:7
        }
    }
});
Burst.LurkerBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Lurker",
        imgPos:{
            burst:{
                left:[650, 722, 794, 866, 938, 1010, 1082],
                top:[480, 480, 480, 480, 480, 480, 480]
            }
        },
        width:72,
        height:67,
        frame:{
            burst:7
        }
    }
});
Burst.GuardianBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Guardian",
        imgPos:{
            burst:{
                left:[656, 737, 818, 899, 980, 1061],
                top:[538, 538, 538, 538, 538, 538]
            }
        },
        width:81,
        height:74,
        frame:{
            burst:6
        }
    }
});
Burst.DevourerBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Devourer",
        imgPos:{
            burst:{
                left:[666,764,862,960,1058,1156],
                top:[998,998,998,998,998,998]
            }
        },
        width:73,
        height:86,
        frame:{
            burst:6
        }
    }
});
Burst.SmallProtossDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Zealot",
        imgPos:{
            burst:{
                left:[0, 57, 114, 171, 228, 285, 342],
                top:[575,575,575,575,575,575,575]
            }
        },
        width:57,
        height:84,
        frame:{
            burst:7
        }
    }
});
Burst.DragoonDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Dragoon",
        imgPos:{
            burst:{
                left:[15, 111, 207, 303, 399, 495, 591],
                top:[591,591,591,591,591,591,591]
            }
        },
        width:57,
        height:84,
        frame:{
            burst:7
        }
    }
});
Burst.TemplarDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Templar",
        imgPos:{
            burst:{
                left:[30, 158, 286, 414, 542, 670],
                top:[2078,2078,2078,2078,2078,2078]
            }
        },
        width:57,
        height:84,
        frame:{
            burst:6
        }
    }
});
Burst.HallucinationDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Magic",
        imgPos:{
            burst:{
                left:[514, 593, 672, 514, 593, 672, 514, 593, 672, 514, 593, 672],
                top:[460,460,460,526,526,526,592,592,592,658,658,658]
            }
        },
        width:79,
        height:66,
        frame:{
            burst:12
        }
    }
});
Burst.ArchonBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"Archon",
        imgPos:{
            burst:{
                left:[20,140,260,380,500,620,740,860,980],
                top:[1700,1700,1700,1700,1700,1700,1700,1700,1700]
            }
        },
        width:80,
        height:80,
        frame:{
            burst:9
        }
    }
});
Burst.DarkArchonBirth=Burst.extends({
    constructorPlus:function(props){
        //Mixin
    },
    prototypePlus:{
        //Add basic unit info
        name:"DarkArchon",
        imgPos:{
            burst:{
                left:[20,140,260,380,500,620,740,860,980],
                top:[1220,1220,1220,1220,1220,1220,1220,1220,1220]
            }
        },
        width:80,
        height:80,
        frame:{
            burst:9
        }
    }
});

Burst.RagnasaurDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Ragnasaur",
        imgPos:{
            burst:{
                left:[0, 104, 208, 312, 416, 520, 624, 728],
                top:[936,936,936,936,936,936,936,936]
            }
        },
        width:128,
        height:128,
        frame:{
            burst:8
        }
    }
});
Burst.RhynsdonDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Rhynsdon",
        imgPos:{
            burst:{
                left:[0, 104, 208, 312, 416, 520, 624, 728],
                top:[1144,1144,1144,1144,1144,1144,1144,1144]
            }
        },
        width:104,
        height:128,
        frame:{
            burst:8
        }
    }
});
Burst.UrsadonDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Ursadon",
        imgPos:{
            burst:{
                left:[0, 92, 184, 276, 368, 460, 552, 644],
                top:[736,736,736,736,736,736,736,736]
            }
        },
        width:92,
        height:92,
        frame:{
            burst:8
        }
    }
});
Burst.BengalaasDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Bengalaas",
        imgPos:{
            burst:{
                left:[0, 128, 256, 384, 512, 640, 768, 896],
                top:[1536,1536,1536,1536,1536,1536,1536,1536]
            }
        },
        width:128,
        height:128,
        frame:{
            burst:8
        }
    }
});
Burst.ScantidDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Scantid",
        imgPos:{
            burst:{
                left:[0, 92, 184, 276, 368, 460, 552, 644],
                top:[1104,1104,1104,1104,1104,1104,1104,1104]
            }
        },
        width:92,
        height:92,
        frame:{
            burst:8
        }
    }
});
Burst.KakaruDeath=Burst.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus:{
        //Add basic unit info
        name:"Kakaru",
        imgPos:{
            burst:{
                left:[0, 92, 184, 276, 368, 460, 552, 644],
                top:[1104,1104,1104,1104,1104,1104,1104,1104]
            }
        },
        width:92,
        height:92,
        frame:{
            burst:8
        }
    }
});


/***/ }),
/* 6 */
/***/ (function(module, exports) {

var Button={
    callback:null,
    /***************Functions***************/
    reset:function(){
        Game.changeSelectedTo(Game.selectedUnit);
    },
    refreshButtons:function(){
        Button.equipButtonsFor(Game.selectedUnit);
    },
    //Equip all buttons for unit
    equipButtonsFor:function(chara){
        //Clear all buttons
        $('div.panel_Control button').removeAttr('class').removeAttr('disabled').removeAttr('style').off('click').off('mouseover').off('mouseout').html('').hide();
        //Filter out enemy
        if (chara=={} || (chara.isEnemy && chara.isEnemy())) return;
        //Add button press sound
        $('div.panel_Control button').on('click',function(){
            Referee.voice('button').play();
        });
        //Show buttons
        if (chara instanceof Unit){
            $('button[num="1"]').attr('class','move').show();
            $('button[num="2"]').attr('class','stop').show();
            $('button[num="4"]').attr('class','patrol').show();
            $('button[num="5"]').attr('class','hold').show();
            if (Game.selectedUnit.hold) $('button.hold').css('border-color','red');//Add for hold tag
            //Bind callbacks
            $('button.move').on('click',Button.moveHandler);
            $('button.patrol').on('click',Button.patrolHandler);
            $('button.stop').on('click',function(){
                Button.stopHandler();
            });
            $('button.hold').on('click',function(){
                Button.holdHandler();
            });
        }
        if (chara.attack){
            $('button[num="3"]').attr('class','attack').show();
            $('button.attack').on('click',Button.attackHandler);
        }
        //Add items
        if (chara.items){
            for (var N in chara.items){
                if (chara.items[N]!=null) {
                    $('button[num="'+N+'"]').off('click').attr('class',chara.items[N].name).show();
                    if (chara.items[N].condition && !(chara.items[N].condition()))
                        $('button[num="'+N+'"]').attr('disabled',true);
                    else $('button[num="'+N+'"]').removeAttr('disabled');
                    //Exceptions: need mark numbers on button
                    switch (chara.items[N].name){
                        case 'SpiderMines':
                            $('button[num="'+N+'"]')[0].innerHTML=chara.spiderMines;
                            break;
                        case 'Scarab':
                            $('button[num="'+N+'"]')[0].innerHTML=chara.scarabNum;
                            break;
                        case 'Interceptor':
                            $('button[num="'+N+'"]')[0].innerHTML=chara.continuousAttack.count;
                            break;
                    }
                }
                else {
                    $('button[num="'+N+'"]').removeAttr('class').hide();
                }
            }
            //Bind basic callbacks
            $('button.Cancel').on('click',function(){
                //Reset menu
                Button.refreshButtons();
            });
            $('button.SelectLarva').on('click',function(){
                var larvas=Game.selectedUnit.larvas;
                if (larvas){
                    larvas=larvas.filter(function(chara){
                        return chara.status!='dead';
                    });
                    //If found alive larva
                    if (larvas.length){
                        Game.unselectAll();
                        Game.addIntoAllSelected(larvas,true);
                        if (larvas[0] instanceof Gobj){
                            Game.changeSelectedTo(larvas[0]);
                            //Sound effect
                            larvas[0].sound.selected.play();
                        }
                    }
                }
            });
            $('button.BasicMutation').on('click',function(){
                Button.equipButtonsFor(Button.basicZergMutations);
            });
            $('button.AdvancedMutation').on('click',function(){
                Button.equipButtonsFor(Button.advancedZergMutations);
            });
            $('button.BasicBuilding').on('click',function(){
                Button.equipButtonsFor(Button.basicTerranBuildings);
            });
            $('button.AdvancedBuilding').on('click',function(){
                Button.equipButtonsFor(Button.advancedTerranBuildings);
            });
            $('button.BasicStructure').on('click',function(){
                Button.equipButtonsFor(Button.basicProtossStructures);
            });
            $('button.AdvancedStructure').on('click',function(){
                Button.equipButtonsFor(Button.advancedProtossStructures);
            });
            //Upgrade callbacks
            var upgrades=[];
            for (var grade in Upgrade){
                upgrades.push(grade);
            }//Cannot use for-in bind together
            upgrades.forEach(function(grade){
                $('button.'+grade).on('click',function(){
                    //Filter out when occupied
                    if (Game.selectedUnit.processing) return;
                    //Need time
                    if (Resource.getCost(grade) && Resource.getCost(grade).time){
                        var owner=Game.selectedUnit;
                        var duration=Resource.getCost(grade).time;
                        //User move record
                        Multiplayer.cmds.push(JSON.stringify({
                            uids:[owner.id],
                            type:'upgrade',
                            name:grade,
                            duration:duration,
                            team:Game.team
                        }));
                    }
                    //Or will effect immediately
                    else {
                        Multiplayer.cmds.push(JSON.stringify({
                            team:Game.team,
                            type:'upgrade',
                            name:grade
                        }));
                    }
                });
            });
            //Magic callbacks
            var magics=[];
            for (var magic in Magic){
                magics.push(magic);
            }//Cannot use for-in bind together
            var hasMagic=function(chara,magic){
                if (chara.items){
                    for (var attr in chara.items){
                        if (chara.items[attr] && chara.items[attr].name==magic){
                            if (chara.items[attr].condition){
                                if (chara.items[attr].condition()) return true;
                            }
                            else return true;
                        }
                    }
                }
                return false;
            };
            magics.forEach(function(magic){
                $('button.'+magic).on('click',function(){
                    var duration=Resource.getCost(magic)?(Resource.getCost(magic).time):0;
                    Unit.allUnits.concat(Building.allBuildings).filter(function(chara){
                        return (chara.team==Game.team && chara.selected && hasMagic(chara,magic));
                    }).forEach(function(chara){
                        //For Scarab and Interceptor
                        if (duration){
                            //Filter out when occupied
                            if (chara.processing) return;
                            Multiplayer.cmds.push(JSON.stringify({
                                uids:[chara.id],
                                type:'magic',
                                name:magic,
                                duration:duration
                            }));
                        }
                        else {
                            //Pay by credit card
                            if (Magic[magic].credit) chara.creditBill=Resource.getCost(magic);
                            //Execute magic immediately
                            if (!(Magic[magic].credit || Magic[magic].needLocation)){
                                Multiplayer.cmds.push(JSON.stringify({
                                    uids:[chara.id],
                                    type:'magic',
                                    name:magic
                                }));
                            }
                            else {
                                //Payment: chara paypal cost
                                if (Resource.paypal.call(chara,Resource.getCost(magic))){
                                    Magic[magic].spell.call(chara);
                                }
                            }
                        }
                    });
                });
            });
            //Unit callbacks:
            //For Zerg units
            var unitTypes=[];
            for (var unitType in Zerg){
                unitTypes.push(unitType);
            }
            var exceptions=['Guardian','Devourer'];
            unitTypes.forEach(function(unitType){
                $('button.'+unitType).on('click',function(){
                    //Calculate duration
                    var duration=Resource.getCost(unitType).time;
                    Unit.allUnits.filter(function(chara){
                        return (chara.team==Game.team && chara.selected && chara.name==Game.selectedUnit.name);
                    }).forEach(function(chara){
                        Multiplayer.cmds.push(JSON.stringify({
                            uids:[chara.id],
                            type:'unit',
                            name:unitType,
                            duration:duration,
                            evolve:'zerg'
                        }));
                    });
                });
            });
            //For Terran and Protoss units, add InfestedTerran
            [Terran,Protoss,{InfestedTerran:Zerg.InfestedTerran}].forEach(function(Race){
                var unitTypes=[];
                for (var unitType in Race){
                    unitTypes.push(unitType);
                }//Cannot use for-in bind together
                var exceptions=['Archon','DarkArchon'];
                unitTypes.forEach(function(unitType){
                    //Unit type isn't in exceptions
                    if (exceptions.indexOf(unitType)==-1) {
                        $('button.'+unitType).on('click',function(){
                            //Filter out when occupied
                            if (Game.selectedUnit.processing) return;
                            //Need time
                            if (Resource.getCost(unitType) && Resource.getCost(unitType).time){
                                var owner=Game.selectedUnit;
                                var duration=Resource.getCost(unitType).time;
                                Multiplayer.cmds.push(JSON.stringify({
                                    uids:[owner.id],
                                    type:'unit',
                                    name:unitType,
                                    duration:duration
                                }));
                            }
                        });
                    }
                    //Exception units
                    else {
                        $('button.'+unitType).on('click',function(){
                            //Calculate duration
                            var duration=Resource.getCost(unitType).time;
                            Unit.allUnits.filter(function(chara){
                                return (chara.team==Game.team && chara.selected && chara.name==Game.selectedUnit.name);
                            }).forEach(function(chara){
                                //Filter out when occupied
                                if (chara.processing) return;
                                Multiplayer.cmds.push(JSON.stringify({
                                    uids:[chara.id],
                                    type:'unit',
                                    name:unitType,
                                    duration:duration,
                                    evolve:'archon'
                                }));
                            });
                        });
                    }
                });
            });

            //Building callbacks
            var evolvedBuildings=['Lair','Hive','SunkenColony','SporeColony','GreaterSpire',
                'ComstatStation','NuclearSilo','MachineShop','ControlTower','PhysicsLab','ConvertOps'];
            ['ZergBuilding','TerranBuilding','ProtossBuilding'].forEach(function(BuildType){
                var Build=Building[BuildType];
                var buildNames=[];
                for (var buildName in Build){
                    //Filter out noise
                    if (buildName!='inherited' && buildName!='super' && buildName!='extends'){
                        buildNames.push(buildName);
                    }
                }
                buildNames.forEach(function(buildName){
                    $('button.'+buildName).on('click',function(){
                        //Pay by credit card if not evolved building
                        if (evolvedBuildings.indexOf(buildName)==-1) {
                            Game.selectedUnit.creditBill=Resource.getCost(buildName);
                            //Payment: chara paypal cost
                            if (Resource.paypal.call(Game.selectedUnit,Resource.getCost(buildName))){
                                Game.selectedUnit.buildName=buildName;
                                Game.selectedUnit['build'+BuildType]();
                            }
                        }
                        else {
                            Multiplayer.cmds.push(JSON.stringify({
                                uids:[Game.selectedUnit.id],
                                type:'build',
                                name:buildName,
                                buildType:BuildType
                            }));
                        }
                    });
                });
            });
        }
        //Bind tooltip callbacks
        $('div.panel_Control button').on('mouseover',function(event){
            var _name=this.className;
            $('div.tooltip_Box').css('right',innerWidth-event.clientX).css('bottom',innerHeight-event.clientY).show();
            $('div.tooltip_Box div.itemName')[0].innerHTML=_name;
            var cost=Resource.getCost(_name);
            if (cost) {
                $('div.cost').show();
                ['mine','gas','man','magic'].forEach(function(res){
                    if(cost[res]) {
                        $('div.cost *[class*='+res+']').show();
                        $('div.cost span.'+res+'Num')[0].innerHTML=cost[res];
                    }
                    else $('div.cost *[class*='+res+']').hide();
                });
            }
        });
        $('div.panel_Control button').on('mouseout',function(){
            $('div.tooltip_Box').hide();
            $('div.tooltip_Box div.cost').hide();
            $('div.tooltip_Box div.itemName')[0].innerHTML='';
            ['mine','gas','man','magic'].forEach(function(res){
                $('div.cost span.'+res+'Num')[0].innerHTML='';
            });
        });
    },
    equipButtonsForReplay:function(){
        $('button[num="1"]').attr('class','Play').attr('disabled',true).show();
        $('button[num="2"]').attr('class','Pause').show();
        $('button[num="4"]').attr('class','SpeedUp').show();
        $('button[num="5"]').attr('class','SlowDown').show();
        //Bind callback for replay buttons
        $('button.Play').on('click',Button.playHandler);
        $('button.Pause').on('click',Button.pauseHandler);
        $('button.SpeedUp').on('click',Button.speedUpHandler);
        $('button.SlowDown').on('click',Button.slowDownHandler);
        //Bind tooltip callbacks
        $('div.panel_Control button').on('mouseover',function(event){
            $('div.tooltip_Box').css('right',innerWidth-event.clientX).css('bottom',innerHeight-event.clientY).show();
            $('div.tooltip_Box div.itemName')[0].innerHTML=this.className;
        });
        $('div.panel_Control button').on('mouseout',function(){
            $('div.tooltip_Box').hide();
            $('div.tooltip_Box div.itemName')[0].innerHTML='';
        });
    },

    /***************Buttons***************/
    basicZergMutations:{
        items:{
            '1':{name:'Hatchery'},
            '2':{name:'CreepColony',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Hatchery' || chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '3':{name:'Extractor',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Hatchery' || chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '4':{name:'SpawningPool',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Hatchery' || chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '5':{name:'EvolutionChamber',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Hatchery' || chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '7':{name:'HydraliskDen',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='SpawningPool';
                })
            }},
            '9':{name:'Cancel'}
        }
    },
    advancedZergMutations:{
        items:{
            '1':{name:'Spire',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '2':{name:'QueenNest',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Lair' || chara.name=='Hive');
                })
            }},
            '3':{name:'NydusCanal',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && (chara.name=='Hive');
                })
            }},
            '4':{name:'UltraliskCavern',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Hive';
                })
            }},
            '5':{name:'DefilerMound',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Hive';
                })
            }},
            '9':{name:'Cancel'}
        }
    },
    basicTerranBuildings:{
        items:{
            '1':{name:'CommandCenter'},
            '2':{name:'SupplyDepot',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CommandCenter';
                })
            }},
            '3':{name:'Refinery',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CommandCenter';
                })
            }},
            '4':{name:'Barracks',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CommandCenter';
                })
            }},
            '5':{name:'EngineeringBay',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CommandCenter';
                })
            }},
            '6':{name:'MissileTurret',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='EngineeringBay';
                })
            }},
            '7':{name:'Academy',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Barracks';
                })
            }},
            '8':{name:'Bunker',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Barracks';
                })
            }},
            '9':{name:'Cancel'}
        }
    },
    advancedTerranBuildings:{
        items:{
            '1':{name:'Factory',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Barracks';
                })
            }},
            '2':{name:'Starport',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Factory';
                })
            }},
            '3':{name:'ScienceFacility',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Starport';
                })
            }},
            '4':{name:'Armory',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Factory';
                })
            }},
            '9':{name:'Cancel'}
        }
    },
    basicProtossStructures:{
        items:{
            '1':{name:'Nexus'},
            '2':{name:'Pylon',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Nexus';
                })
            }},
            '3':{name:'Assimilator',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Nexus';
                })
            }},
            '4':{name:'Gateway',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Nexus';
                })
            }},
            '5':{name:'Forge',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Nexus';
                })
            }},
            '6':{name:'PhotonCannon',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Forge';
                })
            }},
            '7':{name:'CyberneticsCore',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Gateway';
                })
            }},
            '8':{name:'ShieldBattery',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='Gateway';
                })
            }},
            '9':{name:'Cancel'}
        }
    },
    advancedProtossStructures:{
        items:{
            '1':{name:'RoboticsFacility',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CyberneticsCore';
                })
            }},
            '2':{name:'StarGate',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CyberneticsCore';
                })
            }},
            '3':{name:'CitadelOfAdun',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CyberneticsCore';
                })
            }},
            '4':{name:'RoboticsSupportBay',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='RoboticsFacility';
                })
            }},
            '5':{name:'FleetBeacon',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='StarGate';
                })
            }},
            '6':{name:'TemplarArchives',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='CitadelOfAdun';
                })
            }},
            '7':{name:'Observatory',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='RoboticsFacility';
                })
            }},
            '8':{name:'ArbiterTribunal',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='StarGate';
                }) && Building.allBuildings.some(function(chara){
                    return chara.team==Game.team && chara.name=='TemplarArchives';
                })
            }},
            '9':{name:'Cancel'}
        }
    },

    /***************Handlers***************/
    //Move button
    moveHandler:function(){
        if (Button.callback==null) {
            Button.callback='move';
            $('div.GameLayer').attr('status','button');
        }
        else {
            //Cancel handler
            $('div.GameLayer').removeAttr('status');
            Button.callback=null;
        }
    },
    //Stop button
    stopHandler:function(charas){
        if (charas==null){
            var charas=Unit.allUnits.filter(function(chara){
                return chara.selected && chara.team==Game.team;
            });
            //Buffer pool
            Multiplayer.cmds.push(JSON.stringify({
                uids:Multiplayer.getUIDs(charas),
                type:'stop'
            }));
        }
        else {
            charas.forEach(function(chara){
                if (chara.attack) chara.stopAttack();
                chara.dock();
                //Interrupt old destination routing
                if (chara.destination) {
                    //Break possible dead lock
                    if (chara.destination.next) chara.destination.next=undefined;
                    delete chara.destination;
                }
            });
        }
    },
    //Attack button
    attackHandler:function(){
        if (Button.callback==null) {
            Button.callback='attack';
            $('div.GameLayer').attr('status','button');
        }
        else {
            //Cancel handler
            $('div.GameLayer').removeAttr('status');
            Button.callback=null;
        }
    },
    //Patrol button
    patrolHandler:function(){
        if (Button.callback==null) {
            Button.callback='patrol';
            $('div.GameLayer').attr('status','button');
        }
        else {
            //Cancel handler
            $('div.GameLayer').removeAttr('status');
            Button.callback=null;
        }
    },
    //Hold button
    holdHandler:function(charas){
        //Part A: Before get charas
        if (charas==null){
            var charas=Unit.allUnits.filter(function(chara){
                return chara.selected && chara.team==Game.team;
            });
            //Buffer pool
            Multiplayer.cmds.push(JSON.stringify({
                uids:Multiplayer.getUIDs(charas),
                type:'hold'
            }));
        }
        //Part B: After get charas callback
        else {
            Button.stopHandler(charas);
            //Freeze all units
            charas.forEach(function(chara){
                if (chara.hold){
                    delete chara.AI;
                    delete chara.findNearbyTargets;
                    delete chara.hold;
                    Button.refreshButtons();
                }
                else {
                    if (chara.attack){
                        //Use the same AI as attackable building
                        chara.AI=Building.Attackable.prototypePlus.AI;
                        //Can only find target inside attack range instead of in sight
                        chara.findNearbyTargets=Building.Attackable.prototypePlus.findNearbyTargets;
                    }
                    chara.dock();
                    chara.hold=true;
                    Button.refreshButtons();
                }
            });
        }
    },
    //Replay relative
    playHandler:function(){
        Game.startAnimation();
        $('button.Play').attr('disabled',true);
        $('button.Pause').attr('disabled',false);
    },
    pauseHandler:function(){
        Game.stopAnimation();
        $('button.Pause').attr('disabled',true);
        $('button.Play').attr('disabled',false);
    },
    speedUpHandler:function(){
        if (Game.replayFlag){
            //Can speed up
            if (Game._frameInterval>25) {
                Game._frameInterval/=2;
                //Cannot speed up any more
                if (Game._frameInterval<=25) $('button.SpeedUp').attr('disabled',true);
                //Need play speed refresh after speed up
                Game.stopAnimation();
                Button.playHandler();
            }
            //Enable SlowDown button
            $('button.SlowDown').attr('disabled',false);
        }
    },
    slowDownHandler:function(){
        if (Game.replayFlag){
            //Can slow down
            if (Game._frameInterval<400)  {
                Game._frameInterval*=2;
                //Cannot slow down any more
                if (Game._frameInterval>=400) $('button.SlowDown').attr('disabled',true);
                //Need play speed refresh after slow down
                Game.stopAnimation();
                Button.playHandler();
            }
            //Enable SpeedUp button
            $('button.SpeedUp').attr('disabled',false);
        }
    },
    //Execute callback
    execute:function(event){
        //Finish part II
        switch (Button.callback){
            case 'move':
                mouseController.rightClick(event);
                break;
            case 'attack':
                mouseController.rightClick(event,true,'attack');
                break;
            case 'patrol':
                mouseController.rightClick(event,true,'patrol');
                break;
            default:
                if (typeof(Button.callback)=='function'){
                    //Mouse at (clickX,clickY)
                    var offset=$('#fogCanvas').offset();
                    var clickX=event.pageX-offset.left;
                    var clickY=event.pageY-offset.top;
                    var location={x:clickX+Map.offsetX,y:clickY+Map.offsetY};
                    //Show right click cursor
                    new Burst.RightClickCursor(location);
                    //Call back with location info
                    //Farmer build buildings
                    if (Button.callback.farmer){
                        Multiplayer.cmds.push(JSON.stringify({
                            uids:[Button.callback.farmer.id],
                            type:'build',
                            name:Button.callback.farmer.buildName,
                            buildType:Button.callback.buildType,
                            pos:location
                        }));
                    }
                    //Spell magic
                    else {
                        var magicName='';
                        for (var magic in Magic){
                            if (Magic[magic].spell==Button.callback) magicName=magic;
                        }
                        Multiplayer.cmds.push(JSON.stringify({
                            uids:[Button.callback.owner.id],
                            type:'magic',
                            name:magicName,
                            pos:location,
                            creditBill:Button.callback.owner.creditBill
                        }));
                    }
                }
        }
        $('div.GameLayer').removeAttr('status');
        Button.callback=null;
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

//Gobj is original object used in StarCraft
var Gobj=function(props){
    this.x=props.x;
    this.y=props.y;
    if (props.target instanceof Gobj){
        this.x=(props.target.posX()-this.width/2)>>0;
        this.y=(props.target.posY()-this.height/2)>>0;
    }
    this.action=0;//Only for moving
    this.status="";
    this.buffer={};//Buffer names
    this.override={};//Buffer effects
    this.bufferObjs=[];
    this.allFrames={};
    this.team=props.team?props.team:0;//team 0 by default
};

//Default value used if not initialize properly
Gobj.prototype.name="Gobj";
Gobj.prototype.width=0;
Gobj.prototype.height=0;
Gobj.prototype.isEnemy=function(){
    return this.team!=Game.team;
};
Gobj.prototype.posX=function(){
    return this.x+this.width/2;
};
Gobj.prototype.posY=function(){
    return this.y+this.height/2;
};
Gobj.prototype.imgPos={
    moving:{
        left:[0,0,0,0,0,0,0,0],
        top:[0,0,0,0,0,0,0,0]
    }
};
//Only for moving
Gobj.prototype.frame={
    moving:1
};
//Better only for moving
Gobj.prototype.speed={x:0,y:0};

//Basic behaviors
Gobj.prototype.detectOutOfBound=function(){
    //Do nothing here
};
//Only for moving
Gobj.prototype.updateLocation=function(){
    //Override here
};
Gobj.prototype.animeFrame=function(){
    //Animation play
    this.action++;
    if (this.action>=this.frame[this.status]) {
        this.action=0;
    }
};
Gobj.prototype.moving=function(){
    //Clear old timer
    this.stop();
    //Launch new moving timer
    this.status="moving";
    var myself=this;
    var movingFrame=function(){
        myself.animeFrame();
        //Relocate character
        myself.updateLocation();
        //Detect OutOfBound
        myself.detectOutOfBound();
    };
    this.allFrames['moving']=movingFrame;
    var animateFrame=function(){
        //Only play animation, will not move
        myself.animeFrame();
    };
    this.allFrames['animate']=animateFrame;
};
Gobj.prototype.stop=function(){
    //Clear both kinds of timer
    delete this.allFrames['moving'];
    delete this.allFrames['dock'];
    delete this.allFrames['animate'];
};
Gobj.prototype.playFrames=function(){
    var frames=this.allFrames;
    for (var type in frames){
        frames[type]();
    }
};
Gobj.prototype.die=function(){
    //Clear old timer
    this.stop();
    this.status="dead";
    this.action=0;
    //If has die animation
    if (this.dieEffect) {
        new this.dieEffect({x:this.posX(),y:this.posY()});
    }
};
Gobj.prototype.include=function(obj){
    return (obj.posY()>this.y)&&(obj.posY()<this.y+this.height)&&(obj.posX()>this.x)&&(obj.posX()<this.x+this.width);
};
Gobj.prototype.includePoint=function(x,y){
    return (y>this.y)&&(y<this.y+this.height)&&(x>this.x)&&(x<this.x+this.width);
};
//rect={centerX:?,centerY:?,radius:?} or {centerX:?,centerY:?,radius:[?,?]}
Gobj.prototype.insideSquare=function(rect){
    if (rect.radius instanceof Array)
        return Math.abs(rect.centerX-this.posX())<rect.radius[0] && Math.abs(rect.centerY-this.posY())<rect.radius[1];
    else return Math.abs(rect.centerX-this.posX())<rect.radius && Math.abs(rect.centerY-this.posY())<rect.radius;
};
//rect={start:{x:?,y:?},end:{x:?,y:?}}
Gobj.prototype.insideRect=function(rect){
    return (this.posX()>rect.start.x) && (this.posX()<rect.end.x) &&
        (this.posY()>rect.start.y) && (this.posY()<rect.end.y);
};
//circle={centerX:?,centerY:?,radius:?}
Gobj.prototype.insideCircle=function(circle){
    return Math.pow(circle.centerX-this.posX(),2)+Math.pow(circle.centerY-this.posY(),2)<Math.pow(circle.radius,2);
};
//Default is circle mode
Gobj.prototype.inside=Gobj.prototype.insideCircle;
//Radius
Gobj.prototype.radius=function(){
    return (this.width<this.height)?(this.width/2):(this.height/2);//Math.min
};
//Distance
Gobj.prototype.distanceFrom=function(obj){
    if (obj instanceof Gobj){
        return Math.pow((this.posX()-obj.posX())*(this.posX()-obj.posX())+
            (this.posY()-obj.posY())*(this.posY()-obj.posY()),0.5);
    }
    else {
        return Math.pow((this.posX()-obj.x)*(this.posX()-obj.x)+
            (this.posY()-obj.y)*(this.posY()-obj.y),0.5);
    }
};
Gobj.prototype.insideScreen=function(){
    return ((this.x+this.width)>Map.offsetX) && (this.x<(Map.offsetX+Game.HBOUND))
        && ((this.y+this.height)>Map.offsetY) && (this.y<(Map.offsetY+Game.VBOUND));
};
Gobj.prototype.sightInsideScreen=function(){
    return ((this.x+this.width)>(Map.offsetX-this.get('sight'))) && (this.x<(Map.offsetX+Game.HBOUND+this.get('sight')))
        && ((this.y+this.height)>(Map.offsetY-this.get('sight'))) && (this.y<(Map.offsetY+Game.VBOUND+this.get('sight')));
};
Gobj.prototype.softCollideWith=function(chara,N){
    if (N==null) N=1;
    //Twice radius of hard collision
    return chara.insideSquare({centerX:this.posX(),centerY:this.posY(),radius:[this.width*N,this.height*N]});
};
Gobj.prototype.collideWith=function(chara){
    //Bounding box: right-left-down-up
    return !((this.x>(chara.x+chara.width)) || (chara.x>(this.x+this.width))
        || (this.y>(chara.y+chara.height)) || (chara.y>(this.y+this.height)));
};
Gobj.prototype.isIdle=function(){
    return this.status=="dock";
};
Gobj.prototype.canSee=function(enemy){
    return enemy.inside({centerX:this.posX(),centerY:this.posY(),radius:this.get('sight')});
};
Gobj.prototype.get=function(prop){
    //Currently only support upgrade for unit properties, no buildings
    var result=eval('this.'+prop);//Can get A.B.C
    //ShareFlag is symbol for team sharing array, not speed matrix array
    if (result instanceof Array) return result[this.team];
    else return result;
};
Gobj.prototype.addBuffer=function(bufferObj,onAll){
    for (var prop in bufferObj){
        //Register in override if not exist
        if (!this.override[prop]) this.override[prop]=[];
        var buffer=bufferObj[prop];
        //Add buffer into override list
        this.override[prop].unshift(buffer);
        //Override unit property by time sequence if has
        if (this[prop]!=null || prop.indexOf('isInvisible')!=-1 || onAll) this[prop]=buffer;
    }
    this.bufferObjs.push(bufferObj);
    //Refresh
    if (this==Game.selectedUnit) Game.refreshInfo();
};
Gobj.prototype.removeBuffer=function(bufferObj){
    var bufferObjIndex=this.bufferObjs.indexOf(bufferObj);
    //Buffer obj still exist, prevent remove twice
    if (bufferObjIndex!=-1){
        for (var prop in bufferObj){
            var buffer=bufferObj[prop];
            var overrideList=this.override[prop];
            //Remove buffer from override list
            var index=overrideList.indexOf(buffer);
            if (index!=-1) overrideList.splice(index,1);
            //Have other buffer, apply it by time sequence
            if (overrideList.length>0) this[prop]=overrideList[0];
            else delete this[prop];
        }
        //Remove from bufferObjs
        this.bufferObjs.splice(bufferObjIndex,1);
        //Refresh
        if (this==Game.selectedUnit) Game.refreshInfo();
        //Remove successfully
        return true;
    }
    //Remove failure
    else return false;
};
Gobj.prototype.cannotMove=function(){
    return (this instanceof Building) || Boolean(this.burrowBuffer);
};
Gobj.prototype.evolveTo=function(props){
    //Init
    var charaType=props.type,burstArr=props.burstArr,mixin=props.mixin,rallyPoint=props.rallyPoint;
    var newTypeChara=null,selectedStatus=[this.selected,(this==Game.selectedUnit)],team=this.team;
    //Hide die burst and sound for old unit, then die
    this.dieEffect=this.sound.death=null;
    this.die();
    if (this.processing && !props.chain) delete this.processing;
    //Birth function
    var bornAt=function(chara){
        var prop={target:chara,team:team};
        if (mixin) _$.mixin(prop,mixin);
        newTypeChara=new charaType(prop);
        if (rallyPoint) newTypeChara.destination=rallyPoint;
        //Fix cannot select egg issue
        Game.commandTimeout(function(){
            if (selectedStatus[0]) Game.addIntoAllSelected(newTypeChara);
            if (selectedStatus[1]) Game.changeSelectedTo(newTypeChara);
        },0);
    };
    //Burst chain
    if (burstArr){
        var pos={x:this.posX(),y:this.posY()};
        var birth=new Burst[burstArr[0]](pos);
        var evolveChain=function(N){
            return function(){
                birth=new Burst[burstArr[N]](pos);
                if ((N+1)<burstArr.length) birth.callback=evolveChain(N+1);
                //Finish evolve chain
                else birth.callback=function(){
                    var times=charaType.prototype.birthCount;
                    if (times==null) times=1;
                    for (var N=0;N<times;N++){
                        bornAt(birth);
                    }
                };
            };
        };
        //Start evolve chain
        if (burstArr.length>1) birth.callback=evolveChain(1);
        //Finish evolve chain
        else birth.callback=function(){
            var times=charaType.prototype.birthCount;
            if (times==null) times=1;
            for (var N=0;N<times;N++){
                bornAt(birth);
            }
        };
    }
    else bornAt(this);
    return newTypeChara;
};
//This buffer makes invisible units visible
Gobj.detectorBuffer=[];

/***/ }),
/* 8 */
/***/ (function(module, exports) {

/******* Define Hero units *******/
var Hero={};
Hero.HeroCruiser=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Override
        this.magic=this.get('MP');
    },
    prototypePlus: {
        //Add basic unit info
        name: "HeroCruiser",
        imgPos: {
            moving: {
                left: [10,130,250,370,490,610,730,850,10,130,250,370,490,610,730,850],
                top: [10,10,10,10,10,10,10,10,130,130,130,130,130,130,130,130]
            }
        },
        width: 100,//120N+10
        height: 100,
        frame: {
            moving: 1,
            stop: 1
        },
        //Only for moving status, override
        speed:9,
        HP: 1000,
        damage: 50,
        armor:3,
        MP: 500,
        sight:385,
        attackRange: 250,
        attackInterval: 3000,
        dieEffect:Burst.BigExplode,
        isFlying:true,
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:function(){
            if (this.magic<this.get('MP')) {
                this.magic+=3;
                if (this.magic>this.get('MP')) this.magic=this.get('MP');
            }
        },
        items:{
            '6':{name:'Yamato'},
            '7':{name:'DefensiveMatrix'},
            '8':{name:'EMPShockwave'},
            '9':{name:'Irradiate'}
        },
        cost:{
            man:8
        },
        //Override
        dock:function(){
            //Use the same behavior
            Zerg.Devourer.prototype.dock.call(this);
        }
    }
});
Hero.Tassadar=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Override
        this.magic=this.get('MP');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Tassadar",
        imgPos: {
            moving: {
                left: [0,95,190,285,380,475,570,665,0,95,190,285,380,475,570,665],
                top: [90,90,90,90,90,90,90,90,0,0,0,0,0,0,0,0]
            }
        },
        width: 95,//95N
        height: 90,
        frame: {
            moving: 1,
            stop: 1
        },
        //Only for moving status, override
        speed:15,
        HP: 999,
        SP: 999,
        armor:3,
        MP: 999,
        sight:385,
        detector: Gobj.detectorBuffer,
        dieEffect:Burst.BigBlueExplode,
        isFlying:true,
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:function(){
            if (this.life<this.get('HP')) {
                this.life+=3;
                if (this.life>this.get('HP')) this.life=this.get('HP');
            }
            if (this.shield<this.get('SP')) {
                this.shield+=3;
                if (this.shield>this.get('SP')) this.shield=this.get('SP');
            }
            if (this.magic<this.get('MP')) {
                this.magic+=3;
                if (this.magic>this.get('MP')) this.magic=this.get('MP');
            }
        },
        items:{
            '2':{name:'Ensnare'},
            '3':{name:'Plague'},
            '4':{name:'Lockdown'},
            '5':{name:'EMPShockwave'},
            '6':{name:'Irradiate'},
            '7':{name:'PsionicStorm'},
            '8':{name:'MaelStorm'},
            '9':{name:'StasisField'}
        },
        cost:{
            man:8
        },
        //Override
        dock:function(){
            //Use the same behavior
            Zerg.Devourer.prototype.dock.call(this);
        }
    }
});
Hero.Kerrigan=AttackableUnit.extends({
    constructorPlus:function(props){
        //Override
        this.magic=this.get('MP');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Kerrigan",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0,0],[36,36,36,36,36,36,36,36,36],
                    [73,73,73,73,73,73,73,73,73],[109,109,109,109,109,109,109,109,109],
                    [146,146,146,146,146,146,146,146,146],[182,182,182,182,182,182,182,182,182],
                    [219,219,219,219,219,219,219,219,219],[255,255,255,255,255,255,255,255,255],
                    [292,292,292,292,292,292,292,292,292],[365,365,365,365,365,365,365,365,365],
                    [401,401,401,401,401,401,401,401,401],[438,438,438,438,438,438,438,438,438],
                    [474,474,474,474,474,474,474,474,474],[511,511,511,511,511,511,511,511,511],
                    [547,547,547,547,547,547,547,547,547],[584,584,584,584,584,584,584,584,584]
                ],
                top: [
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344],
                    [0,43,86,129,172,215,258,301,344],[0,43,86,129,172,215,258,301,344]
                ]
            },
            attack: {
                left: [
                    [0,0,0,0],[36,36,36,36],
                    [73,73,73,73],[109,109,109,109],
                    [146,146,146,146],[182,182,182,182],
                    [219,219,219,219],[255,255,255,255],
                    [292,292,292,292],[365,365,365,365],
                    [401,401,401,401],[438,438,438,438],
                    [474,474,474,474],[511,511,511,511],
                    [547,547,547,547],[584,584,584,584]
                ],
                top: [
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516],
                    [387,430,473,516],[387,430,473,516]
                ]
            },
            dock: {
                left: [0,36,73,109,146,182,219,255,292,365,401,438,474,511,547,584],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            }
        },
        width: 36,//36.5N>>0
        height: 43,//43N
        frame: {
            moving: 9,
            dock: 1,
            attack:4
        },
        //Only for moving status, override
        speed:10,
        HP: 300,
        damage: 20,
        armor:1,
        MP: 300,
        sight:315,
        attackRange: 210,
        attackInterval: 2200,
        dieEffect:Burst.HumanDeath,
        attackEffect:Burst.FireSpark,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.WAVE_ATTACK,
        recover:function(){
            if (this.magic<this.get('MP')) {
                this.magic+=2;
                if (this.magic>this.get('MP')) this.magic=this.get('MP');
            }
        },
        cost:{
            man:1
        },
        items:{
            '6':{name:'StimPacks'},
            '7':{name:'Cloak'},
            '8':{name:'Lockdown'}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Hero.Sarah=AttackableUnit.extends({
    constructorPlus:function(props){
        //Override
        this.magic=this.get('MP');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Sarah",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[62,62,62,62,62,62,62,62],
                    [124,124,124,124,124,124,124,124],[186,186,186,186,186,186,186,186],
                    [248,248,248,248,248,248,248,248],[310,310,310,310,310,310,310,310],
                    [372,372,372,372,372,372,372,372],[434,434,434,434,434,434,434,434],
                    [496,496,496,496,496,496,496,496],[620,620,620,620,620,620,620,620],
                    [682,682,682,682,682,682,682,682],[744,744,744,744,744,744,744,744],
                    [806,806,806,806,806,806,806,806],[868,868,868,868,868,868,868,868],
                    [930,930,930,930,930,930,930,930],[992,992,992,992,992,992,992,992]
                ],
                top: [
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406]
                ]
            },
            attack: {
                left: [
                    [0,0,0,0,0,0,0,0],[62,62,62,62,62,62,62,62],
                    [124,124,124,124,124,124,124,124],[186,186,186,186,186,186,186,186],
                    [248,248,248,248,248,248,248,248],[310,310,310,310,310,310,310,310],
                    [372,372,372,372,372,372,372,372],[434,434,434,434,434,434,434,434],
                    [496,496,496,496,496,496,496,496],[620,620,620,620,620,620,620,620],
                    [682,682,682,682,682,682,682,682],[744,744,744,744,744,744,744,744],
                    [806,806,806,806,806,806,806,806],[868,868,868,868,868,868,868,868],
                    [930,930,930,930,930,930,930,930],[992,992,992,992,992,992,992,992]
                ],
                top: [
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870]
                ]
            },
            dock: {
                left: [0,62,124,186,248,310,372,434,496,620,682,744,806,868,930,992],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            }
        },
        width: 62,//(N-1)
        height: 58,//(N-1)
        frame: {
            moving: 8,
            dock: 1,
            attack: 8
        },
        //Only for moving status, override
        speed:10,
        HP: 500,
        SP: 500,
        damage: 40,
        armor:2,
        plasma:0,
        MP: 500,
        sight:315,
        attackRange: 70,
        attackInterval: 2000,
        dieEffect:Burst.HumanDeath,
        attackEffect:Burst.FireSpark,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:function(){
            if (this.life<this.get('HP')) {
                this.life+=3;
                if (this.life>this.get('HP')) this.life=this.get('HP');
            }
            if (this.shield<this.get('SP')) {
                this.shield+=3;
                if (this.shield>this.get('SP')) this.shield=this.get('SP');
            }
            if (this.magic<this.get('MP')) {
                this.magic+=3;
                if (this.magic>this.get('MP')) this.magic=this.get('MP');
            }
        },
        cost:{
            man:2
        },
        items:{
            '6':{name:'Cloak'},
            '7':{name:'PsionicStorm'},
            '8':{name:'Plague'},
            '9':{name:'Ensnare'}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Hero.DevilHunter=AttackableUnit.extends({
    constructorPlus:function(props){
        //Override
        this.magic=this.get('MP');
    },
    prototypePlus: {
        //Add basic unit info
        name: "DevilHunter",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[62,62,62,62,62,62,62,62],
                    [124,124,124,124,124,124,124,124],[186,186,186,186,186,186,186,186],
                    [248,248,248,248,248,248,248,248],[310,310,310,310,310,310,310,310],
                    [372,372,372,372,372,372,372,372],[434,434,434,434,434,434,434,434],
                    [496,496,496,496,496,496,496,496],[620,620,620,620,620,620,620,620],
                    [682,682,682,682,682,682,682,682],[744,744,744,744,744,744,744,744],
                    [806,806,806,806,806,806,806,806],[868,868,868,868,868,868,868,868],
                    [930,930,930,930,930,930,930,930],[992,992,992,992,992,992,992,992]
                ],
                top: [
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406],
                    [0,58,116,174,232,290,348,406],[0,58,116,174,232,290,348,406]
                ]
            },
            attack: {
                left: [
                    [0,0,0,0,0,0,0,0],[62,62,62,62,62,62,62,62],
                    [124,124,124,124,124,124,124,124],[186,186,186,186,186,186,186,186],
                    [248,248,248,248,248,248,248,248],[310,310,310,310,310,310,310,310],
                    [372,372,372,372,372,372,372,372],[434,434,434,434,434,434,434,434],
                    [496,496,496,496,496,496,496,496],[620,620,620,620,620,620,620,620],
                    [682,682,682,682,682,682,682,682],[744,744,744,744,744,744,744,744],
                    [806,806,806,806,806,806,806,806],[868,868,868,868,868,868,868,868],
                    [930,930,930,930,930,930,930,930],[992,992,992,992,992,992,992,992]
                ],
                top: [
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870],
                    [464,522,580,638,696,754,812,870],[464,522,580,638,696,754,812,870]
                ]
            },
            dock: {
                left: [0,62,124,186,248,310,372,434,496,620,682,744,806,868,930,992],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            }
        },
        width: 62,//(N-1)
        height: 58,//(N-1)
        frame: {
            moving: 8,
            dock: 1,
            attack: 8
        },
        //Only for moving status, override
        speed:10,
        HP: 2000,
        SP: 2000,
        MP: 200,
        damage: 30,
        armor:0,
        plasma:0,
        sight:315,
        detector:Gobj.detectorBuffer,
        attackRange: 210,
        attackInterval: 1500,
        fireDelay:600,
        dieEffect:Burst.SmallZergFlyingDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:function(){
            if (this.life<this.get('HP')) {
                this.life+=5;
                if (this.life>this.get('HP')) this.life=this.get('HP');
            }
            if (this.shield<this.get('SP')) {
                this.shield+=5;
                if (this.shield>this.get('SP')) this.shield=this.get('SP');
            }
            if (this.magic<this.get('MP')) {
                this.magic+=5;
                if (this.magic>this.get('MP')) this.magic=this.get('MP');
            }
        },
        cost:{
            man:8
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});


/***/ }),
/* 9 */
/***/ (function(module, exports) {

var Magic={
    //Zerg
    Burrow:{
        name:"Burrow",
        enabled:false,
        spell:function(){
            this.dock();
            if (this.stopAttack) this.stopAttack();
            this.status="burrow";
            this.action=2;
            var myself=this;
            //Effect:Freeze target
            var bufferObj={
                moveTo:function(){},
                moveToward:function(){},
                dock:function(){},
                items:{'1':undefined,'2':undefined,'3':undefined,'4':undefined,'5':undefined,
                    '6':undefined,'7':undefined,'8':undefined,'9':{name:'Unburrow'}}
            };
            if (this.attack) bufferObj.attack=function(){};
            //Lurker has same behavior as attackable building
            if (this.name=="Lurker") {
                var mixin=$.extend({},Building.Attackable.prototypePlus);
                delete mixin.name;
                mixin.die=AttackableUnit.prototype.die;//Override
                $.extend(bufferObj,mixin);
                delete bufferObj.items[3];//Enable attack icon
            }
            //Freeze immediately
            this.addBuffer(bufferObj,(this.name=="Lurker"));//onAll for Lurker
            this.burrowBuffer=[bufferObj];
            //Sound effect
            if (this.insideScreen()) this.sound.burrow.play();
            //Forbid actions when burrowing
            var itemsBackup=this.items;
            this.items={'1':undefined,'2':undefined,'3':undefined,'4':undefined,'5':undefined,
                '6':undefined,'7':undefined,'8':undefined,'9':undefined};
            if (Game.selectedUnit==this) Button.refreshButtons();
            //Finish burrow
            Game.commandTimeout(function(){
                //Invisible when finish burrow
                var bufferObjII={};
                for (var N=0;N<Game.playerNum;N++){
                    bufferObjII['isInvisible'+N]=true;
                }
                myself.addBuffer(bufferObjII);
                myself.burrowBuffer.push(bufferObjII);
                myself.buffer.Burrow=true;
                //Change icon when finish burrow
                myself.items=itemsBackup;
                //Apply callback
                if (Game.selectedUnit==myself) Button.refreshButtons();
            },this.imgPos.burrow.left[0].length*100-200);
        }
    },
    Unburrow:{
        name:"Unburrow",
        enabled:false,
        spell:function(){
            this.status="unburrow";
            this.action=0;
            //Show unit immediately
            this.removeBuffer(this.burrowBuffer.pop());
            //Sound effect
            if (this.insideScreen()) this.sound.unburrow.play();
            //Forbid actions
            this.items={'1':undefined,'2':undefined,'3':undefined,'4':undefined,'5':undefined,
                '6':undefined,'7':undefined,'8':undefined,'9':undefined};
            if (Game.selectedUnit==this) Button.refreshButtons();
            //Finish unburrow
            var myself=this;
            delete myself.buffer.Burrow;//Restore shadow immediately
            Game.commandTimeout(function(){
                if (myself.burrowBuffer) {
                    //Release freeze
                    if (myself.removeBuffer(myself.burrowBuffer.pop())) {
                        delete myself.burrowBuffer;
                        if (Game.selectedUnit==myself) Button.refreshButtons();
                    }
                }
                myself.dock();
                myself.direction=(myself.name=="Hydralisk" || myself.name=="Lurker")?5:6;
            },this.frame.unburrow*100-200);//margin
        }
    },
    Load:{
        name:"Load",
        enabled:false,
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Load our unit on ground
                var target=Game.getSelectedOne(location.x,location.y,this.team,true,false);
                var loadedMan=this.loadedUnits.reduce(function(man,chara){
                    if (chara.cost && chara.cost.man) man+=(chara.cost.man);
                    return man;
                },0);
                if (target instanceof Gobj){
                    var targetMan=(target.cost && target.cost.man)?target.cost.man:0;
                    //Load limit
                    if ((loadedMan+targetMan)<=12){
                        var myself=this;
                        this.targetLock=true;
                        //Move toward target to load it
                        this.moveToward(target,Unit.meleeRange,function(){
                            if (target.status!='dead'){
                                //Order ours not to attack it anymore
                                Unit.allUnits.concat(Building.allBuildings).forEach(function(chara){
                                    if (chara.target==target) chara.stopAttack();
                                });
                                //Freeze target
                                if (target.stopAttack) target.stopAttack();
                                target.dock();
                                //Load target
                                myself.loadedUnits.push(target);
                                //Erase target from map
                                Unit.allUnits.splice(Unit.allUnits.indexOf(target),1);
                                //Kick to other space, no die voice
                                target.x=target.y=-100;
                                //Reset all teams: replace passenger with transport
                                for (var N in Game.teams){
                                    var team=Game.teams[N];
                                    team.forEach(function(chara,n){
                                        if (chara==target) team[n]=myself;//team.splice(n,1)
                                    });
                                    $.unique(team);
                                }
                                //Refresh passenger number
                                if (Game.selectedUnit==myself) Game.refreshInfo();
                                //Sound effect
                                if (myself.insideScreen()){
                                    switch (myself.name){
                                        case 'Overlord':
                                            new Audio(Game.CDN+'bgm/Magic.Load.Zerg.wav').play();
                                            break;
                                        case 'Dropship':
                                            new Audio(Game.CDN+'bgm/Magic.Load.Terran.wav').play();
                                            break;
                                        case 'Shuttle':
                                            new Audio(Game.CDN+'bgm/Magic.Load.Protoss.wav').play();
                                            break;
                                    }
                                }
                            }
                        });
                    }
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    UnloadAll:{
        name:"UnloadAll",
        enabled:false,
        spell:function(){
            var myself=this;
            this.loadedUnits.forEach(function(chara){
                //Transport here
                chara.x=myself.x;
                chara.y=myself.y;
                //Add this unit into Game
                Unit.allUnits.push(chara);
            });
            //Flying units show above ground units
            Unit.sortAllUnits();
            //Clear loaded units
            this.loadedUnits=[];
            //Refresh passenger number
            if (Game.selectedUnit==this) Game.refreshInfo();
            //Sound effect
            if (myself.insideScreen()){
                switch (myself.name){
                    case 'Overlord':
                        new Audio(Game.CDN+'bgm/Magic.Unload.Zerg.wav').play();
                        break;
                    case 'Dropship':
                        new Audio(Game.CDN+'bgm/Magic.Unload.Terran.wav').play();
                        break;
                    case 'Shuttle':
                        new Audio(Game.CDN+'bgm/Magic.Unload.Protoss.wav').play();
                        break;
                }
            }
        }
    },
    SetRallyPoint:{
        name:"SetRallyPoint",
        enabled:true,
        //Exception for those without credit
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Record rally point for buildings
                this.rallyPoint=location;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Lurker:{
        name:"Lurker",
        enabled:false,
        cost:{
            mine:50,
            gas:100,
            man:2,
            time:400
        },
        spell:function(){}
    },
    InfestTerranCommandCenter:{
        name:"InfestTerranCommandCenter",
        enabled:true,
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target enemy building: Injured Command Center
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),false,null,function(chara){
                    return chara.name=='CommandCenter' && chara.life/chara.get('HP')<0.5;
                });
                if (target instanceof Gobj){
                    this.targetLock=true;
                    //Move toward target to infest command center
                    var myself=this;
                    this.moveToward(target,Unit.meleeRange,function(){
                        if (target.status!='dead' && target.life/target.get('HP')<0.5){
                            //Change side
                            target.team=myself.team;
                            //Order ours not to attack it anymore
                            Unit.allOurUnits().concat(Building.ourBuildings()).forEach(function(chara){
                                if (chara.target==target) chara.stopAttack();
                            });
                            target.evolveTo({
                                type:Building.ZergBuilding.InfestedBase
                            });
                        }
                    });
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Parasite:{
        name:"Parasite",
        cost:{magic:75},
        credit:true,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target enemy unit
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to fire parasite
                    this.moveToward(target,this.get('sight'),function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Fire parasite
                            var bullet=new Bullets.Parasite({
                                from:myself,
                                to:target,
                                damage:0
                            });
                            bullet.fire(function(){
                                //Effect:should steal target sight
                                target.buffer.Parasite=myself.team;
                            });
                        }
                    });
                }
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    SpawnBroodlings:{
        name:"SpawnBroodlings",
        cost:{magic:150},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Kill enemy unit ground
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true,false);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to fire SpawnBroodlings
                    this.moveToward(target,this.get('sight'),function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Fire SpawnBroodlings to kill that enemy immediately
                            var bullet=new Bullets.Parasite({
                                from:myself,
                                to:target,
                                damage:99999
                            });
                            //Effect
                            bullet.fire(function(){
                                for (var n=0;n<2;n++){
                                    new Zerg.Broodling({x:target.posX(),y:target.posY(),team:myself.team});
                                }
                            });
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Ensnare:{
        name:"Ensnare",
        cost:{magic:75},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Ensnare
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //Fire Ensnare
                        var bullet=new Bullets.Parasite({
                            from:myself,
                            to:{x:location.x,y:location.y}
                        });
                        //Fire Ensnare bullet with callback
                        bullet.fire(function(){
                            //Ensnare animation and sound
                            var anime=new Animation.Ensnare({x:location.x,y:location.y});
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Ensnare.wav').play();
                            //Get in range enemy units
                            var targets=Game.getInRangeOnes(location.x,location.y,[76*1.2>>0,62*1.2>>0],myself.team.toString(),true);
                            //Slow moving speed
                            var bufferObj={
                                speed:2
                            };
                            //Effect
                            targets.forEach(function(chara){
                                //Buffer flag
                                if (chara.buffer.Ensnare) return;//Not again
                                chara.buffer.Ensnare=true;
                                chara.addBuffer(bufferObj);
                                //Green effect
                                new Animation.GreenEffect({team:myself.team,target:chara,callback:function(){
                                    if (chara.status!='dead' && chara.buffer.Ensnare){
                                        //Restore
                                        if (chara.removeBuffer(bufferObj)) delete chara.buffer.Ensnare;
                                    }
                                }});
                            });
                        });
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Consume:{
        name:"Consume",
        enabled:false,
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Kill our unit ground
                var target=Game.getSelectedOne(location.x,location.y,this.team,true,false);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to consume
                    this.moveToward(target,70,function(){
                        //Effect
                        var anime=new Animation.Consume({target:target,callback:function(){
                            //Consume sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Consume.wav').play();
                            //Consume animation missing
                            target.die();
                            myself.magic+=50;
                            if (myself.magic>myself.get('MP')) myself.magic=myself.get('MP');
                        }});
                    });
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    DarkSwarm:{
        name:"DarkSwarm",
        cost:{magic:100},
        credit:true,
        _timer:false,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire DarkSwarm
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //DarkSwarm animation, play hidden frames at first
                        new Animation.DarkSwarm({x:location.x,y:location.y}).action=6;
                        //Dynamic update targets every 1 second
                        var targets=[];
                        //Full guard from distance
                        var bufferObj={
                            //Full guard from distance
                            calculateDamageBy:function(enemyObj,percent){
                                if (enemyObj.meleeAttack){
                                    var enemyAttackType=enemyObj.attackType;
                                    if (!enemyAttackType && enemyObj.attackMode){
                                        enemyAttackType=(this.isFlying)?enemyObj.attackMode.flying.attackType:enemyObj.attackMode.ground.attackType;
                                    }
                                    return enemyObj.get('damage')*Unit.attackMatrix[enemyAttackType][this.unitType];
                                }
                                //Full guard
                                else return 0;
                            }
                        };
                        //Dark swarm wave
                        var darkSwarm=function(){
                            //Clear old units buffer
                            targets.forEach(function(chara){
                                chara.removeBuffer(bufferObj);
                            });
                            targets=[];
                            var darkSwarms=Burst.allEffects.filter(function(effect){
                                return effect instanceof Animation.DarkSwarm;
                            });
                            //Check if any swarm effect exist
                            if (darkSwarms.length) {
                                //Get targets inside all of swarms
                                darkSwarms.forEach(function(swarm){
                                    //Update buffer on our ground units inside swarm
                                    targets=targets.concat(Game.getInRangeOnes(swarm.posX(),swarm.posY(),[126*1.2>>0,94*1.2>>0],null,true,false));
                                });
                                $.unique(targets);
                                //Effect
                                targets.forEach(function(chara){
                                    //Guard from range-attack enemy
                                    chara.addBuffer(bufferObj);
                                });
                                Game.commandTimeout(darkSwarm,1000);
                                Magic.DarkSwarm._timer=true;
                            }
                            else Magic.DarkSwarm._timer=false;
                        };
                        //If not calculating, execute
                        if (!Magic.DarkSwarm._timer) darkSwarm();
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Plague:{
        name:"Plague",
        cost:{magic:150},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Plague
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //Plague animation and sound
                        var anime=new Animation.Plague({x:location.x,y:location.y});
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Ensnare.wav').play();
                        //Get in range enemy units
                        var targets=Game.getInRangeOnes(location.x,location.y,[64*1.2>>0,64*1.2>>0],myself.team.toString(),true);
                        //Effect:HP losing every seconds
                        var bufferObj={
                            recover:function(){
                                if (this.life>0) this.life-=25;//Refresh every 1 seconds
                                if (this.life<=0) this.life=1;
                            }
                        };
                        targets.forEach(function(chara){
                            //Buffer flag
                            if (chara.buffer.Plague) return;//Not again
                            chara.buffer.Plague=true;
                            //HP losing every seconds
                            chara.addBuffer(bufferObj);
                            //Green effect
                            new Animation.RedEffect({team:myself.team,target:chara,callback:function(){
                                if (chara.status!='dead' && chara.buffer.Plague){
                                    //Restore
                                    if (chara.removeBuffer(bufferObj)) delete chara.buffer.Plague;
                                }
                            }});
                        });
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    //Terran
    StimPacks:{
        name:"StimPacks",
        enabled:false,
        spell:function(){
            //Rage flag for units to decide stim or not
            if (!this.buffer.Stim) {
                //Cause damage
                this.life-=10;
                if (this.life<1) this.life=1;
                //Stim sound
                if (this.insideScreen()) new Audio(Game.CDN+'bgm/Magic.StimPacks.wav').play();
                //Effect
                var bufferObj={
                    attackInterval:800,
                    speed:14
                };
                this.addBuffer(bufferObj);
                this.buffer.Stim=true;
                //Will only be stim for 15sec
                var myself=this;
                Game.commandTimeout(function(){
                    if (myself.status!='dead' && myself.buffer.Stim){
                        //Special effect is over
                        if (myself.removeBuffer(bufferObj)) delete myself.buffer.Stim;
                    }
                },15000);
            }
        }
    },
    PersonalCloak:{
        name:"PersonalCloak",
        cost:{magic:25},
        enabled:false,
        spell:function(){
            //Will only be invisible when having magic
            if (!this.cloakBuffer) {
                var bufferObj={
                    //Magic losing every seconds
                    recover:function(){
                        //Should not forbid old recover
                        this.constructor.prototype.recover.call(this);
                        //Losing magic
                        if (this.magic>0 && !Cheat.gathering) this.magic--;
                        if (this.magic<=0) {
                            //Might be negative float
                            this.magic=0;
                            //Special effect is over
                            if (this.removeBuffer(bufferObj)) {
                                delete this.buffer.Cloak;
                                delete this.cloakBuffer;
                                //Recover icons and apply callbacks
                                delete this.items;
                                if (Game.selectedUnit==this) Button.reset();
                            }
                        }
                    }
                };
                for (var N=0;N<Game.playerNum;N++){
                    bufferObj['isInvisible'+N]=true;
                }
                //Effect
                this.buffer.Cloak=true;
                this.addBuffer(bufferObj);
                this.cloakBuffer=bufferObj;
            }
            //Change icon
            var items=_$.clone(this.items);
            for (var N in items){
                if (items[N].name=="Cloak") items[N].name="Decloak";
            }
            this.items=items;
            //Apply callback
            if (Game.selectedUnit==this) Button.reset();
        }
    },
    Decloak:{
        name:"Decloak",
        enabled:true,
        spell:function(){
            if (this.cloakBuffer) {
                //Special effect is over
                if (this.removeBuffer(this.cloakBuffer)) {
                    delete this.buffer.Cloak;
                    delete this.cloakBuffer;
                }
            }
            //Recover icons and apply callbacks
            delete this.items;
            if (Game.selectedUnit==this) Button.reset();
        }
    },
    Lockdown:{
        name:"Lockdown",
        cost:{magic:100},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target enemy unit, machine unit
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true,null,function(chara){
                    return chara.isMachine() && !chara.buffer.Lockdown;
                });
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to fire lockdown
                    this.moveToward(target,300,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Fire lockdown missile
                            var bullet=new Bullets.SingleMissile({
                                from:myself,
                                to:target,
                                damage:0
                            });
                            bullet.fire(function(){
                                //Lockdown effect
                                if (target.status!='dead'){
                                    //Stop target
                                    if (target.stopAttack) target.stopAttack();
                                    target.dock();
                                    var bufferObj={
                                        moveTo:function(){},
                                        moveToward:function(){},
                                        attack:function(){}
                                    };
                                    //Freeze status
                                    target.addBuffer(bufferObj);
                                    target.stop();
                                    //Flag
                                    target.buffer.Lockdown=true;
                                    //Lockdown animation, show hidden frames first
                                    var anime=new Animation.Lockdown({target:target,callback:function(){
                                        //Restore after 60 seconds
                                        if (target.status!='dead' && target.buffer.Lockdown){
                                            if (target.removeBuffer(bufferObj)) delete target.buffer.Lockdown;
                                            target.dock();
                                        }
                                    }});
                                    anime.action=7;
                                    //Lockdown sound
                                    if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Lockdown.wav').play();
                                }
                            });
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    NuclearStrike:{
        name:"NuclearStrike",
        enabled:1,//Different copies for different team
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Nuclear bomb
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    //Fire Nuclear bomb
                    var bullet=new Bullets.NuclearBomb({
                        from:{x:location.x,y:location.y-250},
                        to:{x:location.x,y:location.y}
                    });
                    //Fire Nuclear bomb with callback
                    bullet.fire(function(){
                        //Nuclear bomb effect, should earlier than bomb animation draw
                        //Get in range charas, no matter ours or enemies
                        var targets=Game.getInRangeOnes(location.x,location.y,175);
                        targets.forEach(function(chara){
                            //Cause 500 damage
                            chara.life-=500;
                            if (chara.life<=0) chara.die();
                        });
                        //Nuclear animation
                        var anime=new Animation.NuclearStrike({x:location.x,y:location.y});
                        //Nuclear sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.NuclearStrike.wav').play();
                        //Use one our bomb
                        if (Magic.NuclearStrike.enabled>0 && myself.team==Game.team) {
                            Magic.NuclearStrike.enabled--;
                            if (Game.selectedUnit==myself) Button.refreshButtons();
                        }
                    });
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Heal:{
        name:"Heal",
        cost:{magic:1},
        credit:true,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                var myself=this;
                //Heal our units on ground, animal unit
                var target=Game.getSelectedOne(location.x,location.y,this.team,true,false,function(chara){
                    return !(chara.isMachine());
                });
                if (target instanceof Gobj){
                    this.targetLock=true;
                    //Move toward target to heal him
                    this.moveToward(target,target.radius()+10,function(){
                        //Consume magic to heal injured target
                        if (myself.magic && target.life<target.get('HP')) {
                            //Heal target
                            target.life+=10;
                            if (target.life>target.get('HP')) target.life=target.get('HP');
                            myself.magic--;
                            //Heal action and sound
                            if (myself.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Heal.wav').play();
                        }
                        //# Need heal target automatically until it becomes healthy
                    });
                }
                delete this.creditBill;//else
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Restoration:{
        name:"Restoration",
        cost:{magic:50},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Restore all units
                var target=Game.getSelectedOne(location.x,location.y,null,true);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to restore unit
                    this.moveToward(target,140,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Restore effect
                            var anime=new Animation.Restoration({target:target});
                            //Restore sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Restoration.wav').play();
                            //Remove all bufferObjs
                            $.extend([],target.bufferObjs).forEach(function(bufferObj){
                                target.removeBuffer(bufferObj);
                            });
                            //Remove remaining buffer
                            if (target.cloakBuffer) delete target.cloakBuffer;
                            if (target.purpleBuffer) delete target.purpleBuffer;
                            //Delete all buffer animations on target
                            var bufferAnimations=['StasisField','Lockdown','Plague','Ensnare','PurpleEffect','RedEffect','GreenEffect','DefensiveMatrix','MaelStorm','Irradiate'];
                            $.extend([],Burst.allEffects).forEach(function(effect){
                                if (effect.target==target && bufferAnimations.some(function(name){return (effect instanceof Animation[name]);}))
                                    Burst.allEffects.splice(Burst.allEffects.indexOf(effect),1);
                            });
                            //Delete all buffers, some cannot delete
                            if (target.buffer.Hallucination) target.buffer={Hallucination:true};
                            else target.buffer={};
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    OpticalFlare:{
        name:"OpticalFlare",
        cost:{magic:75},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Shoot enemy unit
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to fire optical flare
                    this.moveToward(target,this.get('sight'),function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Fire optical flare
                            var bullet=new Bullets.VultureBall({
                                from:myself,
                                to:target,
                                damage:0
                            });
                            bullet.fire(function(){
                                //Effect
                                var bufferObj={
                                    sight:target.radius()
                                };
                                if (target.status!='dead') target.addBuffer(bufferObj);
                                //Buffer flag
                                target.buffer.Blind=true;
                            });
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    SpiderMines:{
        name:"SpiderMines",
        enabled:false,
        spell:function(location){}
    },
    SeigeMode:{
        name:"SeigeMode",
        enabled:false,
        spell:function(){}
    },
    Cloak:{
        name:"Cloak",
        cost:{magic:25},
        enabled:false,
        spell:function(){
            Magic.PersonalCloak.spell.call(this);
        }
    },
    DefensiveMatrix:{
        name:"DefensiveMatrix",
        cost:{magic:100},
        credit:true,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Restore our units
                var target=Game.getSelectedOne(location.x,location.y,this.team,true,null,function(chara){
                    return !chara.buffer.DefensiveMatrix;//Not again
                });
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to activate defensive matrix
                    this.moveToward(target,250,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Defensive matrix animation
                            var anime=new Animation.DefensiveMatrix({target:target,callback:function(){
                                //Restore after 60 seconds, if no restoration executed, or interrupted by enemy attack
                                if (target.status!='dead' && anime.status!='dead' && target.buffer.DefensiveMatrix){
                                    if (target.removeBuffer(bufferObj)) delete target.buffer.DefensiveMatrix;
                                }
                            }});
                            //DefensiveMatrix sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.DefensiveMatrix.wav').play();
                            //Defensive matrix effect: absorb 250 damage
                            var matrixHP=250;
                            var bufferObj={
                                calculateDamageBy:function(enemyObj){
                                    var damage;
                                    if (enemyObj instanceof Gobj){
                                        var enemyAttackType=enemyObj.attackType;
                                        if (!enemyAttackType && enemyObj.attackMode){
                                            enemyAttackType=(this.isFlying)?enemyObj.attackMode.flying.attackType:enemyObj.attackMode.ground.attackType;
                                        }
                                        damage=enemyObj.get('damage')*Unit.attackMatrix[enemyAttackType][this.unitType];
                                    }
                                    else damage=enemyObj;
                                    //Consume matrixHP
                                    matrixHP-=damage;
                                    //Fully absorb damage if matrixHP still remain
                                    if (matrixHP>0) return 0;
                                    else {
                                        anime.die();
                                        //Release remaining damage
                                        return -matrixHP;
                                    }
                                }
                            };
                            //Apply effect
                            target.addBuffer(bufferObj);
                            //Buffer flag
                            target.buffer.DefensiveMatrix=true;
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    EMPShockwave:{
        name:"EMPShockwave",
        cost:{magic:100},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Plague
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //Fire EMPShockwave
                        var bullet=new Bullets.SingleMissile({
                            from:myself,
                            to:{x:location.x,y:location.y}
                        });
                        //Fire EMPShockwave bullet with callback
                        bullet.fire(function(){
                            //EMP shockwave animation
                            var anime=new Animation.EMPShockwave({x:location.x,y:location.y});
                            //EMPShockwave sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.EMPShockwave.wav').play();
                            //Get in range enemies
                            var targets=Game.getInRangeOnes(location.x,location.y,[90*1.2>>0,74*1.2>>0],myself.team.toString());
                            //Effect
                            targets.forEach(function(chara){
                                //Losing all shield and magic
                                if (chara.shield) chara.shield=0;
                                if (chara.magic) chara.magic=0;
                            });
                        });
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Irradiate:{
        name:"Irradiate",
        cost:{magic:75},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target enemy unit, animal unit
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true,null,function(chara){
                    return !(chara.isMachine()) && !chara.buffer.Irradiate;
                });
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    var irradiate=function(chara){
                        //Irradiate effect
                        var anime=new Animation.Irradiate({target:chara,callback:function(){
                            //Restore after 25 seconds, dealing 250 damage
                            if (chara.status!='dead' && chara.buffer.Irradiate){
                                if (chara.removeBuffer(bufferObj)) delete chara.buffer.Irradiate;
                                delete chara.allFrames['dock'];
                                chara.dock();
                            }
                        }});
                        //Irradiate sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Irradiate.wav').play();
                        //Losing life over time and walk around
                        chara.buffer.Irradiate=true;//Flag
                        var bufferObj={
                            recover:function(){
                                //Get in range enemies and infect
                                Game.getInRangeOnes(chara.posX(),chara.posY(),50,myself.team.toString(),true,null,function(chara){
                                    return !(chara.isMachine()) && !chara.buffer.Irradiate;
                                }).forEach(function(chara){
                                    irradiate(chara);
                                });
                                if (this.life>0) this.life-=10;//Refresh every 1 seconds
                                if (this.life<=0) {
                                    this.die();
                                }
                            },
                            dock:Neutral.Bengalaas.prototype.dock
                        };
                        chara.addBuffer(bufferObj);
                        chara.dock();
                    };
                    //Move toward target to spell Irradiate
                    this.moveToward(target,300,function(){
                        if (Resource.payCreditBill.call(myself)){
                            irradiate(target);
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Yamato:{
        name:"Yamato",
        cost:{magic:150},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Shoot all enemy
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString());
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to fire yamato
                    this.moveToward(target,this.get('sight'),function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Fire yamato
                            var bullet=new Bullets.Yamato({
                                from:myself,
                                to:target,
                                damage:250
                            });
                            bullet.fire();
                            if (myself.insideScreen()) new Audio(Game.CDN+'bgm/HeroCruiser.attack.wav').play();
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    ScannerSweep:{
        name:"ScannerSweep",
        cost:{magic:50},
        credit:true,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                if (Resource.payCreditBill.call(this)){
                    //ScannerSweep animation
                    var anime=new Animation.ScannerSweep({x:location.x,y:location.y,team:this.team});
                    //ScannerSweep sound
                    if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.ScannerSweep.wav').play();
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    ArmNuclearSilo:{
        name:"ArmNuclearSilo",
        cost:{
            mine:200,
            gas:200,
            man:8,
            time:600
        },
        enabled:true,
        spell:function(){
            Magic.NuclearStrike.enabled++;
        }
    },
    LiftOff:{
        name:"LiftOff",
        enabled:false,
        spell:function(){}
    },
    Land:{
        name:"Land",
        enabled:false,
        spell:function(location){}
    },

    //Protoss
    PsionicStorm:{
        name:"PsionicStorm",
        cost:{magic:75},
        credit:true,
        _timer:false,
        speller:{},
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire PsionicStorm
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //PsionicStorm animation
                        var anime=new Animation.PsionicStorm({x:location.x,y:location.y});
                        //PsionicStorm sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.PsionicStorm.wav').play();
                        //PsionicStorm effect
                        var targets=[];
                        Magic.PsionicStorm.speller=this;
                        //Psionic storm wave
                        var stormWave=function(){
                            targets=[];
                            //Check if any psionic storm exist
                            var psionicStorms=Burst.allEffects.filter(function(effect){
                                return effect instanceof Animation.PsionicStorm;
                            });
                            if (psionicStorms.length) {
                                //Get targets inside all of swarms
                                psionicStorms.forEach(function(storm){
                                    //Update buffer on enemy units inside storm
                                    targets=targets.concat(Game.getInRangeOnes(storm.posX(),storm.posY(),[94*1.2>>0,76*1.2>>0],null,true));
                                });
                                $.unique(targets);
                                //Effect
                                targets.forEach(function(chara){
                                    //Deal damage
                                    chara.getDamageBy(16);
                                    //Don't move, but will die if no life
                                    chara.reactionWhenAttackedBy(Magic.PsionicStorm.speller,true);
                                });
                                Game.commandTimeout(stormWave,1000);
                                Magic.PsionicStorm._timer=true;
                            }
                            else Magic.PsionicStorm._timer=false;
                        };
                        //If not calculating, execute
                        if (!Magic.PsionicStorm._timer) stormWave();
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Hallucination:{
        name:"Hallucination",
        cost:{magic:100},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target all units
                var target=Game.getSelectedOne(location.x,location.y,null,true);
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to create 2 hallucinations
                    this.moveToward(target,245,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Hallucination effect
                            var anime=new Animation.Hallucination({target:target});
                            //Hallucination sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Hallucination.wav').play();
                            //Initial
                            var halluDamage, halluAttackMode, Hallucinations=[];
                            if (target.attack!=null) {
                                if (target.attackMode){
                                    halluAttackMode=_$.clone(target.attackMode);
                                    halluAttackMode.flying.damage=0;
                                    halluAttackMode.ground.damage=0;
                                }
                                else halluDamage=0;
                            }
                            //Combine temp constructor for hallucination
                            var halluConstructor=target.constructor.extends({
                                constructorPlus:function(props){},
                                prototypePlus:{
                                    //Override
                                    damage:halluDamage,//Might be undefined
                                    attackMode:halluAttackMode,//Might be undefined
                                    cost:{man:0},
                                    items:null,
                                    dieEffect:Burst.HallucinationDeath
                                }
                            });
                            for (var n=0;n<2;n++){
                                var hallucination=new halluConstructor({x:target.posX(),y:target.posY(),team:myself.team});
                                Hallucinations.push(hallucination);
                            }
                            //Will disappear after 180 seconds
                            Game.commandTimeout(function(){
                                Hallucinations.forEach(function(chara){
                                    chara.die();
                                });
                            },180000);
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Feedback:{
        name:"Feedback",//ManaBurn
        cost:{magic:50},
        credit:true,
        enabled:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Target enemy unit, magician
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString(),true,null,function(chara){
                    return chara.MP;
                });
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to spell Feedback
                    this.moveToward(target,300,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Feedback effect
                            var anime=new Animation.Feedback({target:target});
                            //Feedback sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Feedback.wav').play();
                            //Deal damage same as its magic, lose all magic
                            target.getDamageBy(target.magic);
                            target.reactionWhenAttackedBy(myself);
                            target.magic=0;
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    MindControl:{
        name:"MindControl",
        cost:{magic:150},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Can control all enemy
                var target=Game.getSelectedOne(location.x,location.y,this.team.toString());
                if (target instanceof Gobj){
                    var myself=this;
                    this.targetLock=true;
                    //Move toward target to mind control it
                    this.moveToward(target,280,function(){
                        if (Resource.payCreditBill.call(myself)){
                            //Mind control animation
                            var anime=new Animation.MindControl({target:target});
                            //MindControl sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.MindControl.wav').play();
                            //Control and tame enemy
                            target.team=myself.team;
                            //Order ours not to attack it anymore
                            Unit.allUnits.concat(Building.allBuildings).forEach(function(chara){
                                if (chara.target==target) chara.stopAttack();
                            });
                            //Freeze target
                            if (target.stopAttack) target.stopAttack();
                            target.dock();
                        }
                    });
                }
                //Empty object {}, cannot spell
                else delete this.creditBill;
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    MaelStorm:{
        name:"MaelStorm",
        cost:{magic:100},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire MaelStorm
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //MaelStorm spell animation
                        var anime=new Animation.MaelStormSpell({x:location.x,y:location.y,callback:function(){
                            //Get in range enemy units, animal
                            var targets=Game.getInRangeOnes(location.x,location.y,[64*1.2>>0,64*1.2>>0],myself.team.toString(),true,null,function(chara){
                                return !(chara.isMachine()) && !chara.buffer.MaelStorm;
                            });
                            //Freeze target
                            var bufferObj={
                                moveTo:function(){},
                                moveToward:function(){},
                                attack:function(){}
                            };
                            //Effect
                            targets.forEach(function(target){
                                target.dock();
                                if (target.stopAttack) target.stopAttack();
                                target.addBuffer(bufferObj);
                                //Buffer flag
                                target.buffer.MaelStorm=true;
                                //Mael storm effect
                                new Animation.MaelStorm({target:target,callback:function(){
                                    //Restore in 18 seconds
                                    if (target.status!='dead' && target.buffer.MaelStorm){
                                        if (target.removeBuffer(bufferObj)) delete target.buffer.MaelStorm;
                                    }
                                }});
                            });
                            //MaelStorm sound
                            if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.MaelStorm.wav').play();
                        }});
                        //MaelStormSpell sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.StasisField.wav').play();
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    Scarab:{
        name:"Scarab",
        enabled:true,
        cost:{
            mine:15,
            time:70
        },
        spell:function(){
            this.scarabNum++;
            //Refresh to disabled
            if (Game.selectedUnit==this) Button.refreshButtons();
        }
    },
    Interceptor:{
        name:"Interceptor",
        enabled:true,
        cost:{
            mine:25,
            time:200
        },
        spell:function(){
            //Build interceptor
            this.continuousAttack.count++;
            //Refresh to disabled
            if (Game.selectedUnit==this) Button.refreshButtons();
        }
    },
    Recall:{
        name:"Recall",
        cost:{magic:150},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                var myself=this;
                if (Resource.payCreditBill.call(myself)){
                    //Recall animation
                    var anime=new Animation.Recall({x:location.x,y:location.y,callback:function(){
                        //Get in range our units
                        var targets=Game.getInRangeOnes(location.x,location.y,50*1.2>>0,myself.team,true);
                        //Recall animation again
                        var animeII=new Animation.Recall({x:myself.posX(),y:myself.posY()});
                        //Recall sound
                        if (animeII.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Recall.wav').play();
                        //Effect
                        targets.forEach(function(chara){
                            //Relocate targets
                            chara.x=myself.x;
                            chara.y=myself.y;
                        });
                    }});
                    //Recall sound
                    if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.Recall.wav').play();
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    StasisField:{
        name:"StasisField",
        cost:{magic:100},
        credit:true,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire StasisField
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //Spell StasisField animation
                        var anime=new Animation.StasisFieldSpell({x:location.x,y:location.y,callback:function(){
                            //Get in range units
                            var targets=Game.getInRangeOnes(location.x,location.y,64*1.2>>0,null,true);
                            //Effect:Freeze target
                            var bufferObj={
                                moveTo:function(){},
                                moveToward:function(){},
                                attack:function(){},
                                getDamageBy:function(){}
                            };
                            targets.forEach(function(target){
                                if (target.status!='dead'){
                                    //Buffer flag
                                    if (target.buffer.StasisField) return;//Not again
                                    target.buffer.StasisField=true;
                                    //Effect
                                    target.dock();
                                    if (target.stopAttack) target.stopAttack();
                                    //Freeze target
                                    target.addBuffer(bufferObj);
                                    //Stasis status
                                    target.stop();
                                    //Stasis field animation
                                    new Animation.StasisField({target:target,callback:function(){
                                        //Restore in 30 seconds
                                        if (target.status!='dead' && target.buffer.StasisField){
                                            if (target.removeBuffer(bufferObj)) {
                                                delete target.buffer.StasisField;
                                                target.dock();
                                            }
                                        }
                                    }});
                                }
                            });
                        }});
                        //StasisField sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.StasisField.wav').play();
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    DisruptionWeb:{
        name:"DisruptionWeb",
        cost:{magic:125},
        credit:true,
        _timer:false,
        enabled:false,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire DisruptionWeb
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,this.get('sight'),function(){
                    if (Resource.payCreditBill.call(myself)){
                        //DisruptionWeb animation
                        var anime=new Animation.DisruptionWeb({x:location.x,y:location.y});
                        //DisruptionWeb sound
                        if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.DisruptionWeb.wav').play();
                        //Dynamic update targets every 1 second
                        var targets=[];
                        //Effect:Disable target attack
                        var bufferObj={
                            attack:function(){}
                        };
                        //Disruption web wave
                        var disruptionWeb=function(){
                            //Clear old units buffer
                            targets.forEach(function(chara){
                                chara.removeBuffer(bufferObj);
                            });
                            targets=[];
                            var disruptionWebs=Burst.allEffects.filter(function(effect){
                                return effect instanceof Animation.DisruptionWeb;
                            });
                            //Check if any disruption web exist
                            if (disruptionWebs.length) {
                                //Get targets inside all of webs
                                disruptionWebs.forEach(function(web){
                                    //Update buffer on enemy ground units inside web
                                    targets=targets.concat(Game.getInRangeOnes(web.posX(),web.posY(),[76*1.2>>0,56*1.2>>0],null,true,false));
                                });
                                $.unique(targets);
                                //Effect
                                targets.forEach(function(chara){
                                    //Cannot attack
                                    if (chara.attack) {
                                        chara.stopAttack();
                                        chara.addBuffer(bufferObj);
                                    }
                                });
                                Game.commandTimeout(disruptionWeb,1000);
                                Magic.DisruptionWeb._timer=true;
                            }
                            else Magic.DisruptionWeb._timer=false;
                        };
                        //If not calculating, execute
                        if (!Magic.DisruptionWeb._timer) disruptionWeb();
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    RechargeShields:{
        name:"RechargeShields",
        enabled:true,
        needLocation:true,
        spell:function(location){
            //Has location callback info or nothing
            if (location){
                var myself=this;
                //Restore our units, have shield and in sight
                var target=Game.getSelectedOne(location.x,location.y,this.team,true,null,function(chara){
                    return chara.SP && myself.canSee(chara);
                });
                if (target instanceof Gobj){
                    //Recharge shield animation
                    var anime=new Animation.RechargeShields({target:target});
                    //Recharge shield sound
                    if (anime.insideScreen()) new Audio(Game.CDN+'bgm/Magic.RechargeShields.wav').play();
                    var hurt=target.get('SP')-target.shield;
                    var needMagic=(hurt/2+0.5)>>0;
                    //Remaining magic is sufficient
                    if (this.magic>needMagic) {
                        //Full recover
                        target.shield=target.get('SP');
                        this.magic-=needMagic;
                    }
                    //Remaining magic is not enough
                    else {
                        //Use all remaining magic
                        target.shield+=(this.magic*2);
                        this.magic=0;
                    }
                }
                else {
                    //Cannot reach target, pError
                }
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.owner=this;
                $('div.GameLayer').attr('status','button');
            }
        }
    },
    /********RPG level: Tower Defense********/
    CleanScreen:{
        name:"CleanScreen",
        cost:{
            mine:200
        },
        spell:function(){
            //Kill all enemies
            Cheat.execute('fuck your mother');
        }
    }
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var Map={
    currentMap:'Switchback',//By default
    ready:false,
    offsetX:0,
    offsetY:0,
    speed:40,
    triggerMargin:20,
    //To synchronize drawing map and units, will not refresh immediately
    needRefresh:false,
    fogFlag:true,
    fogUnits:[],//Units need to draw fog on screen
    allUnits:[],//Units need to draw fog on minimap
    batchSize:0,//Draw fog by each batch
    miniCxt:$('canvas[name="mini_map"]')[0].getContext('2d'),
    fogCanvas:document.createElement('canvas'),
    shadowCanvas:document.createElement('canvas'),//Pre-render for fog shadow
    insideStroke:{
        width:0,
        height:0
    },
    //Init map
    setCurrentMap:function(name){
        Map.currentMap=name;
        $('canvas[name="mini_map"]').attr('class',name);
        //Init inside stroke size
        Map.insideStroke.width=(130*Game.HBOUND/Map.getCurrentMap().width)>>0;
        Map.insideStroke.height=(130*Game.VBOUND/Map.getCurrentMap().height)>>0;
        //Init fog relative
        Map.fogCxt=Map.fogCanvas.getContext('2d');
        Map.fogCanvas.width=130;
        Map.fogCanvas.height=Math.round(130*Map.getCurrentMap().height/Map.getCurrentMap().width);
        Map.fogCanvas.ratio=130/Map.getCurrentMap().width;
        Map.shadowCanvas.width=Map.shadowCanvas.height=100;
        Map.shadowCxt=Map.shadowCanvas.getContext('2d');
        //Prepared fog shadow for quick render
        var radial=Map.shadowCxt.createRadialGradient(50,50,25,50,50,50);
        radial.addColorStop(0,'rgba(0,0,0,1)');
        radial.addColorStop(1,'rgba(0,0,0,0)');
        Map.shadowCxt.fillStyle=radial;
        Map.shadowCxt.beginPath();
        Map.shadowCxt.arc(50,50,50,0,Math.PI*2);
        Map.shadowCxt.fill();
        //Map is ready after current map set
        Map.ready=true;
    },
    getCurrentMap:function(){
        return sourceLoader.sources['Map_'+Map.currentMap];
    },
    //Draw interface call
    drawFogAndMinimap:function(){
        if (Map.fogFlag){
            Map.refreshFog();
            //Draw fog on main map
            var ratio=Map.fogCanvas.ratio;
            Game.fogCxt.clearRect(0,0,Game.HBOUND,Game.VBOUND);
            Game.fogCxt.drawImage(Map.fogCanvas,Math.round(Map.offsetX*ratio),Math.round(Map.offsetY*ratio),
                Math.round(Game.HBOUND*ratio),Math.round(Game.VBOUND*ratio),0,0,Game.HBOUND,Game.VBOUND);
        }
        //Draw mini-map
        Map.drawMiniMap();
    },
    //Used by drawFogAndMinimap
    refreshFog:function(){
        //Reset composite operation
        Map.fogCxt.globalCompositeOperation='source-over';
        //Brush black fog to clean old fog
        Map.fogCxt.fillStyle='rgba(0,0,0,1)';
        Map.fogCxt.fillRect(0,0,Map.fogCanvas.width,Map.fogCanvas.height);
        //Other things have sight
        var parasitedEnemies=Unit.allEnemyUnits().filter(function(chara){
            return chara.buffer.Parasite==Game.team;
        });
        var scannerSweeps=Burst.allEffects.filter(function(anime){
            return anime.constructor.name=="ScannerSweep" && anime.team==Game.team;
        });
        var addInObjs=parasitedEnemies.concat(scannerSweeps);
        //Clear fog
        Map.fogCxt.globalCompositeOperation='destination-out';
        //Initial
        Map.allUnits=Unit.allOurUnits().concat(Building.ourBuildings()).concat(addInObjs);
        //Draw fog
        Map.fogCxt.fillStyle='rgba(0,0,0,1)';
        var ratio=Map.fogCanvas.ratio;
        Map.allUnits.forEach(function(chara){
            //Clear fog on screen for our units inside screen
            var centerX=Math.round(chara.posX()*ratio);
            var centerY=Math.round(chara.posY()*ratio);
            var radius=Math.round(chara.get('sight')*ratio<<1);
            Map.fogCxt.drawImage(Map.shadowCanvas,0,0,100,100,centerX-radius,centerY-radius,radius<<1,radius<<1);
        });
    },
    //Used by drawFogAndMinimap: draw red&green block and white stroke
    drawMiniMap:function(){
        //Selected map size
        var mapWidth=Map.getCurrentMap().width;
        var mapHeight=Map.getCurrentMap().height;
        //Clear mini-map
        Map.miniCxt.clearRect(0,0,130,130);
        //Re-draw mini-map points
        var miniX,miniY,rectSize;
        Building.allBuildings.concat(Unit.allUnits).forEach(function(chara){
            //Filter out invisible enemy
            if (chara['isInvisible'+Game.team] && chara.isEnemy()) return;
            miniX=(130*chara.x/mapWidth)>>0;
            miniY=(130*chara.y/mapHeight)>>0;
            Map.miniCxt.fillStyle=(chara.isEnemy())?'red':'lime';
            rectSize=(chara instanceof Building)?4:3;
            Map.miniCxt.fillRect(miniX,miniY,rectSize,rectSize);
        });
        //Draw fog on mini-map
        if (Map.fogFlag) Map.miniCxt.drawImage(Map.fogCanvas,0,0,Map.fogCanvas.width,Map.fogCanvas.height,0,0,130,130);
        //Re-draw inside stroke
        Map.miniCxt.strokeStyle='white';
        Map.miniCxt.lineWidth=2;
        Map.miniCxt.strokeRect((130*Map.offsetX/mapWidth)>>0,(130*Map.offsetY/mapHeight)>>0,Map.insideStroke.width,Map.insideStroke.height);
    },
    drawMud:function(){
        var _increments=[[0,1],[-1,0],[0,-1],[1,0]];
        var mudRadius=120;
        var mudIncrements=_$.mapTraverse(_increments,function(x){
            return x*mudRadius/2;
        });
        Game.backCxt.save();
        Game.backCxt.beginPath();
        //Create fill style for mud
        var mudPattern=Game.backCxt.createPattern(sourceLoader.sources['Mud'],"repeat");
        Game.backCxt.fillStyle=mudPattern;
        Building.allBuildings.filter(function(chara){
            return (chara instanceof Building.ZergBuilding) && !chara.noMud && chara.insideScreen();
        }).forEach(function(chara){
            var centerX=chara.posX()-Map.offsetX;
            var centerY=chara.posY()-Map.offsetY;
            var pos=[centerX+mudRadius,centerY-mudRadius];
            Game.backCxt.moveTo(pos[0],pos[1]);
            for(var M=0,angle=-Math.PI/4;M<4;M++,angle+=Math.PI/2){
                for(var N=0;N<5;N++){
                    Game.backCxt.arc(pos[0],pos[1],mudRadius/4,angle,angle+Math.PI/2);
                    if (N<4) {
                        pos[0]+=mudIncrements[M][0];
                        pos[1]+=mudIncrements[M][1];
                    }
                }
            }
        });
        //Stroke edge clearly
        Game.backCxt.strokeStyle="#212";
        Game.backCxt.lineWidth=3;
        Game.backCxt.stroke();
        //Fill mud
        Game.backCxt.fill();
        Game.backCxt.restore();
    },
    drawBg:function(){
        //Clear background
        Game.backCxt.clearRect(0,0,Game.HBOUND,Game.VBOUND);
        //Draw map as background
        Game.backCxt.drawImage(Map.getCurrentMap(),Map.offsetX,Map.offsetY,Game.HBOUND,Game.VBOUND-Game.infoBox.height+5,
            0,0,Game.HBOUND,Game.VBOUND-Game.infoBox.height+5);
        //Draw mud for ZergBuildings
        Map.drawMud();
    },
    refresh:function(direction){
        var edgeX=Map.getCurrentMap().width-Game.HBOUND;
        var edgeY=Map.getCurrentMap().height-Game.VBOUND+Game.infoBox.height-5;
        var onlyMap;
        switch (direction){
            case "LEFT":
                Map.offsetX-=Map.speed;
                if (Map.offsetX<0) Map.offsetX=0;
                break;
            case "RIGHT":
                Map.offsetX+=Map.speed;
                if (Map.offsetX>edgeX) Map.offsetX=edgeX;
                break;
            case "TOP":
                Map.offsetY-=Map.speed;
                if (Map.offsetY<0) Map.offsetY=0;
                break;
            case "BOTTOM":
                Map.offsetY+=Map.speed;
                if (Map.offsetY>edgeY) Map.offsetY=edgeY;
                break;
            case "MAP":
                onlyMap=true;
                break;
        }
        Map.drawBg();
        //Need re-calculate fog when screen moves
        if (!onlyMap) Map.drawFogAndMinimap();
    },
    clickHandler:function(event){
        //Mouse at (clickX,clickY)
        var clickX=event.pageX-$('canvas[name="mini_map"]').offset().left;
        var clickY=event.pageY-$('canvas[name="mini_map"]').offset().top;
        //Relocate map center
        Map.relocateAt(Map.getCurrentMap().width*clickX/130,Map.getCurrentMap().height*clickY/130);
    },
    dblClickHandler:function(event){
        //Mouse at (clickX,clickY)
        var clickX=event.pageX-$('canvas[name="mini_map"]').offset().left;
        var clickY=event.pageY-$('canvas[name="mini_map"]').offset().top;
        //Map (clickX,clickY) to position (mapX,mapY) on map
        var mapX=Map.getCurrentMap().width*clickX/130;
        var mapY=Map.getCurrentMap().height*clickY/130;
        //Move selected units to (mapX,mapY)
        Unit.allUnits.filter(function(chara){
            return (chara.team==Game.team) && chara.selected;
        }).forEach(function(chara){
            if (chara.attack) chara.stopAttack();
            chara.targetLock=true;
            chara.moveTo(mapX,mapY);
        });
    },
    relocateAt:function(centerX,centerY){
        //Get map edge
        var edgeX=Map.getCurrentMap().width-Game.HBOUND;
        var edgeY=Map.getCurrentMap().height-Game.VBOUND+Game.infoBox.height-5;
        //Map (centerX,centerY) to position (offsetX,offsetY) on top-left in map
        var offsetX=(centerX-Game.HBOUND/2)>>0;
        if (offsetX<0) offsetX=0;
        if (offsetX>edgeX) offsetX=edgeX;
        var offsetY=(centerY-(Game.VBOUND-Game.infoBox.height+5)/2)>>0;
        if (offsetY<0) offsetY=0;
        if (offsetY>edgeY) offsetY=edgeY;
        //Relocate map
        Map.offsetX=offsetX;
        Map.offsetY=offsetY;
        Map.needRefresh=true;//For synchronize
    }
};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

/******* Define Neutral units *******/
var Neutral={};
Neutral.Ragnasaur=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Ragnasaur",
        imgPos: {
            moving: {
                left: [
                    [26,26,26,26,26,26,26,26,26],[130,130,130,130,130,130,130,130,130],
                    [234,234,234,234,234,234,234,234,234],[338,338,338,338,338,338,338,338,338],
                    [442,442,442,442,442,442,442,442,442],[546,546,546,546,546,546,546,546,546],
                    [650,650,650,650,650,650,650,650,650],[754,754,754,754,754,754,754,754,754],
                    [858,858,858,858,858,858,858,858,858],[1066,1066,1066,1066,1066,1066,1066,1066,1066],
                    [1170,1170,1170,1170,1170,1170,1170,1170,1170],[1274,1274,1274,1274,1274,1274,1274,1274,1274],
                    [1378,1378,1378,1378,1378,1378,1378,1378,1378],[1482,1482,1482,1482,1482,1482,1482,1482,1482],
                    [1586,1586,1586,1586,1586,1586,1586,1586,1586],[1690,1690,1690,1690,1690,1690,1690,1690,1690]
                ],
                top: [
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858],
                    [26,130,234,338,442,546,650,754,858],[26,130,234,338,442,546,650,754,858]
                ]
            }
        },
        width: 52,//104N+26
        height: 52,
        frame: {
            moving: 9,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:175,
        dieEffect:Burst.RagnasaurDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});
Neutral.Rhynsdon=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Rhynsdon",
        imgPos: {
            moving: {
                left: [
                    [26,26,26,26,26,26,26,26,26,26,26],[130,130,130,130,130,130,130,130,130,130,130],
                    [234,234,234,234,234,234,234,234,234,234,234],[338,338,338,338,338,338,338,338,338,338,338],
                    [442,442,442,442,442,442,442,442,442,442,442],[546,546,546,546,546,546,546,546,546,546,546],
                    [650,650,650,650,650,650,650,650,650,650,650],[754,754,754,754,754,754,754,754,754,754,754],
                    [858,858,858,858,858,858,858,858,858,858,858],[1066,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066],
                    [1170,1170,1170,1170,1170,1170,1170,1170,1170,1170,1170],[1274,1274,1274,1274,1274,1274,1274,1274,1274,1274,1274],
                    [1378,1378,1378,1378,1378,1378,1378,1378,1378,1378,1378],[1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482],
                    [1586,1586,1586,1586,1586,1586,1586,1586,1586,1586,1586],[1690,1690,1690,1690,1690,1690,1690,1690,1690,1690,1690]
                ],
                top: [
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066],
                    [26,130,234,338,442,546,650,754,858,962,1066],[26,130,234,338,442,546,650,754,858,962,1066]
                ]
            }
        },
        width: 52,//104N+26
        height: 52,
        frame: {
            moving: 11,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:175,
        dieEffect:Burst.RhynsdonDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});
Neutral.Ursadon=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Ursadon",
        imgPos: {
            moving: {
                left: [
                    [15,15,15,15,15,15,15,15],[107,107,107,107,107,107,107,107],
                    [199,199,199,199,199,199,199,199],[291,291,291,291,291,291,291,291],
                    [383,383,383,383,383,383,383,383],[475,475,475,475,475,475,475,475],
                    [567,567,567,567,567,567,567,567],[659,659,659,659,659,659,659,659],
                    [751,751,751,751,751,751,751,751],[935,935,935,935,935,935,935,935],
                    [1027,1027,1027,1027,1027,1027,1027,1027],[1119,1119,1119,1119,1119,1119,1119,1119],
                    [1211,1211,1211,1211,1211,1211,1211,1211],[1303,1303,1303,1303,1303,1303,1303,1303],
                    [1395,1395,1395,1395,1395,1395,1395,1395],[1487,1487,1487,1487,1487,1487,1487,1487]
                ],
                top: [
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659],
                    [15,107,199,291,383,475,567,659],[15,107,199,291,383,475,567,659]
                ]
            }
        },
        width: 62,//92N+15
        height: 62,
        frame: {
            moving: 8,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:175,
        dieEffect:Burst.UrsadonDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});
Neutral.Bengalaas=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Bengalaas",
        imgPos: {
            moving: {
                left: [
                    [38,38,38,38,38,38,38,38,38,38,38,38],[166,166,166,166,166,166,166,166,166,166,166,166],
                    [294,294,294,294,294,294,294,294,294,294,294,294],[422,422,422,422,422,422,422,422,422,422,422,422],
                    [550,550,550,550,550,550,550,550,550,550,550,550],[678,678,678,678,678,678,678,678,678,678,678,678],
                    [806,806,806,806,806,806,806,806,806,806,806,806],[934,934,934,934,934,934,934,934,934,934,934,934],
                    [1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062,1062],[1318,1318,1318,1318,1318,1318,1318,1318,1318,1318,1318,1318],
                    [1446,1446,1446,1446,1446,1446,1446,1446,1446,1446,1446,1446],[1574,1574,1574,1574,1574,1574,1574,1574,1574,1574,1574,1574],
                    [1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702],[1830,1830,1830,1830,1830,1830,1830,1830,1830,1830,1830,1830],
                    [1958,1958,1958,1958,1958,1958,1958,1958,1958,1958,1958,1958],[2086,2086,2086,2086,2086,2086,2086,2086,2086,2086,2086,2086]
                ],
                top: [
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446],
                    [38,166,294,422,550,678,806,934,1062,1190,1318,1446],[38,166,294,422,550,678,806,934,1062,1190,1318,1446]
                ]
            }
        },
        width: 52,
        height: 52,//128N+38
        frame: {
            moving: 12,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:175,
        dieEffect:Burst.BengalaasDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});
Neutral.Scantid=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Scantid",
        imgPos: {
            moving: {
                left: [
                    [12,12,12,12,12,12,12,12,12,12,12,12],[104,104,104,104,104,104,104,104,104,104,104,104],
                    [196,196,196,196,196,196,196,196,196,196,196,196],[288,288,288,288,288,288,288,288,288,288,288,288],
                    [380,380,380,380,380,380,380,380,380,380,380,380],[472,472,472,472,472,472,472,472,472,472,472,472],
                    [564,564,564,564,564,564,564,564,564,564,564,564],[656,656,656,656,656,656,656,656,656,656,656,656],
                    [748,748,748,748,748,748,748,748,748,748,748,748],[932,932,932,932,932,932,932,932,932,932,932,932],
                    [1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024],[1116,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116],
                    [1208,1208,1208,1208,1208,1208,1208,1208,1208,1208,1208,1208],[1300,1300,1300,1300,1300,1300,1300,1300,1300,1300,1300,1300],
                    [1392,1392,1392,1392,1392,1392,1392,1392,1392,1392,1392,1392],[1484,1484,1484,1484,1484,1484,1484,1484,1484,1484,1484,1484]
                ],
                top: [
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024]
                ]
            }
        },
        width: 68,//92N+12
        height: 68,
        frame: {
            moving: 12,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:175,
        dieEffect:Burst.ScantidDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});
Neutral.Kakaru=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Kakaru",
        imgPos: {
            moving: {
                left: [
                    [12,12,12,12,12,12,12,12,12,12,12,12],[104,104,104,104,104,104,104,104,104,104,104,104],
                    [196,196,196,196,196,196,196,196,196,196,196,196],[288,288,288,288,288,288,288,288,288,288,288,288],
                    [380,380,380,380,380,380,380,380,380,380,380,380],[472,472,472,472,472,472,472,472,472,472,472,472],
                    [564,564,564,564,564,564,564,564,564,564,564,564],[656,656,656,656,656,656,656,656,656,656,656,656],
                    [748,748,748,748,748,748,748,748,748,748,748,748],[932,932,932,932,932,932,932,932,932,932,932,932],
                    [1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024],[1116,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116,1116],
                    [1208,1208,1208,1208,1208,1208,1208,1208,1208,1208,1208,1208],[1300,1300,1300,1300,1300,1300,1300,1300,1300,1300,1300,1300],
                    [1392,1392,1392,1392,1392,1392,1392,1392,1392,1392,1392,1392],[1484,1484,1484,1484,1484,1484,1484,1484,1484,1484,1484,1484]
                ],
                top: [
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024],
                    [12,104,196,288,380,472,564,656,748,840,932,1024],[12,104,196,288,380,472,564,656,748,840,932,1024]
                ]
            }
        },
        width: 68,//92N+12
        height: 68,
        frame: {
            moving: 12
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:210,
        dieEffect:Burst.KakaruDeath,
        isFlying:true,
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        //Override
        dock:function(){
            //Use the same behavior
            Unit.walkAround.call(this);
        }
    }
});

/***/ }),
/* 12 */
/***/ (function(module, exports) {

/******* Define Protoss units *******/
var Protoss={};
Protoss.Probe=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Probe",
        imgPos: {
            moving: {
                left: [0,32,64,96,128,160,192,224,256,32,64,96,128,160,192,224],
                top: [0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32]
            },
            attack: {
                left: [0,32,64,96,128,160,192,224,256,32,64,96,128,160,192,224],
                top: [0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32]
            }
        },
        width: 32,//32N
        height: 32,//32N
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:12,
        HP: 20,
        SP: 20,
        damage: 5,
        armor:0,
        plasma:0,
        sight:280,
        meleeAttack: true,
        attackInterval: 2200,
        dieEffect:Burst.SmallBlueExplode,
        attackEffect:Burst.ProbeSpark,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:50,
            man:1,
            time:200
        },
        upgrade:['UpgradeGroundArmor','UpgradePlasmaShields'],
        items:{'4':undefined,
            '5':{name:'gather'},
            '7':{name:'BasicStructure'},
            '8':{name:'AdvancedStructure'}
        },
        buildProtossBuilding:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Ensnare
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,40,function(){
                    if (Resource.payCreditBill.call(myself)){
                        var transfer=new Building.ProtossBuilding.WrapRift({x:location.x-32,y:location.y-32,team:myself.team});
                        transfer.buildName=myself.buildName;
                        //Calculate duration
                        var duration=Resource.getCost(myself.buildName).time;
                        //Cheat: Operation cwal
                        if (Cheat.cwal) duration=20;
                        Game.commandTimeout(function(){
                            if (transfer.status!='dead'){
                                //Evolve
                                transfer.evolveTo({
                                    type:Building.ProtossBuilding[transfer.buildName],
                                    burstArr:['ProtossBuildingComplete']
                                });
                            }
                        },duration*100);
                        //Processing flag on transfer
                        transfer.processing={
                            name:transfer.buildName,
                            startTime:Game.mainTick,//new Date().getTime()
                            time:duration
                        };
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.farmer=this;
                Button.callback.buildType='ProtossBuilding';
                $('div.GameLayer').attr('status','button');
            }
        }
    }
});
Protoss.Zealot=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Zealot",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[42,42,42,42,42,42,42,42],
                    [84,84,84,84,84,84,84,84],[126,126,126,126,126,126,126,126],
                    [168,168,168,168,168,168,168,168],[210,210,210,210,210,210,210,210],
                    [252,252,252,252,252,252,252,252],[294,294,294,294,294,294,294,294],
                    [336,336,336,336,336,336,336,336],[420,420,420,420,420,420,420,420],
                    [462,462,462,462,462,462,462,462],[504,504,504,504,504,504,504,504],
                    [546,546,546,546,546,546,546,546],[588,588,588,588,588,588,588,588],
                    [630,630,630,630,630,630,630,630],[672,672,672,672,672,672,672,672]
                ],
                top: [
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308],
                    [0,44,88,132,176,220,264,308],[0,44,88,132,176,220,264,308]
                ]
            },
            dock: {
                left: [0,42,84,126,168,210,252,294,336,420,462,504,546,588,630,672],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            attack:{
                left: [
                    [0,0,0,0,0],[42,42,42,42,42],
                    [84,84,84,84,84],[126,126,126,126,126],
                    [168,168,168,168,168],[210,210,210,210,210],
                    [252,252,252,252,252],[294,294,294,294,294],
                    [336,336,336,336,336],[420,420,420,420,420],
                    [462,462,462,462,462],[504,504,504,504,504],
                    [546,546,546,546,546],[588,588,588,588,588],
                    [630,630,630,630,630],[672,672,672,672,672]
                ],
                top: [
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528],
                    [352,396,440,484,528],[352,396,440,484,528]
                ]
            }
        },
        width: 42,//42N
        height: 44,//44N
        frame: {
            moving: 8,
            dock: 1,
            attack: 5
        },
        //Only for moving status, override
        speed:10,
        HP: 80,
        SP: 80,
        damage: 16,
        armor:1,
        plasma:0,
        sight:245,
        meleeAttack: true,
        attackInterval: 2200,
        dieEffect:Burst.SmallProtossDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:100,
            man:2,
            time:400
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields']
    }
});
Protoss.Dragoon=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Dragoon",
        imgPos: {
            moving: {
                left: [
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[687,591,495,399,303,207,111,15],
                    [687,591,495,399,303,207,111,15],[687,591,495,399,303,207,111,15],
                    [687,591,495,399,303,207,111,15],[687,591,495,399,303,207,111,15],
                    [687,591,495,399,303,207,111,15],[687,591,495,399,303,207,111,15]
                ],
                top: [
                    [111,111,111,111,111,111,111,111],[111,111,111,111,111,111,111,111],
                    [207,207,207,207,207,207,207,207],[207,207,207,207,207,207,207,207],
                    [207,207,207,207,207,207,207,207],[207,207,207,207,207,207,207,207],
                    [207,207,207,207,207,207,207,207],[399,399,399,399,399,399,399,399],
                    [399,399,399,399,399,399,399,399],[399,399,399,399,399,399,399,399],
                    [303,303,303,303,303,303,303,303],[303,303,303,303,303,303,303,303],
                    [303,303,303,303,303,303,303,303],[303,303,303,303,303,303,303,303],
                    [303,303,303,303,303,303,303,303],[111,111,111,111,111,111,111,111]
                ]
            },
            dock: {
                left: [
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687],
                    [15,111,207,303,399,495,591,687],[15,111,207,303,399,495,591,687]
                ],
                top: [
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15],
                    [15,15,15,15,15,15,15,15],[15,15,15,15,15,15,15,15]
                ]
            },
            attack: {
                left: [
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495],
                    [15,111,207,303,399,495,591,687,495,495,495,495],[15,111,207,303,399,495,591,687,495,495,495,495]
                ],
                top: [
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495],
                    [495,495,495,495,495,495,495,495,495,495,495,495],[495,495,495,495,495,495,495,495,495,495,495,495]
                ]
            }
        },
        width: 66,//96N+15
        height: 66,//96N+15
        frame: {
            moving: 8,
            dock: 8,
            attack: 12
        },
        //Only for moving status, override
        speed:12,
        HP: 100,
        SP: 80,
        damage: 20,
        armor:1,
        plasma:0,
        sight:280,
        attackRange: 140,
        attackInterval: 3000,
        fireDelay:800,
        dieEffect:Burst.DragoonDeath,
        isFlying:false,
        unitType:Unit.BIG,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:125,
            gas:50,
            man:2,
            time:500
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields']
    }
});
Protoss.Templar=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Templar",
        imgPos: {
            moving: {
                left: [
                    [30,30,30,30],[158,158,158,158],
                    [286,286,286,286],[414,414,414,414],
                    [542,542,542,542],[670,670,670,670],
                    [798,798,798,798],[926,926,926,926],
                    [1054,1054,1054,1054],[1310,1310,1310,1310],
                    [1438,1438,1438,1438],[1566,1566,1566,1566],
                    [1694,1694,1694,1694],[1822,1822,1822,1822],
                    [1950,1950,1950,1950],[2078,2078,2078,2078]
                ],
                top: [
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670],
                    [1694,1822,1950,670],[1694,1822,1950,670]
                ]
            },
            dock: {
                left: [
                    [30,30,30,30,30,30,30],[158,158,158,158,158,158,158],
                    [286,286,286,286,286,286,286],[414,414,414,414,414,414,414],
                    [542,542,542,542,542,542,542],[670,670,670,670,670,670,670],
                    [798,798,798,798,798,798,798],[926,926,926,926,926,926,926],
                    [1054,1054,1054,1054,1054,1054,1054],[1310,1310,1310,1310,1310,1310,1310],
                    [1438,1438,1438,1438,1438,1438,1438],[1566,1566,1566,1566,1566,1566,1566],
                    [1694,1694,1694,1694,1694,1694,1694],[1822,1822,1822,1822,1822,1822,1822],
                    [1950,1950,1950,1950,1950,1950,1950],[2078,2078,2078,2078,2078,2078,2078]
                ],
                top: [
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566],
                    [798,926,1054,1182,1310,1438,1566],[798,926,1054,1182,1310,1438,1566]
                ]
            },
            attack: {
                left: [
                    [30,30,30,30,30],[158,158,158,158,158],
                    [286,286,286,286,286],[414,414,414,414,414],
                    [542,542,542,542,542],[670,670,670,670,670],
                    [798,798,798,798,798],[926,926,926,926,926],
                    [1054,1054,1054,1054,1054],[1310,1310,1310,1310,1310],
                    [1438,1438,1438,1438,1438],[1566,1566,1566,1566,1566],
                    [1694,1694,1694,1694,1694],[1822,1822,1822,1822,1822],
                    [1950,1950,1950,1950,1950],[2078,2078,2078,2078,2078]
                ],
                top: [
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542],
                    [30,158,286,414,542],[30,158,286,414,542]
                ]
            }
        },
        width: 68,//128N+30
        height: 68,//128N+30
        frame: {
            moving: 4,//3 or 4
            dock: 7,//7 or 8
            attack: 5
        },
        //Only for moving status, override
        speed:8,
        HP: 40,
        SP: 40,
        damage: 10,
        armor:0,
        plasma:0,
        MP: 200,
        sight:245,
        attackRange: 100,
        attackInterval: 2000,
        dieEffect:Burst.TemplarDeath,
        attackEffect:Burst.FireSpark,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.WAVE_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:50,
            gas:150,
            man:2,
            time:500
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'PsionicStorm',condition:function(){
                return Magic.PsionicStorm.enabled
            }},
            '8':{name:'Hallucination',condition:function(){
                return Magic.Hallucination.enabled
            }},
            '9':{name:'Archon'}
        }
    }
});
Protoss.DarkTemplar=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "DarkTemplar",
        imgPos: {
            moving: {
                left: [
                    [3,3,3,3,3,3,3,3,3],[60,60,60,60,60,60,60,60,60],
                    [117,117,117,117,117,117,117,117,117],[174,174,174,174,174,174,174,174,174],
                    [231,231,231,231,231,231,231,231,231],[288,288,288,288,288,288,288,288,288],
                    [345,345,345,345,345,345,345,345,345],[402,402,402,402,402,402,402,402,402],
                    [459,459,459,459,459,459,459,459,459],[573,573,573,573,573,573,573,573,573],
                    [630,630,630,630,630,630,630,630,630],[687,687,687,687,687,687,687,687,687],
                    [744,744,744,744,744,744,744,744,744],[801,801,801,801,801,801,801,801,801],
                    [858,858,858,858,858,858,858,858,858],[915,915,915,915,915,915,915,915,915]
                ],
                top: [
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496],
                    [0,62,124,186,248,310,372,434,496],[0,62,124,186,248,310,372,434,496]
                ]
            },
            dock: {
                left: [3,60,117,174,231,288,345,402,459,573,630,687,744,801,858,915],
                top: [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
            },
            attack: {
                left: [
                    [3,3,3,3,3,3,3,3,3],[60,60,60,60,60,60,60,60,60],
                    [117,117,117,117,117,117,117,117,117],[174,174,174,174,174,174,174,174,174],
                    [231,231,231,231,231,231,231,231,231],[288,288,288,288,288,288,288,288,288],
                    [345,345,345,345,345,345,345,345,345],[402,402,402,402,402,402,402,402,402],
                    [459,459,459,459,459,459,459,459,459],[573,573,573,573,573,573,573,573,573],
                    [630,630,630,630,630,630,630,630,630],[687,687,687,687,687,687,687,687,687],
                    [744,744,744,744,744,744,744,744,744],[801,801,801,801,801,801,801,801,801],
                    [858,858,858,858,858,858,858,858,858],[915,915,915,915,915,915,915,915,915]
                ],
                top: [
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054],
                    [558,620,682,744,806,868,930,992,1054],[558,620,682,744,806,868,930,992,1054]
                ]
            }
        },
        width: 57,//57N+3
        height: 62,//62N
        frame: {
            moving: 9,
            dock: 1,
            attack: 9
        },
        //Only for moving status, override
        speed:12,
        HP: 80,
        SP: 40,
        damage: 40,
        armor:1,
        plasma:0,
        sight:245,
        meleeAttack: true,
        attackInterval: 3000,
        dieEffect:Burst.SmallProtossDeath,
        isFlying:false,
        isInvisible:true,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:125,
            gas:100,
            man:2,
            time:500
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields'],
        items:{
            '9':{name:'DarkArchon'}
        }
    }
});
Protoss.Archon=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=6;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Archon",
        imgPos: {
            moving: {
                left: [
                    [2060,2060,2060,2060],[140,140,140,140],
                    [260,260,260,260],[380,380,380,380],
                    [500,500,500,500],[620,620,620,620],
                    [740,740,740,740],[860,860,860,860],
                    [980,980,980,980],[1220,1220,1220,1220],
                    [1340,1340,1340,1340],[1460,1460,1460,1460],
                    [1580,1580,1580,1580],[1700,1700,1700,1700],
                    [1820,1820,1820,1820],[1940,1940,1940,1940]
                ],
                top: [
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580],
                    [1220,1340,1460,1580],[1220,1340,1460,1580]
                ]
            },
            attack: {
                left: [
                    [2060,2060,2060,2060,2060,2060,2060,2060,2060,2060],[140,140,140,140,140,140,140,140,140,140],
                    [260,260,260,260,260,260,260,260,260,260],[380,380,380,380,380,380,380,380,380,380],
                    [500,500,500,500,500,500,500,500,500,500],[620,620,620,620,620,620,620,620,620,620],
                    [740,740,740,740,740,740,740,740,740,740],[860,860,860,860,860,860,860,860,860,860],
                    [980,980,980,980,980,980,980,980,980,980],[1220,1220,1220,1220,1220,1220,1220,1220,1220,1220],
                    [1340,1340,1340,1340,1340,1340,1340,1340,1340,1340],[1460,1460,1460,1460,1460,1460,1460,1460,1460,1460],
                    [1580,1580,1580,1580,1580,1580,1580,1580,1580,1580],[1700,1700,1700,1700,1700,1700,1700,1700,1700,1700],
                    [1820,1820,1820,1820,1820,1820,1820,1820,1820,1820],[1940,1940,1940,1940,1940,1940,1940,1940,1940,1940]
                ],
                top: [
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100]
                ]
            }
        },
        width: 80,//120N+20
        height: 80,//120N+20
        frame: {
            moving: 4,
            attack: 10
        },
        //Only for moving status, override
        speed:12,
        HP: 10,
        SP: 350,
        damage: 30,
        armor:0,
        plasma:0,
        sight:280,
        attackRange: 70,
        attackInterval: 1000,
        attackEffect:Burst.ArchonBurst,
        dieEffect:Burst.BigBlueExplode,
        isFlying:false,
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:50,
            gas:150,
            man:4,
            time:200
        },
        upgrade:['UpgradeGroundWeapons','UpgradeGroundArmor','UpgradePlasmaShields'],
        AOE:{
            hasEffect:false,
            radius:20
        }
    }
});
Protoss.DarkArchon=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=3;
    },
    prototypePlus: {
        //Add basic unit info
        name: "DarkArchon",
        imgPos: {
            moving: {
                left: [
                    [20,20,20,20,20,20,20,20,20,20],[140,140,140,140,140,140,140,140,140,140],
                    [260,260,260,260,260,260,260,260,260,260],[380,380,380,380,380,380,380,380,380,380],
                    [500,500,500,500,500,500,500,500,500,500],[620,620,620,620,620,620,620,620,620,620],
                    [740,740,740,740,740,740,740,740,740,740],[860,860,860,860,860,860,860,860,860,860],
                    [980,980,980,980,980,980,980,980,980,980],[1220,1220,1220,1220,1220,1220,1220,1220,1220,1220],
                    [1340,1340,1340,1340,1340,1340,1340,1340,1340,1340],[1460,1460,1460,1460,1460,1460,1460,1460,1460,1460],
                    [1580,1580,1580,1580,1580,1580,1580,1580,1580,1580],[1700,1700,1700,1700,1700,1700,1700,1700,1700,1700],
                    [1820,1820,1820,1820,1820,1820,1820,1820,1820,1820],[1940,1940,1940,1940,1940,1940,1940,1940,1940,1940]
                ],
                top: [
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100],
                    [20,140,260,380,500,620,740,860,980,1100],[20,140,260,380,500,620,740,860,980,1100]
                ]
            }
        },
        width: 80,//120N+20
        height: 80,//120N+20
        frame: {
            moving: 10
        },
        //Only for moving status, override
        speed:12,
        HP: 25,
        SP: 200,
        armor:1,
        plasma:0,
        MP: 200,
        sight:350,
        dieEffect:Burst.BigBlueExplode,
        isFlying:false,
        unitType:Unit.BIG,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:125,
            gas:100,
            man:4,
            time:200
        },
        upgrade:['UpgradeGroundArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'Feedback'},
            '8':{name:'MindControl',condition:function(){
                return Magic.MindControl.enabled
            }},
            '9':{name:'MaelStorm',condition:function(){
                return Magic.MaelStorm.enabled
            }}
        }
    }
});
Protoss.Shuttle=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Transport
        this.loadedUnits=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Shuttle",
        imgPos: {
            moving: {
                left: [5,65,125,185,245,305,365,425,485,65,125,185,245,305,365,425],
                top: [5,5,5,5,5,5,5,5,5,65,65,65,65,65,65,65]
            }
        },
        width: 50,//60N+5
        height: 50,//60N+5
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:11,
        HP: 80,
        SP: 60,
        armor:1,
        plasma:0,
        sight:280,
        dieEffect:Burst.MiddleBlueExplode,
        isFlying:true,
        unitType:Unit.BIG,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:200,
            man:2,
            time:600
        },
        upgrade:['UpgradeAirArmor','UpgradePlasmaShields'],
        items:{
            '8':{name:'Load'},
            '9':{name:'UnloadAll'}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        },
        die:Zerg.Overlord.prototype.die
    }
});
Protoss.Reaver=AttackableUnit.extends({
    constructorPlus:function(props){
        this.imgPos.attack=this.imgPos.dock;
        this.frame.attack=this.frame.dock;
        if (Multiplayer.ON) this.scarabNum=0;
        else this.scarabNum=(props.team!=Game.team)?999:0;
        //Override
        this.isReloaded=function(){
            return this.coolDown && this.scarabNum>0;
        };
    },
    prototypePlus: {
        //Add basic unit info
        name: "Reaver",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0,0],[84,84,84,84,84,84,84,84,84],
                    [168,168,168,168,168,168,168,168,168],[252,252,252,252,252,252,252,252,252],
                    [336,336,336,336,336,336,336,336,336],[420,420,420,420,420,420,420,420,420],
                    [504,504,504,504,504,504,504,504,504],[588,588,588,588,588,588,588,588,588],
                    [672,672,672,672,672,672,672,672,672],[840,840,840,840,840,840,840,840,840],
                    [924,924,924,924,924,924,924,924,924],[1008,1008,1008,1008,1008,1008,1008,1008,1008],
                    [1092,1092,1092,1092,1092,1092,1092,1092,1092],[1176,1176,1176,1176,1176,1176,1176,1176,1176],
                    [1260,1260,1260,1260,1260,1260,1260,1260,1260],[1344,1344,1344,1344,1344,1344,1344,1344,1344]
                ],
                top: [
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672],
                    [0,84,168,252,336,420,504,588,672],[0,84,168,252,336,420,504,588,672]
                ]
            },
            dock: {
                left: [0,84,168,252,336,420,504,588,672,840,924,1008,1092,1176,1260,1344],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            }
        },
        width: 84,//84N
        height: 84,//84N
        frame: {
            moving: 9,
            dock: 1
        },
        //Only for moving status, override
        speed:4,
        HP: 100,
        SP: 80,
        damage: 100,
        armor:0,
        plasma:0,
        sight:350,
        attackRange: 280,
        attackInterval: 6000,
        dieEffect:Burst.BigBlueExplode,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        scarabCapacity:5,
        cost:{
            mine:200,
            gas:100,
            man:4,
            time:700
        },
        upgrade:['UpgradeGroundArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'Scarab',condition:function(){
                if (!Game.selectedUnit.scarabNum) $('button.attack').attr('disabled',true);
                else $('button.attack').removeAttr('disabled');
                return Game.selectedUnit.scarabNum<Game.selectedUnit.get('scarabCapacity');
            }}
        },
        AOE:{
            hasEffect:false,
            radius:80
        }
    }
});
Protoss.Observer=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Observer",
        imgPos: {
            moving: {
                left: [0,40,80,120,160,200,240,280,320,40,80,120,160,200,240,280],
                top: [0,0,0,0,0,0,0,0,0,40,40,40,40,40,40,40]
            }
        },
        width: 40,//40N
        height: 40,//40N
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:8,
        HP: 40,
        SP: 20,
        armor:0,
        plasma:0,
        sight:315,
        dieEffect:Burst.SmallBlueExplode,
        isFlying:true,
        isInvisible:true,
        unitType:Unit.SMALL,
        recover:Building.ProtossBuilding.prototype.recover,
        detector:Gobj.detectorBuffer,
        cost:{
            mine:25,
            gas:75,
            man:1,
            time:400
        },
        upgrade:['UpgradeAirArmor','UpgradePlasmaShields'],
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        }
    }
});
Protoss.Scout=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Bind bgm
        this.sound.attackG=new Audio(Game.CDN+'bgm/'+this.name+'.attack.wav');
        this.sound.attackF=new Audio(Game.CDN+'bgm/'+this.name+'.attackF.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Scout",
        imgPos: {
            moving: {
                left: [8,80,152,224,296,368,440,512,584,80,152,224,296,368,440,512],
                top: [8,8,8,8,8,8,8,8,8,152,152,152,152,152,152,152]
            },
            attack: {
                left: [
                    [8,8],[80,80],
                    [152,152],[224,224],
                    [296,296],[368,368],
                    [440,440],[512,512],
                    [584,584],[80,80],
                    [152,152],[224,224],
                    [296,296],[368,368],
                    [440,440],[512,512]
                ],
                top: [
                    [8,80],[8,80],
                    [8,80],[8,80],
                    [8,80],[8,80],
                    [8,80],[8,80],
                    [8,80],[152,224],
                    [152,224],[152,224],
                    [152,224],[152,224],
                    [152,224],[152,224]
                ]
            }
        },
        width: 56,//72N+8
        height: 56,//72N+8
        frame: {
            moving: 1,
            attack: 2
        },
        //Only for moving status, override
        speed:12,
        HP: 150,
        SP: 100,
        attackMode:{
            flying:{
                attackRange:210,
                attackInterval: 2200,
                damage:28,
                attackType:AttackableUnit.BURST_ATTACK
            },
            ground:{
                attackRange:105,
                attackEffect:Burst.BlueShootSpark,
                attackInterval: 2200,
                damage:8,
                attackType:AttackableUnit.NORMAL_ATTACK
            },
            status:false
        },
        //Default
        damage: 8,
        armor:0,
        plasma:0,
        sight:280,
        attackRange: 105,
        dieEffect:Burst.MiddleBlueExplode,
        isFlying:true,
        unitType:Unit.BIG,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:300,
            gas:150,
            man:3,
            time:800
        },
        upgrade:['UpgradeAirWeapons','UpgradeAirArmor','UpgradePlasmaShields'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Protoss.Carrier=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.attack=this.imgPos.dock=this.imgPos.moving;
        this.frame.attack=this.frame.dock=this.frame.moving;
        //Override
        this.continuousAttack={
            count:(Multiplayer.ON)?0:((props.team!=Game.team)?(this.get('interceptorCapacity')):0),
            layout:this.continuousAttack.layout
        };
        this.isReloaded=function(){
            return this.coolDown && this.continuousAttack.count>0;
        };
    },
    prototypePlus: {
        //Add basic unit info
        name: "Carrier",
        imgPos: {
            moving: {
                left: [0,256,512,768,1024,1408,1664,1920,0,256,512,768,1024,1408,1664,1920],
                top: [0,0,0,0,0,0,0,0,128,128,128,128,128,128,128,128]
            }
        },
        width: 128,//128N(0,2,4,6,8,11,13,15)
        height: 128,//128N
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:8,
        HP: 300,
        SP: 150,
        damage: 6,
        armor:4,
        plasma:0,
        sight:385,
        attackRange: 280,
        attackInterval: 1000,
        recover:Building.ProtossBuilding.prototype.recover,
        interceptorCapacity:4,
        continuousAttack:{
            count:4,//8
            layout:function(bullet,num){
                //Reassign location, surround target
                var centerX=bullet.target.posX();
                var centerY=bullet.target.posY();
                var radius=120;
                switch (num){
                    //Left
                    case 0:
                        bullet.x=centerX-radius-bullet.width/2;
                        bullet.y=centerY-bullet.height/2;
                        bullet.speed={x:radius/4,y:0};
                        bullet.angle=0;
                        break;
                    //Right
                    case 1:
                        bullet.x=centerX+radius-bullet.width/2;
                        bullet.y=centerY-bullet.height/2;
                        bullet.speed={x:-radius/4,y:0};
                        bullet.angle=Math.PI;
                        break;
                    //Top
                    case 2:
                        bullet.x=centerX-bullet.width/2;
                        bullet.y=centerY-radius-bullet.height/2;
                        bullet.speed={x:0,y:radius/4};
                        bullet.angle=-Math.PI/2;
                        break;
                    //Bottom
                    case 3:
                        bullet.x=centerX-bullet.width/2;
                        bullet.y=centerY+radius-bullet.height/2;
                        bullet.speed={x:0,y:-radius/4};
                        bullet.angle=Math.PI/2;
                        break;
                    //Top-left
                    case 4:
                        bullet.x=centerX-radius*0.7-bullet.width/2;
                        bullet.y=centerY-radius*0.7-bullet.height/2;
                        bullet.speed={x:0.7*radius/4,y:0.7*radius/4};
                        bullet.angle=-Math.PI/4;
                        break;
                    //Top-right
                    case 5:
                        bullet.x=centerX+radius*0.7-bullet.width/2;
                        bullet.y=centerY-radius*0.7-bullet.height/2;
                        bullet.speed={x:-0.7*radius/4,y:0.7*radius/4};
                        bullet.angle=-Math.PI*3/4;
                        break;
                    //Bottom-left
                    case 6:
                        bullet.x=centerX-radius*0.7-bullet.width/2;
                        bullet.y=centerY+radius*0.7-bullet.height/2;
                        bullet.speed={x:0.7*radius/4,y:-0.7*radius/4};
                        bullet.angle=Math.PI/4;
                        break;
                    //Bottom-right
                    case 7:
                        bullet.x=centerX+radius*0.7-bullet.width/2;
                        bullet.y=centerY+radius*0.7-bullet.height/2;
                        bullet.speed={x:-0.7*radius/4,y:-0.7*radius/4};
                        bullet.angle=Math.PI*3/4;
                        break;
                }
            }
        },
        dieEffect:Burst.BigBlueExplode,
        isFlying:true,
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        cost:{
            mine:350,
            gas:250,
            man:8,
            time:1400
        },
        upgrade:['UpgradeAirWeapons','UpgradeAirArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'Interceptor',condition:function(){
                if (!Game.selectedUnit.continuousAttack.count) $('button.attack').attr('disabled',true);
                else $('button.attack').removeAttr('disabled');
                return Game.selectedUnit.continuousAttack.count<Game.selectedUnit.get('interceptorCapacity');
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Protoss.Arbiter=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Arbiter",
        imgPos: {
            moving: {
                left: [0,76,152,228,304,380,456,532,608,76,152,228,304,380,456,532],
                top: [0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76]
            }
        },
        width: 76,//76N
        height: 76,//76N
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:12,
        HP: 200,
        SP: 150,
        damage: 10,
        armor:1,
        plasma:0,
        MP: 200,
        sight:315,
        attackRange: 175,
        attackInterval: 4500,
        dieEffect:Burst.MiddleBlueExplode,
        isFlying:true,
        unitType:Unit.BIG,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:350,
            man:4,
            time:1600
        },
        upgrade:['UpgradeAirWeapons','UpgradeAirArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'Recall',condition:function(){
                return Magic.Recall.enabled
            }},
            '8':{name:'StasisField',condition:function(){
                return Magic.StasisField.enabled
            }}
        },
        //Special skill: make nearby units invisible, need initial
        bufferObj:{},
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Protoss.Corsair=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Corsair",
        imgPos: {
            moving: {
                left: [0,60,120,180,240,300,360,420,480,600,660,720,780,840,900,960],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            attack: {
                left: [
                    [0,0,0,0,0],[60,60,60,60,60],
                    [120,120,120,120,120],[180,180,180,180,180],
                    [240,240,240,240,240],[300,300,300,300,300],
                    [360,360,360,360,360],[420,420,420,420,420],
                    [480,480,480,480,480],[600,600,600,600,600],
                    [660,660,660,660,660],[720,720,720,720,720],
                    [780,780,780,780,780],[840,840,840,840,840],
                    [900,900,900,900,900],[960,960,960,960,960]
                ],
                top: [
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240],
                    [0,60,120,180,240],[0,60,120,180,240]
                ]
            }
        },
        width: 60,//60N
        height: 60,//60N
        frame: {
            moving: 1,
            attack: 5
        },
        //Only for moving status, override
        speed:16,
        HP: 100,
        SP: 80,
        damage: 5,
        armor:1,
        plasma:0,
        MP: 200,
        sight:315,
        attackRange: 175,
        attackInterval: 800,
        dieEffect:Burst.MiddleBlueExplode,
        attackEffect:Burst.CorsairCloud,
        isFlying:true,
        attackLimit:"flying",
        unitType:Unit.MIDDLE,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.ProtossBuilding.prototype.recover,
        cost:{
            mine:150,
            gas:100,
            man:2,
            time:400
        },
        upgrade:['UpgradeAirWeapons','UpgradeAirArmor','UpgradePlasmaShields'],
        items:{
            '7':{name:'DisruptionWeb',condition:function(){
                return Magic.DisruptionWeb.enabled
            }}
        },
        AOE:{
            hasEffect:true,
            radius:100
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});

/***/ }),
/* 13 */
/***/ (function(module, exports) {

/******* Define Terran units *******/
var Terran={};
Terran.SCV=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "SCV",
        imgPos: {
            moving: {
                left: [5,77,149,221,293,365,437,509,581,725,797,869,941,1013,1085,1157],
                top: [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
            },
            attack: {
                left: [
                    [5,5,5,5,5],[77,77,77,77,77],
                    [149,149,149,149,149],[221,221,221,221,221],
                    [293,293,293,293,293],[365,365,365,365,365],
                    [437,437,437,437,437],[509,509,509,509,509],
                    [581,581,581,581,581],[725,725,725,725,725],
                    [797,797,797,797,797],[869,869,869,869,869],
                    [941,941,941,941,941],[1013,1013,1013,1013,1013],
                    [1085,1085,1085,1085,1085],[1157,1157,1157,1157,1157]
                ],
                top: [
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149],
                    [77,77,149,149,149],[77,77,149,149,149]
                ]
            }
        },
        width: 62,//72N+5
        height: 62,//72N+5
        frame: {
            moving: 1,
            attack:5
        },
        //Only for moving status, override
        speed:12,
        HP: 60,
        damage: 5,
        armor:0,
        sight:245,
        meleeAttack: true,
        attackInterval: 1500,
        dieEffect:Burst.SmallExplode,
        attackEffect:Burst.SCVSpark,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:50,
            man:1,
            time:200
        },
        upgrade:['UpgradeInfantryArmors'],
        items:{
            '4':{name:'repair'},
            '5':{name:'gather'},
            '7':{name:'BasicBuilding'},
            '8':{name:'AdvancedBuilding'}
        },
        buildTerranBuilding:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Ensnare
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,40,function(){
                    if (Resource.payCreditBill.call(myself)){
                        var target=Building.TerranBuilding[myself.buildName];
                        var construction=new (eval('Building.'+target.prototype.evolves[0].step))
                            ({x:location.x-target.prototype.width/2,y:location.y-target.prototype.height/2,team:myself.team});
                        construction.buildName=myself.buildName;
                        //Calculate duration
                        var duration=Resource.getCost(myself.buildName).time;
                        //Cheat: Operation cwal
                        if (Cheat.cwal) duration=40;
                        //Processing flag on transfer
                        construction.processing={
                            name:construction.buildName,
                            startTime:Game.mainTick,//new Date().getTime()
                            time:duration
                        };
                        //Evolve chain
                        for (var N=1;N<target.prototype.evolves.length;N++){
                            (function(n){
                                var evolveInfo=target.prototype.evolves[n];
                                Game.commandTimeout(function(){
                                    if (construction.status!='dead'){
                                        //Evolve
                                        var evolveTarget=(eval('Building.'+evolveInfo.step));
                                        //Step is constructor function
                                        if (evolveTarget){
                                            var old=construction;
                                            construction=construction.evolveTo({
                                                type:evolveTarget,
                                                mixin:(evolveTarget.prototype.name=='ConstructionSkeleton')?{type:construction.buildName}:null,
                                                chain:true
                                            });
                                            construction.processing=old.processing;
                                            construction.buildName=old.buildName;
                                        }
                                        //Step is status string
                                        else {
                                            construction.status=evolveInfo.step;
                                        }
                                    }
                                },duration*100*evolveInfo.percent);
                            })(N);
                        }
                        //Final evolve
                        Game.commandTimeout(function(){
                            if (construction.status!='dead'){
                                //Evolve
                                construction.evolveTo({type:Building.TerranBuilding[construction.buildName]});
                            }
                        },duration*100);
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.farmer=this;
                Button.callback.buildType='TerranBuilding';
                $('div.GameLayer').attr('status','button');
            }
        }
    }
});
Terran.Marine=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Marine",
        imgPos: {
            moving: {
                left: [
                    [10,10,10,10,10,10,10,10,10],[74,74,74,74,74,74,74,74,74],
                    [138,138,138,138,138,138,138,138,138],[202,202,202,202,202,202,202,202,202],
                    [266,266,266,266,266,266,266,266,266],[330,330,330,330,330,330,330,330,330],
                    [394,394,394,394,394,394,394,394,394],[458,458,458,458,458,458,458,458,458],
                    [522,522,522,522,522,522,522,522,522],[650,650,650,650,650,650,650,650,650],
                    [714,714,714,714,714,714,714,714,714],[778,778,778,778,778,778,778,778,778],
                    [842,842,842,842,842,842,842,842,842],[906,906,906,906,906,906,906,906,906],
                    [970,970,970,970,970,970,970,970,970],[1034,1034,1034,1034,1034,1034,1034,1034,1034]
                ],
                top: [
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778],
                    [266,330,394,458,522,586,650,714,778],[266,330,394,458,522,586,650,714,778]
                ]
            },
            attack: {
                left: [
                    [10,10,10,10,10,10,10],[74,74,74,74,74,74,74],
                    [138,138,138,138,138,138,138],[202,202,202,202,202,202,202],
                    [266,266,266,266,266,266,266],[330,330,330,330,330,330,330],
                    [394,394,394,394,394,394,394],[458,458,458,458,458,458,458],
                    [522,522,522,522,522,522,522],[650,650,650,650,650,650,650],
                    [714,714,714,714,714,714,714],[778,778,778,778,778,778,778],
                    [842,842,842,842,842,842,842],[906,906,906,906,906,906,906],
                    [970,970,970,970,970,970,970],[1034,1034,1034,1034,1034,1034,1034]
                ],
                top: [
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202],
                    [74,138,202,138,202,138,202],[74,138,202,138,202,138,202]
                ]
            },
            dock: {
                left: [10,74,138,202,266,330,394,458,522,650,714,778,842,906,970,1034],
                top: [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
            }
        },
        width: 44,//64N+10
        height: 44,
        frame: {
            moving: 9,
            dock: 1,
            attack: 7
        },
        //Only for moving status, override
        speed:10,
        HP: 40,
        damage: 6,
        armor:0,
        sight:245,
        attackRange: 140,
        attackInterval: 1500,
        dieEffect:Burst.HumanDeath,
        attackEffect:Burst.ShootSpark,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:50,
            man:1,
            time:240
        },
        upgrade:['UpgradeInfantryWeapons','UpgradeInfantryArmors'],
        items:{
            '7':{name:'StimPacks',condition:function(){
                return Magic.StimPacks.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Terran.Firebat=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Firebat",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[32,32,32,32,32,32,32,32],
                    [64,64,64,64,64,64,64,64],[96,96,96,96,96,96,96,96],
                    [128,128,128,128,128,128,128,128],[160,160,160,160,160,160,160,160],
                    [192,192,192,192,192,192,192,192],[224,224,224,224,224,224,224,224],
                    [256,256,256,256,256,256,256,256],[320,320,320,320,320,320,320,320],
                    [352,352,352,352,352,352,352,352],[384,384,384,384,384,384,384,384],
                    [416,416,416,416,416,416,416,416],[448,448,448,448,448,448,448,448],
                    [480,480,480,480,480,480,480,480],[512,512,512,512,512,512,512,512]
                ],
                top: [
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288],
                    [64,96,128,160,192,224,256,288],[64,96,128,160,192,224,256,288]
                ]
            },
            dock: {
                left: [0,32,64,96,128,160,192,224,256,320,352,384,416,448,480,512],
                top: [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
            },
            attack: {
                left: [
                    [0,0,0,0,0,0],[32,32,32,32,32,32],
                    [64,64,64,64,64,64],[96,96,96,96,96,96],
                    [128,128,128,128,128,128],[160,160,160,160,160,160],
                    [192,192,192,192,192,192],[224,224,224,224,224,224],
                    [256,256,256,256,256,256],[320,320,320,320,320,320],
                    [352,352,352,352,352,352],[384,384,384,384,384,384],
                    [416,416,416,416,416,416],[448,448,448,448,448,448],
                    [480,480,480,480,480,480],[512,512,512,512,512,512]
                ],
                top: [
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32],
                    [0,32,32,32,32,32],[0,32,32,32,32,32]
                ]
            }
        },
        width: 32,//32N
        height: 32,//32N
        frame: {
            moving: 8,
            dock: 1,
            attack:6
        },
        //Only for moving status, override
        speed:10,
        HP: 50,
        damage: 16,
        armor:1,
        sight:245,
        attackRange: 70,
        attackInterval: 2200,
        dieEffect:Burst.SmallExplode,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.WAVE_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        AOE:{
            type:"LINE",
            hasEffect:false,
            radius:35
        },
        cost:{
            mine:50,
            gas:25,
            man:1,
            time:240
        },
        upgrade:['UpgradeInfantryWeapons','UpgradeInfantryArmors'],
        items:{
            '7':{name:'StimPacks',condition:function(){
                return Magic.StimPacks.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Terran.Ghost=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Ghost",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0,0],[43,43,43,43,43,43,43,43,43],
                    [86,86,86,86,86,86,86,86,86],[129,129,129,129,129,129,129,129,129],
                    [172,172,172,172,172,172,172,172,172],[215,215,215,215,215,215,215,215,215],
                    [258,258,258,258,258,258,258,258,258],[301,301,301,301,301,301,301,301,301],
                    [344,344,344,344,344,344,344,344,344],[430,430,430,430,430,430,430,430,430],
                    [473,473,473,473,473,473,473,473,473],[516,516,516,516,516,516,516,516,516],
                    [559,559,559,559,559,559,559,559,559],[602,602,602,602,602,602,602,602,602],
                    [645,645,645,645,645,645,645,645,645],[688,688,688,688,688,688,688,688,688]
                ],
                top: [
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312],
                    [0,39,78,117,156,195,234,273,312],[0,39,78,117,156,195,234,273,312]
                ]
            },
            attack: {
                left: [
                    [0,0,0,0],[43,43,43,43],
                    [86,86,86,86],[129,129,129,129],
                    [172,172,172,172],[215,215,215,215],
                    [258,258,258,258],[301,301,301,301],
                    [344,344,344,344],[430,430,430,430],
                    [473,473,473,473],[516,516,516,516],
                    [559,559,559,559],[602,602,602,602],
                    [645,645,645,645],[688,688,688,688]
                ],
                top: [
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468],
                    [351,390,429,468],[351,390,429,468]
                ]
            },
            dock: {
                left: [0,43,86,129,172,215,258,301,344,430,473,516,559,602,645,688],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            }
        },
        width: 43,//43N
        height: 39,//39N
        frame: {
            moving: 9,
            dock: 1,
            attack:4
        },
        //Only for moving status, override
        speed:10,
        HP: 45,
        damage: 10,
        armor:0,
        MP: 200,
        sight:315,
        attackRange: 210,
        attackInterval: 2200,
        dieEffect:Burst.HumanDeath,
        attackEffect:Burst.FireSpark,
        isFlying:false,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.WAVE_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:25,
            gas:75,
            man:1,
            time:500
        },
        upgrade:['UpgradeInfantryWeapons','UpgradeInfantryArmors'],
        items:{
            '7':{name:'Cloak',condition:function(){
                return Magic.PersonalCloak.enabled
            }},
            '8':{name:'Lockdown',condition:function(){
                return Magic.Lockdown.enabled
            }},
            '9':{name:'NuclearStrike',condition:function(){
                return Magic.NuclearStrike.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Terran.Medic=Unit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Medic",
        imgPos: {
            moving: {
                left: [
                    [16,16,16,16,16,16,16],[80,80,80,80,80,80,80],
                    [144,144,144,144,144,144,144],[208,208,208,208,208,208,208],
                    [272,272,272,272,272,272,272],[336,336,336,336,336,336,336],
                    [400,400,400,400,400,400,400],[464,464,464,464,464,464,464],
                    [528,528,528,528,528,528,528],[656,656,656,656,656,656,656],
                    [720,720,720,720,720,720,720],[784,784,784,784,784,784,784],
                    [848,848,848,848,848,848,848],[912,912,912,912,912,912,912],
                    [976,976,976,976,976,976,976],[1040,1040,1040,1040,1040,1040,1040]
                ],
                top: [
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784],
                    [400,464,528,592,656,720,784],[400,464,528,592,656,720,784]
                ]
            },
            dock: {
                left: [16,80,144,208,272,336,400,464,528,656,720,784,848,912,976,1040],
                top: [400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400]
            },
            attack: {
                left: [
                    [16,16,16,16,16,16],[80,80,80,80,80,80],
                    [144,144,144,144,144,144],[208,208,208,208,208,208],
                    [272,272,272,272,272,272],[336,336,336,336,336,336],
                    [400,400,400,400,400,400],[464,464,464,464,464,464],
                    [528,528,528,528,528,528],[656,656,656,656,656,656],
                    [720,720,720,720,720,720],[784,784,784,784,784,784],
                    [848,848,848,848,848,848],[912,912,912,912,912,912],
                    [976,976,976,976,976,976],[1040,1040,1040,1040,1040,1040]
                ],
                top: [
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336],
                    [16,80,144,208,272,336],[16,80,144,208,272,336]
                ]
            }
        },
        width: 32,//64N+16
        height: 32,//64N+16
        frame: {
            moving: 7,
            dock: 1,
            attack: 6 //Reserved
        },
        //Only for moving status, override
        speed:10,
        HP: 60,
        armor:1,
        MP: 200,
        sight:315,
        dieEffect:Burst.MedicDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:50,
            gas:25,
            man:1,
            time:300
        },
        upgrade:['UpgradeInfantryArmors'],
        items:{
            '7':{name:'Heal'},
            '8':{name:'Restoration',condition:function(){
                return Magic.Restoration.enabled
            }},
            '9':{name:'OpticalFlare',condition:function(){
                return Magic.OpticalFlare.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.turnAround.call(this);
        }
    }
});
Terran.Vulture=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.attack=this.imgPos.dock=this.imgPos.moving;
        this.frame.attack=this.frame.dock=this.frame.moving;
        this.spiderMines=3;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Vulture",
        imgPos: {
            moving: {
                left: [10,110,210,310,410,510,610,710,810,110,210,310,410,510,610,710],
                top: [10,10,10,10,10,10,10,10,10,110,110,110,110,110,110,110]
            }
        },
        width: 80,//100N+10
        height: 80,//100N+10
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:16,
        HP: 80,
        damage: 20,
        armor:0,
        sight:280,
        attackRange: 175,
        attackInterval: 3000,
        dieEffect:Burst.MiddleExplode,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.MIDDLE,
        attackType:AttackableUnit.WAVE_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:75,
            man:2,
            time:300
        },
        upgrade:['UpgradeVehicleWeapons','UpgradeVehicleArmors'],
        items:{
            '7':{name:'SpiderMines',condition:function(){
                return Magic.SpiderMines.enabled
            }}
        }
    }
});
Terran.Tank=AttackableUnit.extends({
    constructorPlus:function(props){
        this.imgPos.attack=this.imgPos.dock;
        this.frame.attack=this.frame.dock;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Tank",
        imgPos: {
            moving: {
                left: [
                    [24,24,24],[152,152,152],
                    [280,280,280],[408,408,408],
                    [536,536,536],[664,664,664],
                    [792,792,792],[920,920,920],
                    [1048,1048,1048],[1304,1304,1304],
                    [1432,1432,1432],[1560,1560,1560],
                    [1688,1688,1688],[1816,1816,1816],
                    [1944,1944,1944],[2072,2072,2072]
                ],
                top: [
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280],
                    [24,152,280],[24,152,280]
                ]
            },
            dock: {
                left: [24,152,280,408,536,664,792,920,1048,1304,1432,1560,1688,1816,1944,2072],
                top: [24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24]
            }
        },
        width: 80,//128N+24
        height: 80,//128N+24
        frame: {
            moving: 3,
            dock: 1
        },
        //Only for moving status, override
        speed:10,
        HP: 150,
        damage: 30,
        armor:1,
        sight:350,
        attackRange: 210,
        attackInterval: 3700,
        dieEffect:Burst.BigExplode,
        attackEffect:Burst.FireSpark,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.BIG,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:150,
            gas:100,
            man:2,
            time:500
        },
        upgrade:['UpgradeVehicleWeapons','UpgradeVehicleArmors'],
        items:{
            '7':{name:'SeigeMode',condition:function(){
                return Magic.SeigeMode.enabled
            }}
        }
    }
});
Terran.Goliath=AttackableUnit.extends({
    constructorPlus:function(props){
        //Bind bgm
        this.sound.attackG=new Audio(Game.CDN+'bgm/'+this.name+'.attack.wav');
        this.sound.attackF=new Audio(Game.CDN+'bgm/'+this.name+'.attackF.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Goliath",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0,0,0],[76,76,76,76,76,76,76,76,76,76],
                    [152,152,152,152,152,152,152,152,152,152],[228,228,228,228,228,228,228,228,228,228],
                    [304,304,304,304,304,304,304,304,304,304],[380,380,380,380,380,380,380,380,380,380],
                    [456,456,456,456,456,456,456,456,456,456],[532,532,532,532,532,532,532,532,532,532],
                    [608,608,608,608,608,608,608,608,608,608],[760,760,760,760,760,760,760,760,760,760],
                    [836,836,836,836,836,836,836,836,836,836],[912,912,912,912,912,912,912,912,912,912],
                    [988,988,988,988,988,988,988,988,988,988],[1064,1064,1064,1064,1064,1064,1064,1064,1064,1064],
                    [1140,1140,1140,1140,1140,1140,1140,1140,1140,1140],[1216,1216,1216,1216,1216,1216,1216,1216,1216,1216]
                ],
                top: [
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684],
                    [0,76,152,228,304,380,456,532,608,684],[0,76,152,228,304,380,456,532,608,684]
                ]
            },
            attack: {
                left: [
                    [0,0],[76,76],
                    [152,152],[228,228],
                    [304,304],[380,380],
                    [456,456],[532,532],
                    [608,608],[760,760],
                    [836,836],[912,912],
                    [988,988],[1064,1064],
                    [1140,1140],[1216,1216]
                ],
                top: [
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760],
                    [608,760],[608,760]
                ]
            },
            dock: {
                left: [0,76,152,228,304,380,456,532,608,760,836,912,988,1064,1140,1216],
                top: [608,608,608,608,608,608,608,608,608,608,608,608,608,608,608,608]
            }
        },
        width: 76,//76N
        height: 76,//76N
        frame: {
            moving: 10,
            dock: 1,
            attack:2
        },
        //Only for moving status, override
        speed:11,
        HP: 125,
        attackMode:{
            flying:{
                attackRange:175,
                attackInterval: 2200,
                damage:20,
                attackType:AttackableUnit.BURST_ATTACK
            },
            ground:{
                attackRange:175,
                attackEffect:Burst.ShootSpark,
                attackInterval: 2200,
                damage:12,
                attackType:AttackableUnit.NORMAL_ATTACK
            },
            status:false
        },
        //Default
        damage: 12,
        armor:1,
        sight:280,
        attackRange: 175,
        dieEffect:Burst.MiddleExplode,
        isFlying:false,
        unitType:Unit.BIG,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:50,
            man:2,
            time:400
        },
        upgrade:['UpgradeVehicleWeapons','UpgradeVehicleArmors']
    }
});
Terran.Wraith=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Bind bgm
        this.sound.attackG=new Audio(Game.CDN+'bgm/'+this.name+'.attack.wav');
        this.sound.attackF=new Audio(Game.CDN+'bgm/'+this.name+'.attackF.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "Wraith",
        imgPos: {
            moving: {
                left: [5,69,133,197,261,325,389,453,517,69,133,197,261,325,389,453],
                top: [5,5,5,5,5,5,5,5,5,69,69,69,69,69,69,69]
            }
        },
        width: 54,//64N+5
        height: 54,//64N+5
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:16,
        HP: 120,
        armor:0,
        MP: 200,
        sight:245,
        attackMode:{
            flying:{
                attackRange:175,
                attackInterval: 2200,
                damage:20,
                attackType:AttackableUnit.BURST_ATTACK
            },
            ground:{
                attackRange:105,
                attackInterval: 2200,
                damage:8,
                attackType:AttackableUnit.NORMAL_ATTACK
            },
            status:false
        },
        //Default
        damage: 8,
        attackRange: 105,
        dieEffect:Burst.MiddleExplode,
        isFlying:true,
        unitType:Unit.BIG,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:150,
            gas:100,
            man:2,
            time:600
        },
        upgrade:['UpgradeShipWeapons','UpgradeShipArmors'],
        items:{
            '7':{name:'Cloak',condition:function(){
                return Magic.Cloak.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Terran.Dropship=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        //Transport
        this.loadedUnits=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Dropship",
        imgPos: {
            moving: {
                left: [0,60,120,180,240,300,360,420,480,60,120,180,240,300,360,420],
                top: [0,0,0,0,0,0,0,0,0,60,60,60,60,60,60,60]
            }
        },
        width: 60,//N-1
        height: 60,//N-1
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:13,
        HP: 150,
        armor:1,
        sight:280,
        dieEffect:Burst.MiddleExplode,
        isFlying:true,
        unitType:Unit.BIG,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:100,
            man:2,
            time:500
        },
        upgrade:['UpgradeShipArmors'],
        items:{
            '8':{name:'Load'},
            '9':{name:'UnloadAll'}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        },
        die:Zerg.Overlord.prototype.die
    }
});
Terran.Vessel=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Vessel",
        imgPos: {
            moving: {
                left: [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],
                top: [24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24]
            }
        },
        width: 70,
        height: 55,
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:12,
        HP: 200,
        armor:1,
        MP: 200,
        sight:350,
        dieEffect:Burst.BigExplode,
        isFlying:true,
        unitType:Unit.BIG,
        detector:Gobj.detectorBuffer,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:225,
            man:2,
            time:800
        },
        upgrade:['UpgradeShipArmors'],
        items:{
            '7':{name:'DefensiveMatrix'},
            '8':{name:'EMPShockwave',condition:function(){
                return Magic.EMPShockwave.enabled
            }},
            '9':{name:'Irradiate',condition:function(){
                return Magic.Irradiate.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        }
    }
});
Terran.BattleCruiser=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "BattleCruiser",
        imgPos: {
            moving: {
                left: [13,133,253,373,493,613,733,853,973,133,253,373,493,613,733,853],
                top: [13,13,13,13,13,13,13,13,13,133,133,133,133,133,133,133]
            }
        },
        width: 94,//120N+13
        height: 94,//120N+13
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 500,
        damage: 25,
        armor:3,
        MP: 200,
        sight:385,
        attackRange: 210,
        attackInterval: 3000,
        dieEffect:Burst.BigExplode,
        isFlying:true,
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        cost:{
            mine:400,
            gas:300,
            man:8,
            time:1330
        },
        upgrade:['UpgradeShipWeapons','UpgradeShipArmors'],
        items:{
            '7':{name:'Yamato',condition:function(){
                return Magic.Yamato.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Terran.Valkyrie=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.attack=this.imgPos.dock=this.imgPos.moving;
        this.frame.attack=this.frame.dock=this.frame.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Valkyrie",
        imgPos: {
            moving: {
                left: [35,163,291,419,547,675,803,931,1059,163,291,419,547,675,803,931],
                top: [35,35,35,35,35,35,35,35,35,163,163,163,163,163,163,163]
            }
        },
        width: 58,//128N+35
        height: 58,//128N+35
        frame: {
            moving: 1
        },
        //Only for moving status, override
        speed:16,
        HP: 200,
        damage: 6,//6*3
        armor:2,
        sight:280,
        attackRange: 210,
        attackInterval: 600,
        dieEffect:Burst.MiddleExplode,
        isFlying:true,
        attackLimit:"flying",
        unitType:Unit.BIG,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.TerranBuilding.prototype.recover,
        AOE:{
            type:"LINE",
            hasEffect:true,
            radius:50
        },
        cost:{
            mine:250,
            gas:125,
            man:3,
            time:500
        },
        upgrade:['UpgradeShipWeapons','UpgradeShipArmors'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Terran.Civilian=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Civilian",
        imgPos: {
            moving: {
                left: [
                    [11,11,11,11,11,11,11,11],[35,35,35,35,35,35,35,35],
                    [60,60,60,60,60,60,60,60],[84,84,84,84,84,84,84,84],
                    [108,108,108,108,108,108,108,108],[131,131,131,131,131,131,131,131],
                    [154,154,154,154,154,154,154,154],[177,177,177,177,177,177,177,177],
                    [200,200,200,200,200,200,200,200],[224,224,224,224,224,224,224,224],
                    [248,248,248,248,248,248,248,248],[272,272,272,272,272,272,272,272],
                    [293,293,293,293,293,293,293,293],[317,317,317,317,317,317,317,317],
                    [342,342,342,342,342,342,342,342],[366,366,366,366,366,366,366,366]
                ],
                top: [
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211],
                    [246,0,37,70,105,142,176,211],[246,0,37,70,105,142,176,211]
                ]
            }
        },
        width: 21,
        height: 31,
        frame: {
            moving: 8,
            dock: 1
        },
        //Only for moving status, override
        speed:6,
        HP: 60,
        armor:0,
        sight:245,
        dieEffect:Burst.HumanDeath,
        isFlying:false,
        unitType:Unit.SMALL,
        recover:Building.TerranBuilding.prototype.recover,
        upgrade:['UpgradeInfantryArmors'],
        //Override
        dock:function(){
            //Use the same behavior
            Unit.turnAround.call(this);
        }
    }
});

/***/ }),
/* 14 */
/***/ (function(module, exports) {

//Define unit which has HP/direction and be selectable, unattackable unit
var Unit=Gobj.extends({
    constructorPlus:function(props){
        //Add id for unit
        this.id=Unit.currentID++;
        this.direction=Unit.randomDirection();
        this.angle=0;
        this.life=this.get('HP');
        if (this.SP) this.shield=this.get('SP');
        if (this.MP) this.magic=50;
        this.selected=false;
        //Each unit instance has its own sound
        this.sound={
            selected:new Audio(Game.CDN+'bgm/'+this.name+'.selected.wav'),
            moving:new Audio(Game.CDN+'bgm/'+this.name+'.moving.wav'),
            death:new Audio(Game.CDN+'bgm/'+this.name+'.death.wav')
        };
        //Execute below after inherited class fully constructed, postpone
        var myself=this;
        Game.commandTimeout(function(){
            //Add this unit into Game
            Unit.allUnits.push(myself);
            //Flying units show above ground units
            Unit.sortAllUnits();
            //Show unit
            myself.dock();
        },0);
    },
    prototypePlus:{
        name:"Unit",
        isFlying:true,
        //Override Gobj method
        animeFrame:function(){
            //Animation play
            this.action++;
            //Override Gobj here, support hidden frames
            var arrLimit=(this.imgPos[this.status].left[0] instanceof Array)?(this.imgPos[this.status].left[0].length):1;
            if (this.action==this.frame[this.status] || this.action>=arrLimit) {
                this.action=0;
            }
            //Multiple hidden frames support
            if (this.imgPos[this.status].left[0][this.action]==-1) this.action=0;
        },
        detectOutOfBound:function(){
            var boundX=Map.getCurrentMap().width-this.width;
            var boundY=Map.getCurrentMap().height-this.height;
            //Right Bound
            if (this.x>boundX) {
                this.x=boundX;
            }
            //Left Bound
            if (this.x<0) {
                this.x=0;
            }
            //Bottom Bound
            if (this.y>boundY) {
                this.y=boundY;
            }
            //Top Bound
            if (this.y<0) {
                this.y=0;
            }
        },
        //Can move in any direction
        updateLocation:function(){
            this.x=Math.round(this.x+this.get('speed')*Math.cos(this.angle));
            this.y=Math.round(this.y+this.get('speed')*Math.sin(this.angle));
        },
        //Add new functions to prototype
        turnTo:function(direction){
            //Change direction
            this.direction=direction;
        },
        //Dock means stop moving but keep animation
        dock:function(){
            //Clear old timer
            this.stop();
            //Launch new dock timer
            this.status="dock";
            this.action=0;
            //Stop routing
            delete this.allFrames['routing'];
            var myself=this;
            var animateFrame=function(){
                //Only play animation, will not move
                myself.animeFrame();
            };
            this.allFrames['animate']=animateFrame;
        },
        stand:function(){
            this.dock();
        },//alias
        stopMoving:function(){
            this.dock();
        },//alias
        run:function(){
            this.moving();
        },//alias
        navigateTo:function(clickX,clickY,range){
            if (!range) range=Unit.moveRange;//Smallest limit by default
            //Center position
            var charaX=this.posX();
            var charaY=this.posY();
            //Already at check point
            if (this.insideCircle({centerX:clickX,centerY:clickY,radius:range})) {
                this.dock();
                //Stop routing
                delete this.allFrames['routing'];
                //Reach destination flag
                return true;
            }
            //Need move
            else {
                var vector=[clickX-this.posX(),clickY-this.posY()];
                vector=vector.map(function(n){
                    return n/_$.hypot(vector);
                });
                //Only unit on ground will collide with others
                const FORCE=0.4;
                if (!this.isFlying){
                    const myself=this;
                    //Soft collision
                    var softCollisions=Unit.allUnits.concat(Building.allBuildings).filter(function(chara){
                        if (chara==myself) return false;
                        else return !(chara.isFlying) && chara.softCollideWith(myself);
                    });
                    softCollisions.forEach(function(chara){
                        var softResist=[myself.posX()-chara.posX(),myself.posY()-chara.posY()];
                        softResist=softResist.map(function(n){
                            return n*FORCE/_$.hypot(softResist);
                        });
                        vector[0]+=softResist[0];
                        vector[1]+=softResist[1];
                    });
                    //Hard collision
                    softCollisions.filter(function(chara){
                        return chara.collideWith(myself);
                    }).forEach(function(chara){
                        var hardResist=[myself.posX()-chara.posX(),myself.posY()-chara.posY()];
                        hardResist=hardResist.map(function(n){
                            return n*FORCE/_$.hypot(hardResist);
                        });
                        vector[0]+=hardResist[0];
                        vector[1]+=hardResist[1];
                    });
                }
                this.turnTo(Unit.wrapDirection(vector));
                vector.reverse();//y,x
                this.angle=Math.atan2(vector[0],vector[1]);
            }
        },
        faceTo:function(target,preventAction){
            var direction;
            //Unit or Building
            if (target instanceof Gobj){
                direction=Unit.wrapDirection([target.posX()-this.posX(),target.posY()-this.posY()]);
            }
            else {
                //Location={x:1,y:2}
                direction=Unit.wrapDirection([target.x-this.posX(),target.y-this.posY()]);
            }
            if (!preventAction) this.turnTo(direction);
            return direction;
        },
        escapeFrom:function(enemy){
            //Add to fix holding issue
            if (this.hold) return;
            //From enemy to myself
            var escapeVector=[this.posX()-enemy.posX(),this.posY()-enemy.posY()];
            //Move by 100px
            escapeVector=escapeVector.map(function(n){
                return n*100/_$.hypot(escapeVector);
            });
            //Escape along vector
            this.moveTo(this.posX()+escapeVector[0],this.posY()+escapeVector[1]);
        },
        moveTo:function(clickX,clickY,range,callback){
            if (!range) range=Unit.moveRange;//Smallest limit by default
            //Start new routing
            var myself=this;
            var routingFrame=function(){
                if (myself.navigateTo(clickX,clickY,range)){
                    //Run callback when reach target
                    if (typeof(callback)=='function') callback();
                    return true;
                }
            };
            this.allFrames['routing']=routingFrame;
            //Start moving
            this.run();
        },
        moveToward:function(target,range,callback){
            if (!range) range=Unit.moveRange;//Smallest limit by default
            //Start new routing
            var myself=this;
            var routingFrame=function(){
                if (target.status!='dead'){
                    if (myself.navigateTo(target.posX(),target.posY(),range)) {
                        //Run callback when reach target
                        if (typeof(callback)=='function') callback();
                        //Reach destination flag, fix twice callback issue
                        return true;
                    }
                }
                //Will stop move toward dead target
                else {
                    delete myself.allFrames['routing'];
                    myself.dock();
                }
            };
            this.allFrames['routing']=routingFrame;
            //Start moving
            this.run();
        },
        //Override for sound effect
        die:function(){
            //Old behavior
            Gobj.prototype.die.call(this);
            this.life=0;
            //Stop routing
            delete this.allFrames['routing'];
            //If has sound effect
            if (this.sound.death && this.insideScreen()) {
                this.sound.death.play();
            }
        },
        //AI when attacked by enemy
        reactionWhenAttackedBy:function(enemy,onlyDamage){
            //Resign and give reward to enemy if has no life before dead
            if (this.life<=0) {
                //If multiple target, only die once and give reward
                if (this.status!="dead") {
                    //Killed by enemy
                    this.die();
                    //Give enemy reward
                    enemy.kill++;
                }
                //Already dead, cannot take following actions
                return;
            }
            //Run away toward bullet direction
            if (this.status=="dock" && !onlyDamage){
                this.escapeFrom(enemy);
            }
        },
        //Calculate damage, if enemy is damage itself, return that damage directly
        calculateDamageBy:function(enemyObj){
            var damage=0;
            if (enemyObj instanceof Gobj){
                var enemyAttackType=enemyObj.attackType;
                if (!enemyAttackType && enemyObj.attackMode){
                    enemyAttackType=(this.isFlying)?enemyObj.attackMode.flying.attackType:enemyObj.attackMode.ground.attackType;
                }
                damage=enemyObj.get('damage')*Unit.attackMatrix[enemyAttackType][this.unitType];
            }
            else damage=enemyObj;
            return damage;
        },
        getDamageBy:function(enemy,percent){
            if (percent==undefined) percent=1;//100% by default
            var damage=0;
            //If has SP and shield remain
            if (this.shield>0) {
                damage=((this.calculateDamageBy(enemy)-this.get('plasma'))*percent)>>0;
                if (damage<1) damage=0.5;
                this.shield-=damage;
                if (this.shield<0) {
                    //Inherit damage
                    this.life+=(this.shield);
                    this.shield=0;
                }
            }
            else {
                damage=((this.calculateDamageBy(enemy)-this.get('armor'))*percent)>>0;
                if (damage<1) damage=0.5;
                this.life-=damage;
            }
        },
        //Attack ground action
        attackGround:function(position,loop){
            //Convert to array
            var positions=[].concat(position);
            if (this.attack) this.stopAttack();
            //Move to first position
            this.moveTo(positions[0].x,positions[0].y);
            this.targetLock=false;
            var checkpoint=this.destination=positions[0];
            //Join destination chain from next
            positions.slice(1).forEach(function(pos){
                checkpoint.next=pos;
                checkpoint=checkpoint.next;
            });
            //Patrol loop, dead lock
            if (loop) checkpoint.next=this.destination;
        },
        //Patrol action
        patrol:function(position,addHere){
            //Convert to array
            var positions=[].concat(position);
            if (addHere) positions.push({x:this.posX(),y:this.posY()});
            this.attackGround(positions,true);
        },
        isMachine:function(){
            return ["SCV","Vulture","Tank","Goliath","Wraith","Dropship","Vessel","BattleCruiser","Valkyrie",
                "Probe","Dragoon","Shuttle","Reaver","Observer","Scout","Carrier","Arbiter","Corsair","HeroCruiser"]
                .indexOf(this.name)!=-1;
        },
        //Life status
        lifeStatus:function(){
            var lifeRatio=this.life/this.get('HP');
            return ((lifeRatio>0.7)?"green":(lifeRatio>0.3)?"yellow":"red");
        }
    }
});
//Assign current ID to each newly born unit
Unit.currentID=0;
//Smallest range for move precision
Unit.moveRange=20;
//Range for mouse select
Unit.selectRange=20;
//Range for melee attack
Unit.meleeRange=25;//50
//Speed matrix, 2^0.5=>0.7
Unit.speedMatrix=[
    {x: 0, y: -1},{x: 0.4, y: -0.9},
    {x: 0.7, y: -0.7},{x: 0.9, y: -0.4},
    {x: 1, y: 0},{x: 0.9, y: 0.4},
    {x: 0.7, y: 0.7},{x: 0.4, y: 0.9},
    {x: 0, y: 1},{x: -0.4, y: 0.9},
    {x: -0.7, y: 0.7},{x: -0.9, y: 0.4},
    {x: -1, y: 0},{x: -0.9, y: -0.4},
    {x: -0.7, y: -0.7},{x: -0.4, y: -0.9}
];
//Get speed matrix by unit speed
Unit.getSpeedMatrixBy=function(speed){
    var speedMatrix=_$.clone(Unit.speedMatrix);
    _$.matrixOperation(speedMatrix,function(N){
        return N*speed;
    });
    return speedMatrix;
};
//All units' sight
Unit.sight=300;
//Attack type matrix
Unit.attackMatrix=[
    [1,1,1],
    [0.5,0.75,1],
    [1,0.5,0.25]
];
//Unit type
Unit.SMALL=0;
Unit.MIDDLE=1;
Unit.BIG=2;
//All existed units, class property
Unit.allUnits=[];
Unit.allOurUnits=function(){
    return Unit.allUnits.filter(function(chara){
        return !(chara.isEnemy());
    });
};
Unit.allEnemyUnits=function(){
    return Unit.allUnits.filter(function(chara){
        return chara.isEnemy();
    });
};
Unit.allFlyingUnits=function(){
    return Unit.allUnits.filter(function(chara){
        return chara.isFlying;
    });
};
Unit.allGroundUnits=function(){
    return Unit.allUnits.filter(function(chara){
        return !(chara.isFlying);
    });
};
//Get all units count
Unit.count=function(){
    return Unit.allUnits.reduce(function(counts,chara){
        counts[chara.team]++;
        return counts;
    },Game.getPropArray(0));
};
//Sort all units to show flying unit above/after ground unit
Unit.sortAllUnits=function(){
    Unit.allUnits.sort(function(unit1,unit2){
        return (unit1.isFlying?1:0)-(unit2.isFlying?1:0);
    });
};
//Sort units
Unit.sortUnits=function(units){
    units.sort(function(unit1,unit2){
        return (unit1.isFlying?1:0)-(unit2.isFlying?1:0);
    });
};
//Random direction but can keep all clients same
Unit.randomDirection=function(){
    //Clossure variable and function
    var rands=[];
    var getRands=function(){
        //Use current tick X randomSeed as seed
        var seed=Game.mainTick+Game.randomSeed;
        var rands=[];
        for (var N=0;N<16;N++){
            //Seed grows up
            seed=(seed*5+3)%16;//range=16
            rands.push(seed);
        }
        return rands;
    };
    return function(){
        //If all rands used, generate new ones
        if (rands.length==0) rands=getRands();
        return rands.shift();
    }
}();
//Convert from vector to 16 directions
Unit.wrapDirection=function(vector){
    //Atan2 can distinguish from -PI~PI, Y-axis is reverse
    var angle=Math.atan2(vector[1],vector[0]);
    var piece=Math.PI/16;
    if (angle>(piece*15)) return 12;
    if (angle>(piece*13)) return 11;
    if (angle>(piece*11)) return 10;
    if (angle>(piece*9)) return 9;
    if (angle>(piece*7)) return 8;
    if (angle>(piece*5)) return 7;
    if (angle>(piece*3)) return 6;
    if (angle>piece) return 5;
    if (angle>(-piece)) return 4;
    if (angle>(-piece*3)) return 3;
    if (angle>(-piece*5)) return 2;
    if (angle>(-piece*7)) return 1;
    if (angle>(-piece*9)) return 0;
    if (angle>(-piece*11)) return 15;
    if (angle>(-piece*13)) return 14;
    if (angle>(-piece*15)) return 13;
    else return 12;
};
//Dock action I
Unit.turnAround=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var dockFrame=function(){
        //Every 2 sec
        if ((Game.mainTick+myself.id)%20==0){
            //Look around animation
            if (myself.status=="dock") {
                myself.turnTo((myself.direction+1)%16);//For all ground soldier to use
            }
            else delete myself.allFrames['dock'];
        }
    };
    this.allFrames['dock']=dockFrame;
};
//Dock action II
Unit.walkAround=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var dockFrame=function(){
        //Every 2 sec
        if ((Game.mainTick+myself.id)%20==0){
            var direction=Unit.randomDirection();
            //Walk around, for all critters to use
            if (myself.status=="dock") {
                myself.moveTo(myself.posX()+myself.get('speed')*(Unit.speedMatrix[direction].x)*6,
                    myself.posY()+myself.get('speed')*(Unit.speedMatrix[direction].y)*6);
            }
            else delete myself.allFrames['dock'];
        }
    };
    this.allFrames['dock']=dockFrame;
};
//Dock action III
Unit.hover=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var N=0;
    var hoverOffset=1;
    var dockFrame=function(){
        //Every 200 ms
        if (Game.mainTick%2==0){
            //Hover animation
            if (myself.status=="dock") {
                myself.y+=hoverOffset;
                if (N%4==0) {
                    //myself.turnTo((myself.direction+1)%16);//For marine to use
                    hoverOffset=-hoverOffset;//Hover up and down
                }
            }
            else delete myself.allFrames['dock'];
            N++;
        }
    };
    this.allFrames['dock']=dockFrame;
};
//Dock action IV
Unit.walkAroundLarva=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var dockFrame=function(){
        //Every 2 sec
        if (Game.mainTick%20==0){
            //Walk around, for larva to use
            if (myself.status=="dock") {
                if (myself.moved) {
                    //Return to original position, range=larva.speed=4
                    Unit.prototype.moveTo.call(myself,myself.originX,myself.originY,4);
                    myself.moved=false;
                }
                else {
                    //Left from original position, range=larva.speed=4
                    myself.direction=Unit.randomDirection();
                    Unit.prototype.moveTo.call(myself,
                        myself.posX()+myself.get('speed')*(Unit.speedMatrix[myself.direction].x)*2,
                        myself.posY()+myself.get('speed')*(Unit.speedMatrix[myself.direction].y)*2,4);
                    myself.moved=true;
                }
            }
            else delete myself.allFrames['dock'];
        }
    };
    this.allFrames['dock']=dockFrame;
};
var AttackableUnit=Unit.extends({
    constructorPlus:function(props){
        this.bullet={};
        this.kill=0;
        this.target={};
        //Idle by default
        this.targetLock=false;
        //Can fire by default
        this.coolDown=true;
        //Init attack range
        if (this.meleeAttack) this.attackRange=Math.max(this.radius(),35);
        //Add attack sound for AttackableUnit
        this.sound.attack=new Audio(Game.CDN+'bgm/'+this.name+'.attack.wav');
    },
    prototypePlus:{
        //Add basic unit info
        name:"AttackableUnit",
        isInAttackRange:function(enemy){
            return enemy.inside({centerX:this.posX(),centerY:this.posY(),radius:this.get('attackRange')});
        },
        matchAttackLimit:function(enemy){
            //Has attack limit
            if (this.attackLimit){
                //Doesn't match attack limit
                if ((this.attackLimit=="flying" && !(enemy.isFlying)) ||
                    (this.attackLimit=="ground" && enemy.isFlying)) return false;
            }
            //No attack limit or match attack limit
            return true;
        },
        attack:function(enemy){
            //Cannot attack invisible unit or unit who mismatch your attack type
            if (enemy['isInvisible'+this.team] || !(this.matchAttackLimit(enemy))) {
                Referee.voice('pError').play();
                this.stopAttack();
                return;
            }
            //Don't attack same target again unless miss target or tracing target
            if (this.target==enemy) {
                if (this.cannotReachTarget()) {
                    if (this.status=='moving') return;//tracing
                }
                else return;
            }
            //Recover attack range
            else delete this.tracing;
            if (enemy instanceof Gobj && enemy.status!="dead") {
                //Stop old attack and moving
                this.stopAttack();
                this.dock();
                //New attack
                this.target=enemy;
                //Get melee attack range if melee attack unit
                if (this.meleeAttack) {
                    //Override
                    this.attackRange=this.radius()+enemy.radius();
                }
                //If separate attack mode, override
                if (this.attackMode) {
                    this.Bullet=(enemy.isFlying)?this.attackMode.flying.Bullet:this.attackMode.ground.Bullet;
                    this.attackRange=(enemy.isFlying)?this.get('attackMode.flying.attackRange'):this.get('attackMode.ground.attackRange');
                    this.attackEffect=(enemy.isFlying)?this.attackMode.flying.attackEffect:this.attackMode.ground.attackEffect;
                    this.attackInterval=(enemy.isFlying)?this.get('attackMode.flying.attackInterval'):this.get('attackMode.ground.attackInterval');
                    //Change attack bgm
                    this.sound.attack=(enemy.isFlying)?this.sound.attackF:this.sound.attackG;
                    this.damage=(enemy.isFlying)?this.get('attackMode.flying.damage'):this.get('attackMode.ground.damage');
                    this.attackType=(enemy.isFlying)?this.attackMode.flying.attackType:this.attackMode.ground.attackType;
                    this.attackMode.status=enemy.isFlying;
                }
                //Move in attack range, no need to move melee
                var range=this.get('attackRange');
                if (this.tracing) {
                    //Adjust attack range for tracing
                    range=Math.max(this.get('attackRange')*0.7,(this.radius()+enemy.radius())*0.6);
                    delete this.tracing;
                }
                //Add to fix holding issue
                if (!this.hold) this.moveToward(enemy,range);
                var myself=this;
                var attackFrame=function(){
                    //If enemy already dead or becomes invisible or we just miss enemy
                    if (enemy.status=="dead" || enemy['isInvisible'+myself.team] || myself.isMissingTarget()) {
                        myself.stopAttack();
                        myself.dock();
                    }
                    else {
                        //Cannot come in until reload cool down, only dock down can finish attack animation
                        if (myself.isReloaded && myself.isReloaded() && myself.isInAttackRange(enemy) && myself.status=="dock") {
                            //Load bullet
                            myself.coolDown=false;
                            //Cool down after attack interval
                            Game.commandTimeout(function(){
                                myself.coolDown=true;
                            },myself.get('attackInterval'));
                            //If AOE, init enemies
                            var enemies;
                            if (myself.AOE) {
                                //Get possible targets
                                switch(myself.attackLimit){
                                    case "flying":
                                        enemies=Unit.allUnits.filter(function(chara){
                                            return chara.team!=myself.team && chara.isFlying;
                                        });
                                        break;
                                    case "ground":
                                        var enemyUnits=Unit.allUnits.filter(function(chara){
                                            return chara.team!=myself.team && !(chara.isFlying);
                                        });
                                        var enemyBuildings=Building.allBuildings.filter(function(chara){
                                            return chara.team!=myself.team;
                                        });
                                        enemies=enemyUnits.concat(enemyBuildings);
                                        break;
                                    default:
                                        enemies=(Unit.allUnits.concat(Building.allBuildings)).filter(function(chara){
                                            return chara.team!=myself.team;
                                        });
                                        break;
                                }
                                //Range filter
                                switch (myself.AOE.type) {
                                    case "LINE":
                                        //Calculate inter-points between enemy
                                        var N=Math.ceil(myself.distanceFrom(enemy)/(myself.AOE.radius));
                                        enemies=enemies.filter(function(chara){
                                            for (var n=1;n<=N;n++){
                                                var X=myself.posX()+n*(enemy.posX()-myself.posX())/N;
                                                var Y=myself.posY()+n*(enemy.posY()-myself.posY())/N;
                                                if (chara.insideCircle({centerX:X>>0,centerY:Y>>0,radius:myself.AOE.radius})
                                                    && !chara['isInvisible'+myself.team]) {
                                                    return true;
                                                }
                                            }
                                            return false;
                                        });
                                        break;
                                    case "MULTIPLE":
                                    case "CIRCLE":
                                    //Default type is CIRCLE
                                    default:
                                        enemies=enemies.filter(function(chara){
                                            return chara.insideCircle(
                                                {centerX:enemy.posX(),centerY:enemy.posY(),radius:myself.AOE.radius})
                                                && !chara['isInvisible'+myself.team];
                                        })
                                }
                            }
                            //First facing to enemy
                            myself.faceTo(enemy);
                            //Show attack animation if has
                            if (myself.imgPos.attack) {
                                myself.action=0;
                                //Change status to show attack frame
                                myself.status="attack";
                                //Will return to dock after attack
                                Game.commandTimeout(function(){
                                    //If still show attack
                                    if (myself.status=="attack") {
                                        myself.status="dock";
                                        myself.action=0;
                                    }
                                },myself.frame.attack*100);//attackAnimation < attackInterval
                            }
                            //If has bullet
                            if (myself.Bullet) {
                                var fireBullet=function(){
                                    //Will shoot multiple bullets in one time
                                    if (myself.continuousAttack) {
                                        myself.bullet=[];
                                        for (var N=0;N<myself.continuousAttack.count;N++){
                                            var bullet=new myself.Bullet({
                                                from:myself,
                                                to:enemy
                                            });
                                            //Reassign bullets location
                                            if (myself.continuousAttack.layout) myself.continuousAttack.layout(bullet,N);
                                            if (myself.continuousAttack.onlyOnce && N!=(myself.continuousAttack.count/2>>0)) {
                                                bullet.noDamage=true;
                                            }
                                            bullet.fire();
                                            myself.bullet.push(bullet);
                                        }
                                    }
                                    else {
                                        if (myself.AOE && myself.AOE.type=="MULTIPLE"){
                                            for (var N=0;N<Math.min(myself.AOE.count,enemies.length);N++){
                                                new myself.Bullet({
                                                    from:myself,
                                                    to:enemies[N]
                                                }).fire();
                                            }
                                        }
                                        else {
                                            //Reload one new bullet
                                            myself.bullet=new myself.Bullet({
                                                from:myself,
                                                to:enemy
                                            });
                                            myself.bullet.fire();
                                        }
                                    }
                                };
                                if (myself.fireDelay) Game.commandTimeout(function(){
                                    fireBullet();
                                },myself.fireDelay);
                                else fireBullet();
                            }
                            //Else will cause damage immediately (melee attack)
                            else {
                                //Cause damage when burst appear
                                //If AOE, only enemy unit has AOE
                                if (myself.AOE) {
                                    enemies.forEach(function(chara){
                                        chara.getDamageBy(myself);
                                        chara.reactionWhenAttackedBy(myself);
                                    })
                                }
                                else {
                                    //Cause damage after finish whole melee attack action
                                    Game.commandTimeout(function(){
                                        enemy.getDamageBy(myself);
                                        enemy.reactionWhenAttackedBy(myself);
                                    },myself.frame.attack*100);
                                }
                                //Will die if suicide attack unit
                                if (myself.suicide) myself.die();
                            }
                            //If has attack effect (burst)
                            if (myself.attackEffect) {
                                if (myself.AOE && myself.AOE.hasEffect) {
                                    enemies.forEach(function(chara){
                                        new myself.attackEffect({x:chara.posX(),y:chara.posY()});
                                    })
                                }
                                else {
                                    new myself.attackEffect({x:enemy.posX(),y:enemy.posY()});
                                }
                            }
                            //Sound effect, missile attack unit will play sound when bullet fire
                            if (!myself.Bullet && myself.insideScreen()) myself.sound.attack.play();
                        }
                    }
                };
                this.allFrames['attack']=attackFrame;
            }
        },
        stopAttack:function(){
            //Stop attacking animation
            delete this.allFrames['attack'];
            //Clear target
            this.target={};
        },
        findNearbyTargets:function(){
            //Initial
            var myself=this;
            var units=Unit.allUnits.filter(function(chara){
                return chara.team!=myself.team;
            });
            var buildings=Building.allBuildings.filter(function(chara){
                return chara.team!=myself.team;
            });
            var results=[];
            var targets=[
                units.filter(function(chara){
                    return chara.attack}),
                buildings.filter(function(chara){
                    return chara.attack}),
                units.filter(function(chara){
                    return !chara.attack}),
                buildings.filter(function(chara){
                    return !chara.attack})
            ];
            targets.forEach(function(charas){
                var myX=myself.posX();
                var myY=myself.posY();
                charas=charas.filter(function(chara){
                    return !chara['isInvisible'+myself.team] && myself.canSee(chara) && myself.matchAttackLimit(chara);
                }).sort(function(chara1,chara2){
                    var X1=chara1.posX(),Y1=chara1.posY(),X2=chara2.posX(),Y2=chara2.posY();
                    return (X1-myX)*(X1-myX)+(Y1-myY)*(Y1-myY)-(X2-myX)*(X2-myX)-(Y2-myY)*(Y2-myY);
                });
                results=results.concat(charas);
            });
            //Take attackable>>unattackable,unit>>building,near>>far as priority, will attracted if be attacked
            return results;
        },
        highestPriorityTarget:function(){
            return this.findNearbyTargets()[0];
        },
        AI:function(){
            //Dead unit doesn't have following AI
            if (this.status=='dead') return;
            //If no mission, return it to scout status
            if (this.isIdle()) this.targetLock=false;
            //AI:Attack insight enemy automatically when alive
            //If locking target
            if (this.targetLock) {
                // target ran out of attack range
                if (this.cannotReachTarget()) {
                    this.followEnemy();
                }
            }
            //If not lock target
            else {
                //Find in-range enemy by attack priority
                var enemy=this.highestPriorityTarget();
                //If not attacking but find in-range enemy
                if (!this.isAttacking() && enemy) {
                    this.attack(enemy);
                }
                //If target ran outside attack range
                if (this.cannotReachTarget()) {
                    //but find insight other enemy
                    if (enemy && this.target!=enemy) {
                        this.attack(enemy);
                    }
                    //No other enemy in sight
                    else {
                        this.followEnemy();
                    }
                }
            }
        },
        //Override
        reactionWhenAttackedBy:function(enemy,onlyDamage){
            //Resign and give reward to enemy if has no life before dead
            if (this.life<=0) {
                //If multiple target, only die once and give reward
                if (this.status!="dead") {
                    //Killed by enemy
                    this.die();
                    //Give enemy reward
                    enemy.kill++;
                }
                //Already dead, cannot take following actions
                return;
            }
            //AI when attacked by enemy
            if (!onlyDamage){
                if (this.attack && this.matchAttackLimit(enemy) && !enemy['isInvisible'+this.team]){
                    if (this.isIdle()) {
                        //Will hatred toward enemy
                        this.attack(enemy);
                    }
                    else if (!this.targetLock && this.target.target!==this){
                        //Will be attracted by higher hatred enemy
                        this.attack(enemy);
                    }
                }
                else {
                    if (this.isIdle()) this.escapeFrom(enemy);
                }
            }
        },
        isAttacking:function(){
            //Has target
            return (this.target instanceof Gobj);
        },
        followEnemy:function(){
            //Remind to attack again
            this.attack(this.target);
            //Filter out building target
            if (this.target instanceof Unit) this.tracing=true;
        },
        isTracing:function(){
            return this.isAttacking() && this.status=="moving";
        },
        isFiring:function(){
            //May out of range and cannot fire, don't follow when attack status
            return this.isAttacking() && this.status=="dock";
        },
        //Override
        isIdle:function(){
            //Not moving or attacking
            return !this.isAttacking() && this.status=="dock";
        },
        cannotReachTarget:function(){
            //Found target outside attack range after once firing, need follow once
            return this.isFiring() && !(this.isInAttackRange(this.target));
        },
        isMissingTarget:function(){
            //Lock on target has global sight, lock off (attackGround) use its own sight
            return !this.targetLock && this.isAttacking() && !(this.canSee(this.target));
        },
        isReloaded:function(){
            //Add for newly reloaded yamato, two kinds of bullet conflict, ignore bullet array
            if ((this.bullet instanceof Gobj) && this.bullet.status!='dead') return false;
            return this.coolDown;
        },
        //Override for attackable unit
        die:function(){
            //Old behavior
            Unit.prototype.die.call(this);
            //Clear new timer for unit
            this.stopAttack();
            this.selected=false;
        }
    }
});
//Attack type
AttackableUnit.NORMAL_ATTACK=0;
AttackableUnit.BURST_ATTACK=1;
AttackableUnit.WAVE_ATTACK=2;
//Dock action I, override
AttackableUnit.turnAround=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var dockFrame=function(){
        //Every 2 sec
        if ((Game.mainTick+myself.id)%20==0){
            //Look around animation
            if (myself.isIdle()) {
                myself.turnTo((myself.direction+1)%16);//For all ground soldier to use
            }
            else delete myself.allFrames['dock'];
        }
    };
    this.allFrames['dock']=dockFrame;
};
//Dock action II, override
AttackableUnit.walkAround=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var dockFrame=function(){
        //Every 2 sec
        if ((Game.mainTick+myself.id)%20==0){
            var direction=Unit.randomDirection();
            //Walk around, for all critters to use
            if (myself.isIdle()) {
                myself.moveTo(myself.posX()+myself.get('speed')*(Unit.speedMatrix[direction].x)*6,
                    myself.posY()+myself.get('speed')*(Unit.speedMatrix[direction].y)*6);
            }
            else delete myself.allFrames['dock'];
        }
    };
    this.allFrames['dock']=dockFrame;
};
//Dock action III, override
AttackableUnit.hover=function(){
    //Inherited dock from Unit.js
    Unit.prototype.dock.call(this);
    //Add in new things
    var myself=this;
    var N=0;
    var hoverOffset=1;
    var dockFrame=function(){
        //Every 200 ms
        if (Game.mainTick%2==0){
            //Hover animation
            if (myself.isIdle()) {
                myself.y+=hoverOffset;
                if (N%4==0) {
                    //myself.turnTo((myself.direction+1)%8);//For marine to use
                    hoverOffset=-hoverOffset;//Hover up and down
                }
            }
            else delete myself.allFrames['dock'];
            N++;
        }
    };
    this.allFrames['dock']=dockFrame;
};

/***/ }),
/* 15 */
/***/ (function(module, exports) {

var Upgrade={
    //Terran
    UpgradeInfantryWeapons:{
        name:"UpgradeInfantryWeapons",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.Marine.prototype.damage[team]+=1;
            Terran.Firebat.prototype.damage[team]+=2;
            Terran.Ghost.prototype.damage[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.EngineeringBay.prototype.items[1];
        }
    },
    UpgradeInfantryArmors:{
        name:"UpgradeInfantryArmors",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.SCV.prototype.armor[team]+=1;
            Terran.Marine.prototype.armor[team]+=1;
            Terran.Firebat.prototype.armor[team]+=1;
            Terran.Ghost.prototype.armor[team]+=1;
            Terran.Medic.prototype.armor[team]+=1;
            Terran.Civilian.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.EngineeringBay.prototype.items[2];
        }
    },
    ResearchU238Shells:{
        name:"ResearchU238Shells",
        cost:{
            mine:150,
            gas:150,
            time:1000
        },
        effect:function(team){
            Terran.Marine.prototype.attackRange[team]=175;
            delete Building.TerranBuilding.Academy.prototype.items[1];
        }
    },
    ResearchStimPackTech:{
        name:"ResearchStimPackTech",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.StimPacks.enabled=true;
            delete Building.TerranBuilding.Academy.prototype.items[2];
        }
    },
    ResearchRestoration:{
        name:"ResearchRestoration",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.Restoration.enabled=true;
            delete Building.TerranBuilding.Academy.prototype.items[4];
        }
    },
    ResearchOpticalFlare:{
        name:"ResearchOpticalFlare",
        cost:{
            mine:100,
            gas:100,
            time:1200
        },
        effect:function(){
            Magic.OpticalFlare.enabled=true;
            delete Building.TerranBuilding.Academy.prototype.items[5];
        }
    },
    ResearchCaduceusReactor:{
        name:"ResearchCaduceusReactor",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Terran.Medic.prototype.MP[team]=250;
            delete Building.TerranBuilding.Academy.prototype.items[6];
        }
    },
    ResearchIonThrusters:{
        name:"ResearchIonThrusters",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(team){
            Terran.Vulture.prototype.speed[team]=20;
            delete Building.TerranBuilding.MachineShop.prototype.items[1];
        }
    },
    ResearchSpiderMines:{
        name:"ResearchSpiderMines",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.SpiderMines.enabled=true;
            delete Building.TerranBuilding.MachineShop.prototype.items[2];
        }
    },
    ResearchSiegeTech:{
        name:"ResearchSiegeTech",
        cost:{
            mine:150,
            gas:150,
            time:800
        },
        effect:function(){
            Magic.SeigeMode.enabled=true;
            delete Building.TerranBuilding.MachineShop.prototype.items[3];
        }
    },
    ResearchCharonBoosters:{
        name:"ResearchCharonBoosters",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Terran.Goliath.prototype.attackMode.flying.attackRange[team]=300;
            delete Building.TerranBuilding.MachineShop.prototype.items[4];
        }
    },
    ResearchCloakingField:{
        name:"ResearchCloakingField",
        cost:{
            mine:150,
            gas:150,
            time:1000
        },
        effect:function(){
            Magic.Cloak.enabled=true;
            delete Building.TerranBuilding.ControlTower.prototype.items[1];
        }
    },
    ResearchApolloReactor:{
        name:"ResearchApolloReactor",
        cost:{
            mine:200,
            gas:200,
            time:1660
        },
        effect:function(team){
            Terran.Wraith.prototype.MP[team]=250;
            delete Building.TerranBuilding.ControlTower.prototype.items[2];
        }
    },
    ResearchEMPShockwaves:{
        name:"ResearchEMPShockwaves",
        cost:{
            mine:200,
            gas:200,
            time:1200
        },
        effect:function(){
            Magic.EMPShockwave.enabled=true;
            delete Building.TerranBuilding.ScienceFacility.prototype.items[1];
        }
    },
    ResearchIrradiate:{
        name:"ResearchIrradiate",
        cost:{
            mine:150,
            gas:150,
            time:800
        },
        effect:function(){
            Magic.Irradiate.enabled=true;
            delete Building.TerranBuilding.ScienceFacility.prototype.items[2];
        }
    },
    ResearchTitanReactor:{
        name:"ResearchTitanReactor",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Terran.Vessel.prototype.MP[team]=250;
            delete Building.TerranBuilding.ScienceFacility.prototype.items[3];
        }
    },
    ResearchLockdown:{
        name:"ResearchLockdown",
        cost:{
            mine:200,
            gas:200,
            time:1000
        },
        effect:function(){
            Magic.Lockdown.enabled=true;
            delete Building.TerranBuilding.ConvertOps.prototype.items[1];
        }
    },
    ResearchPersonalCloaking:{
        name:"ResearchPersonalCloaking",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.PersonalCloak.enabled=true;
            delete Building.TerranBuilding.ConvertOps.prototype.items[2];
        }
    },
    ResearchOcularImplants:{
        name:"ResearchOcularImplants",
        cost:{
            mine:100,
            gas:100,
            time:1660
        },
        effect:function(team){
            Terran.Ghost.prototype.sight[team]=385;
            delete Building.TerranBuilding.ConvertOps.prototype.items[4];
        }
    },
    ResearchMoebiusReactor:{
        name:"ResearchMoebiusReactor",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Terran.Ghost.prototype.MP[team]=250;
            delete Building.TerranBuilding.ConvertOps.prototype.items[5];
        }
    },
    ResearchYamatoGun:{
        name:"ResearchYamatoGun",
        cost:{
            mine:200,
            gas:200,
            time:1200
        },
        effect:function(){
            Magic.Yamato.enabled=true;
            delete Building.TerranBuilding.PhysicsLab.prototype.items[1];
        }
    },
    ResearchColossusReactor:{
        name:"ResearchColossusReactor",
        cost:{
            mine:150,
            gas:150,
            time:1600
        },
        effect:function(team){
            Terran.BattleCruiser.prototype.MP[team]=250;
            delete Building.TerranBuilding.PhysicsLab.prototype.items[2];
        }
    },
    UpgradeVehicleWeapons:{
        name:"UpgradeVehicleWeapons",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.Vulture.prototype.damage[team]+=2;
            Terran.Tank.prototype.damage[team]+=3;
            Terran.Goliath.prototype.attackMode.ground.damage[team]+=2;
            Terran.Goliath.prototype.attackMode.flying.damage[team]+=4;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.Armory.prototype.items[1];
        }
    },
    UpgradeShipWeapons:{
        name:"UpgradeShipWeapons",
        cost:{
            mine:[100,150,200],
            gas:[100,150,200],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.Wraith.prototype.attackMode.ground.damage[team]+=1;
            Terran.Wraith.prototype.attackMode.flying.damage[team]+=2;
            Terran.BattleCruiser.prototype.damage[team]+=3;
            Terran.Valkyrie.prototype.damage[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.Armory.prototype.items[2];
        }
    },
    UpgradeVehicleArmors:{
        name:"UpgradeVehicleArmors",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.Vulture.prototype.armor[team]+=1;
            Terran.Tank.prototype.armor[team]+=1;
            Terran.Goliath.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.Armory.prototype.items[4];
        }
    },
    UpgradeShipArmors:{
        name:"UpgradeShipArmors",
        cost:{
            mine:[150,225,300],
            gas:[150,225,300],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Terran.Wraith.prototype.armor[team]+=1;
            Terran.Dropship.prototype.armor[team]+=1;
            Terran.BattleCruiser.prototype.armor[team]+=1;
            Terran.Vessel.prototype.armor[team]+=1;
            Terran.Valkyrie.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.TerranBuilding.Armory.prototype.items[5];
        }
    },
    //Zerg
    EvolveBurrow:{
        name:"EvolveBurrow",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.Burrow.enabled=Magic.Unburrow.enabled=true;
            delete Building.ZergBuilding.Hatchery.prototype.items[3];
            delete Building.ZergBuilding.Lair.prototype.items[3];
            delete Building.ZergBuilding.Hive.prototype.items[3];
        }
    },
    EvolveVentralSacs:{
        name:"EvolveVentralSacs",
        cost:{
            mine:200,
            gas:200,
            time:1600
        },
        effect:function(){
            Magic.Load.enabled=Magic.UnloadAll.enabled=true;
            delete Building.ZergBuilding.Lair.prototype.items[4];
            delete Building.ZergBuilding.Hive.prototype.items[4];
        }
    },
    EvolveAntennas:{
        name:"EvolveAntennas",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Zerg.Overlord.prototype.sight[team]=385;
            delete Building.ZergBuilding.Lair.prototype.items[5];
            delete Building.ZergBuilding.Hive.prototype.items[5];
        }
    },
    EvolvePneumatizedCarapace:{
        name:"EvolvePneumatizedCarapace",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Zerg.Overlord.prototype.speed[team]=8;
            delete Building.ZergBuilding.Lair.prototype.items[6];
            delete Building.ZergBuilding.Hive.prototype.items[6];
        }
    },
    EvolveMetabolicBoost:{
        name:"EvolveMetabolicBoost",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(team){
            Zerg.Zergling.prototype.speed[team]=18;
            delete Building.ZergBuilding.SpawningPool.prototype.items[1];
        }
    },
    EvolveAdrenalGlands:{
        name:"EvolveAdrenalGlands",
        cost:{
            mine:200,
            gas:200,
            time:1000
        },
        effect:function(team){
            Zerg.Zergling.prototype.attackInterval[team]=600;
            delete Building.ZergBuilding.SpawningPool.prototype.items[2];
        }
    },
    UpgradeMeleeAttacks:{
        name:"UpgradeMeleeAttacks",
        cost:{
            mine:[100,150,200],
            gas:[100,150,200],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Zerg.Zergling.prototype.damage[team]+=1;
            Zerg.Ultralisk.prototype.damage[team]+=3;
            Zerg.Broodling.prototype.damage[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ZergBuilding.EvolutionChamber.prototype.items[1];
        }
    },
    UpgradeMissileAttacks:{
        name:"UpgradeMissileAttacks",
        cost:{
            mine:[100,150,200],
            gas:[100,150,200],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Zerg.Hydralisk.prototype.damage[team]+=1;
            Zerg.Lurker.prototype.damage[team]+=2;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ZergBuilding.EvolutionChamber.prototype.items[2];
        }
    },
    EvolveCarapace:{
        name:"EvolveCarapace",
        cost:{
            mine:[150,225,300],
            gas:[150,225,300],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Zerg.Drone.prototype.armor[team]+=1;
            Zerg.Zergling.prototype.armor[team]+=1;
            Zerg.Hydralisk.prototype.armor[team]+=1;
            Zerg.Lurker.prototype.armor[team]+=1;
            Zerg.Ultralisk.prototype.armor[team]+=1;
            Zerg.Defiler.prototype.armor[team]+=1;
            Zerg.Broodling.prototype.armor[team]+=1;
            Zerg.InfestedTerran.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ZergBuilding.EvolutionChamber.prototype.items[3];
        }
    },
    EvolveMuscularAugments:{
        name:"EvolveMuscularAugments",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(team){
            Zerg.Hydralisk.prototype.speed[team]=13;
            delete Building.ZergBuilding.HydraliskDen.prototype.items[1];
        }
    },
    EvolveGroovedSpines:{
        name:"EvolveGroovedSpines",
        cost:{
            mine:150,
            gas:150,
            time:1000
        },
        effect:function(team){
            Zerg.Hydralisk.prototype.attackRange[team]=175;
            delete Building.ZergBuilding.HydraliskDen.prototype.items[2];
        }
    },
    EvolveLurkerAspect:{
        name:"EvolveLurkerAspect",
        cost:{
            mine:125,
            gas:125,
            time:1200
        },
        effect:function(){
            Magic.Lurker.enabled=true;
            delete Building.ZergBuilding.HydraliskDen.prototype.items[4];
        }
    },
    UpgradeFlyerAttacks:{
        name:"UpgradeFlyerAttacks",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Zerg.Mutalisk.prototype.damage[team]+=1;
            Zerg.Guardian.prototype.damage[team]+=2;
            Zerg.Devourer.prototype.damage[team]+=2;
            this.level[team]++;
            if (this.level[Game.team]>=3) {
                delete Building.ZergBuilding.Spire.prototype.items[1];
                delete Building.ZergBuilding.GreaterSpire.prototype.items[1];
            }
        }
    },
    UpgradeFlyerCarapace:{
        name:"UpgradeFlyerCarapace",
        cost:{
            mine:[150,225,300],
            gas:[150,225,300],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Zerg.Overlord.prototype.armor[team]+=1;
            Zerg.Mutalisk.prototype.armor[team]+=1;
            Zerg.Guardian.prototype.armor[team]+=1;
            Zerg.Devourer.prototype.armor[team]+=1;
            Zerg.Scourge.prototype.armor[team]+=1;
            Zerg.Queen.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) {
                delete Building.ZergBuilding.Spire.prototype.items[2];
                delete Building.ZergBuilding.GreaterSpire.prototype.items[2];
            }
        }
    },
    EvolveSpawnBroodling:{
        name:"EvolveSpawnBroodling",
        cost:{
            mine:200,
            gas:200,
            time:800
        },
        effect:function(){
            Magic.SpawnBroodlings.enabled=true;
            delete Building.ZergBuilding.QueenNest.prototype.items[1];
        }
    },
    EvolveEnsnare:{
        name:"EvolveEnsnare",
        cost:{
            mine:100,
            gas:100,
            time:800
        },
        effect:function(){
            Magic.Ensnare.enabled=true;
            delete Building.ZergBuilding.QueenNest.prototype.items[2];
        }
    },
    EvolveGameteMeiosis:{
        name:"EvolveGameteMeiosis",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Zerg.Queen.prototype.MP[team]=250;
            delete Building.ZergBuilding.QueenNest.prototype.items[3];
        }
    },
    EvolveAnabolicSynthesis:{
        name:"EvolveAnabolicSynthesis",
        cost:{
            mine:200,
            gas:200,
            time:1330
        },
        effect:function(team){
            Zerg.Ultralisk.prototype.speed[team]=18;
            delete Building.ZergBuilding.UltraliskCavern.prototype.items[1];
        }
    },
    EvolveChitinousPlating:{
        name:"EvolveChitinousPlating",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Zerg.Ultralisk.prototype.armor[team]+=2;
            delete Building.ZergBuilding.UltraliskCavern.prototype.items[2];
        }
    },
    EvolvePlague:{
        name:"EvolvePlague",
        cost:{
            mine:200,
            gas:200,
            time:1000
        },
        effect:function(){
            Magic.Plague.enabled=true;
            delete Building.ZergBuilding.DefilerMound.prototype.items[1];
        }
    },
    EvolveConsume:{
        name:"EvolveConsume",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(){
            Magic.Consume.enabled=true;
            delete Building.ZergBuilding.DefilerMound.prototype.items[2];
        }
    },
    EvolveMetasynapticNode:{
        name:"EvolveMetasynapticNode",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Zerg.Defiler.prototype.MP[team]=250;
            delete Building.ZergBuilding.DefilerMound.prototype.items[3];
        }
    },
    //Protoss
    UpgradeGroundWeapons:{
        name:"UpgradeGroundWeapons",
        cost:{
            mine:[100,150,200],
            gas:[100,150,200],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Protoss.Zealot.prototype.damage[team]+=2;
            Protoss.Dragoon.prototype.damage[team]+=2;
            Protoss.Templar.prototype.damage[team]+=1;
            Protoss.DarkTemplar.prototype.damage[team]+=3;
            Protoss.Archon.prototype.damage[team]+=3;
            //New RPG level
            Hero.DevilHunter.prototype.damage[team]+=2;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ProtossBuilding.Forge.prototype.items[1];
        }
    },
    UpgradeGroundArmor:{
        name:"UpgradeGroundArmor",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Protoss.Probe.prototype.armor[team]+=1;
            Protoss.Zealot.prototype.armor[team]+=1;
            Protoss.Dragoon.prototype.armor[team]+=1;
            Protoss.Templar.prototype.armor[team]+=1;
            Protoss.DarkTemplar.prototype.armor[team]+=1;
            Protoss.Archon.prototype.armor[team]+=1;
            Protoss.DarkArchon.prototype.armor[team]+=1;
            Protoss.Reaver.prototype.armor[team]+=1;
            //New RPG level
            Hero.DevilHunter.prototype.armor[team]+=2;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ProtossBuilding.Forge.prototype.items[2];
        }
    },
    UpgradePlasmaShields:{
        name:"UpgradePlasmaShields",
        cost:{
            mine:[200,300,400],
            gas:[200,300,400],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            for (var unitType in Protoss){
                Protoss[unitType].prototype.plasma[team]+=1;
            }
            //New RPG level
            Hero.DevilHunter.prototype.plasma[team]+=2;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ProtossBuilding.Forge.prototype.items[3];
        }
    },
    UpgradeAirWeapons:{
        name:"UpgradeAirWeapons",
        cost:{
            mine:[100,175,250],
            gas:[100,175,250],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Protoss.Scout.prototype.attackMode.ground.damage[team]+=1;
            Protoss.Scout.prototype.attackMode.flying.damage[team]+=2;
            Protoss.Carrier.prototype.damage[team]+=1;
            Protoss.Arbiter.prototype.damage[team]+=1;
            Protoss.Corsair.prototype.damage[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ProtossBuilding.CyberneticsCore.prototype.items[1];
        }
    },
    UpgradeAirArmor:{
        name:"UpgradeAirArmor",
        cost:{
            mine:[150,225,300],
            gas:[150,225,300],
            time:[2660,2980,3300]
        },
        level:0,
        effect:function(team){
            Protoss.Scout.prototype.armor[team]+=1;
            Protoss.Carrier.prototype.armor[team]+=1;
            Protoss.Arbiter.prototype.armor[team]+=1;
            Protoss.Corsair.prototype.armor[team]+=1;
            this.level[team]++;
            if (this.level[Game.team]>=3) delete Building.ProtossBuilding.CyberneticsCore.prototype.items[2];
        }
    },
    DevelopSingularityCharge:{
        name:"DevelopSingularityCharge",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Protoss.Dragoon.prototype.attackRange[team]=210;
            delete Building.ProtossBuilding.CyberneticsCore.prototype.items[3];
        }
    },
    DevelopLegEnhancements:{
        name:"DevelopLegEnhancements",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Protoss.Zealot.prototype.speed[team]=14;
            delete Building.ProtossBuilding.CitadelOfAdun.prototype.items[1];
        }
    },
    UpgradeScarabDamage:{
        name:"UpgradeScarabDamage",
        cost:{
            mine:200,
            gas:200,
            time:1660
        },
        effect:function(team){
            Protoss.Reaver.prototype.damage[team]=125;
            delete Building.ProtossBuilding.RoboticsSupportBay.prototype.items[1];
        }
    },
    IncreaseReaverCapacity:{
        name:"IncreaseReaverCapacity",
        cost:{
            mine:200,
            gas:200,
            time:1660
        },
        effect:function(team){
            Protoss.Reaver.prototype.scarabCapacity[team]=10;
            delete Building.ProtossBuilding.RoboticsSupportBay.prototype.items[2];
        }
    },
    DevelopGraviticDrive:{
        name:"DevelopGraviticDrive",
        cost:{
            mine:200,
            gas:200,
            time:1660
        },
        effect:function(team){
            Protoss.Shuttle.prototype.speed[team]=16;
            delete Building.ProtossBuilding.RoboticsSupportBay.prototype.items[3];
        }
    },
    DevelopApialSensors:{
        name:"DevelopApialSensors",
        cost:{
            mine:100,
            gas:100,
            time:1660
        },
        effect:function(team){
            Protoss.Scout.prototype.sight[team]=350;
            delete Building.ProtossBuilding.FleetBeacon.prototype.items[1];
        }
    },
    DevelopGraviticThrusters:{
        name:"DevelopGraviticThrusters",
        cost:{
            mine:200,
            gas:200,
            time:1660
        },
        effect:function(team){
            Protoss.Scout.prototype.speed[team]=16;
            delete Building.ProtossBuilding.FleetBeacon.prototype.items[2];
        }
    },
    IncreaseCarrierCapacity:{
        name:"IncreaseCarrierCapacity",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(team){
            //Protoss.Carrier.prototype.continuousAttack.count[team]=8;
            Protoss.Carrier.prototype.interceptorCapacity[team]=8;
            delete Building.ProtossBuilding.FleetBeacon.prototype.items[3];
        }
    },
    DevelopDistruptionWeb:{
        name:"DevelopDistruptionWeb",
        cost:{
            mine:200,
            gas:200,
            time:800
        },
        effect:function(){
            Magic.DisruptionWeb.enabled=true;
            delete Building.ProtossBuilding.FleetBeacon.prototype.items[4];
        }
    },
    DevelopArgusJewel:{
        name:"DevelopArgusJewel",
        cost:{
            mine:100,
            gas:100,
            time:1660
        },
        effect:function(team){
            Protoss.Corsair.prototype.MP[team]=250;
            delete Building.ProtossBuilding.FleetBeacon.prototype.items[5];
        }
    },
    DevelopPsionicStorm:{
        name:"DevelopPsionicStorm",
        cost:{
            mine:200,
            gas:200,
            time:1200
        },
        effect:function(){
            Magic.PsionicStorm.enabled=true;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[1];
        }
    },
    DevelopHallucination:{
        name:"DevelopHallucination",
        cost:{
            mine:150,
            gas:150,
            time:800
        },
        effect:function(){
            Magic.Hallucination.enabled=true;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[2];
        }
    },
    DevelopKhaydarinAmulet:{
        name:"DevelopKhaydarinAmulet",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Protoss.Templar.prototype.MP[team]=250;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[3];
        }
    },
    DevelopMindControl:{
        name:"DevelopMindControl",
        cost:{
            mine:200,
            gas:200,
            time:1200
        },
        effect:function(){
            Magic.MindControl.enabled=true;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[4];
        }
    },
    DevelopMaelStorm:{
        name:"DevelopMaelStorm",
        cost:{
            mine:100,
            gas:100,
            time:1000
        },
        effect:function(){
            Magic.MaelStorm.enabled=true;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[5];
        }
    },
    DevelopArgusTalisman:{
        name:"DevelopArgusTalisman",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Protoss.DarkArchon.prototype.MP[team]=250;
            delete Building.ProtossBuilding.TemplarArchives.prototype.items[6];
        }
    },
    DevelopGraviticBooster:{
        name:"DevelopGraviticBooster",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Protoss.Observer.prototype.speed[team]=12;
            delete Building.ProtossBuilding.Observatory.prototype.items[1];
        }
    },
    DevelopSensorArray:{
        name:"DevelopSensorArray",
        cost:{
            mine:150,
            gas:150,
            time:1330
        },
        effect:function(team){
            Protoss.Observer.prototype.sight[team]=385;
            delete Building.ProtossBuilding.Observatory.prototype.items[2];
        }
    },
    DevelopRecall:{
        name:"DevelopRecall",
        cost:{
            mine:150,
            gas:150,
            time:1200
        },
        effect:function(){
            Magic.Recall.enabled=true;
            delete Building.ProtossBuilding.ArbiterTribunal.prototype.items[1];
        }
    },
    DevelopStasisField:{
        name:"DevelopStasisField",
        cost:{
            mine:150,
            gas:150,
            time:1000
        },
        effect:function(){
            Magic.StasisField.enabled=true;
            delete Building.ProtossBuilding.ArbiterTribunal.prototype.items[2];
        }
    },
    DevelopKhaydarinCore:{
        name:"DevelopKhaydarinCore",
        cost:{
            mine:150,
            gas:150,
            time:1660
        },
        effect:function(team){
            Protoss.Arbiter.prototype.MP[team]=250;
            delete Building.ProtossBuilding.ArbiterTribunal.prototype.items[3];
        }
    },
    /********RPG level: Tower Defense********/
    UpgradeSunkenDamage:{
        name:"UpgradeSunkenDamage",
        cost:{
            mine:[50,75,100,125,150],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.ZergBuilding.SunkenColony.prototype.damage+=5;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[1];
            }
        }
    },
    EnlargeSunkenArea:{
        name:"UpgradeSunkenArea",
        cost:{
            mine:[100,125,150,175,200],
            time:[300,400,500,600,700]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.ZergBuilding.SunkenColony.prototype.AOE.radius+=50;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[2];
            }
        }
    },
    UpgradeSporeDamage:{
        name:"UpgradeSporeDamage",
        cost:{
            mine:[50,60,70,80,90],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.ZergBuilding.SporeColony.prototype.damage+=3;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[3];
            }
        }
    },
    EnlargeSporeChain:{
        name:"EnlargeSporeChain",
        cost:{
            mine:[80,90,100,110,120],
            time:[300,400,500,600,700]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Bullets.Spore.prototype.traceTimes+=1;
                Bullets.Spore.prototype.traceRadius+=50;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[4];
            }
        }
    },
    UpgradeMissileDamage:{
        name:"UpgradeMissileDamage",
        cost:{
            mine:[50,65,80,95,110],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.TerranBuilding.MissileTurret.prototype.damage+=4;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[5];
            }
        }
    },
    IncreaseMissileCount:{
        name:"IncreaseMissileCount",
        cost:{
            mine:[80,95,110,125,140],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.TerranBuilding.MissileTurret.prototype.AOE.radius+=30;
                Building.TerranBuilding.MissileTurret.prototype.AOE.count++;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[6];
            }
        }
    },
    UpgradePhotonCannonDamage:{
        name:"UpgradePhotonCannonDamage",
        cost:{
            mine:[50,70,90,110,130],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.ProtossBuilding.PhotonCannon.prototype.damage+=4;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[7];
            }
        }
    },
    IncreasePhotonCannonCount:{
        name:"IncreasePhotonCannonCount",
        cost:{
            mine:[80,95,110,125,140],
            time:[300,300,300,300,300]
        },
        level:0,
        effect:function(team){
            //RPG level lock
            if (Game.level==11 || Game.replayLevel==11) {
                Building.ProtossBuilding.PhotonCannon.prototype.continuousAttack.count++;
                this.level[team]++;
                if (this.level[Game.team]>=5) delete Building.ProtossBuilding.TeleportPoint.prototype.items[8];
            }
        }
    }
};

/***/ }),
/* 16 */
/***/ (function(module, exports) {

/******* Define Zerg units *******/
var Zerg={};
Zerg.Drone=AttackableUnit.extends({
    constructorPlus:function(props){
        this.sound.burrow=new Audio(Game.CDN+'bgm/Zerg.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
        this.direction=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Drone",
        imgPos: {
            moving: {
                left: [
                    [36,36,36],[164,164,164],
                    [292,292,292],[420,420,420],
                    [548,548,548],[676,676,676],
                    [804,804,804],[932,932,932],
                    [1060,1060,1060],[1316,1316,1316],
                    [1444,1444,1444],[1572,1572,1572],
                    [1700,1700,1700],[1828,1828,1828],
                    [1956,1956,1956],[2084,2084,2084]
                ],
                top: [
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292],
                    [36,164,292],[36,164,292]
                ]
            },
            attack: {
                left: [
                    [36,36,36,36,36,36,36],[164,164,164,164,164,164,164],
                    [292,292,292,292,292,292,292],[420,420,420,420,420,420,420],
                    [548,548,548,548,548,548,548],[676,676,676,676,676,676,676],
                    [804,804,804,804,804,804,804],[932,932,932,932,932,932,932],
                    [1060,1060,1060,1060,1060,1060,1060],[1316,1316,1316,1316,1316,1316,1316],
                    [1444,1444,1444,1444,1444,1444,1444],[1572,1572,1572,1572,1572,1572,1572],
                    [1700,1700,1700,1700,1700,1700,1700],[1828,1828,1828,1828,1828,1828,1828],
                    [1956,1956,1956,1956,1956,1956,1956],[2084,2084,2084,2084,2084,2084,2084]
                ],
                top: [
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188],
                    [420,548,676,804,932,1060,1188],[420,548,676,804,932,1060,1188]
                ]
            },
            dock: {
                left: [36,164,292,420,548,676,804,932,1060,1316,1444,1572,1700,1828,1956,2084],
                top: [36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36]
            },
            burrow: {
                left: [
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572],
                    [1700,-1,1188,1316,1444,1572],[1700,-1,1188,1316,1444,1572]
                ],
                top: [
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316],
                    [1316,-1,1316,1316,1316,1316],[1316,-1,1316,1316,1316,1316]
                ]
            },
            unburrow: {
                left: [
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188],
                    [1572,1444,1316,1188,1188,1188],[1572,1444,1316,1188,1188,1188]
                ],
                top: [
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316],
                    [1316,1316,1316,1316,1316,1316],[1316,1316,1316,1316,1316,1316]
                ]
            }
        },
        width: 56,//128N+36
        height: 56,
        frame: {
            moving: 3,
            dock: 1,
            attack:7,
            burrow: 1,
            unburrow: 6
        },
        //Only for moving status, override
        speed:12,
        HP: 40,
        damage: 5,
        armor:0,
        sight:245,
        meleeAttack: true,
        attackInterval: 2200,
        dieEffect:Burst.DroneDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:50,
            man:1,
            time:200
        },
        upgrade:['EvolveCarapace'],
        items:{'4':undefined,
            '5':{name:'gather'},
            '7':{name:'BasicMutation'},
            '8':{name:'AdvancedMutation'},
            '9':{name:'Burrow',condition:function(){
                return Magic.Burrow.enabled
            }}
        },
        buildZergBuilding:function(location){
            //Has location callback info or nothing
            if (location){
                //Move toward target to fire Ensnare
                this.targetLock=true;
                var myself=this;
                this.moveTo(location.x,location.y,20,function(){
                    if (Resource.payCreditBill.call(myself)){
                        var target=Building.ZergBuilding[myself.buildName];
                        //Adjust location
                        myself.x=(location.x-myself.width/2)>>0;
                        myself.y=(location.y-myself.height/2)>>0;
                        var mutation=myself.evolveTo({
                            type:eval('Building.'+target.prototype.evolves[0].step),
                            chain:true
                        });
                        mutation.buildName=myself.buildName;
                        //Calculate duration
                        var duration=Resource.getCost(myself.buildName).time;
                        //Cheat: Operation cwal
                        if (Cheat.cwal) duration=40;
                        //Processing flag on transfer
                        mutation.processing={
                            name:mutation.buildName,
                            startTime:Game.mainTick,//new Date().getTime()
                            time:duration
                        };
                        //Evolve chain
                        for (var N=1;N<target.prototype.evolves.length;N++){
                            (function(n){
                                var evolveInfo=target.prototype.evolves[n];
                                Game.commandTimeout(function(){
                                    if (mutation.status!='dead'){
                                        //Evolve
                                        var evolveTarget=(eval('Building.'+evolveInfo.step));
                                        //Step is constructor function
                                        if (evolveTarget){
                                            var old=mutation;
                                            mutation=mutation.evolveTo({
                                                type:evolveTarget,
                                                chain:true
                                            });
                                            mutation.processing=old.processing;
                                            mutation.buildName=old.buildName;
                                        }
                                        //Step is status string
                                        else {
                                            mutation.status=evolveInfo.step;
                                        }
                                    }
                                },duration*100*evolveInfo.percent);
                            })(N);
                        }
                        //Final evolve
                        Game.commandTimeout(function(){
                            if (mutation.status!='dead'){
                                //Evolve
                                mutation.evolveTo({
                                    type:Building.ZergBuilding[mutation.buildName],
                                    burstArr:mutation.evolveEffect
                                });
                            }
                        },duration*100);
                    }
                });
            }
            //If missing location info, mark Button.callback, mouseController will call back with location
            else {
                Button.callback=arguments.callee;
                Button.callback.farmer=this;
                Button.callback.buildType='ZergBuilding';
                $('div.GameLayer').attr('status','button');
            }
        }
    }
});
Zerg.Zergling=AttackableUnit.extends({
    constructorPlus:function(props){
        this.sound.burrow=new Audio(Game.CDN+'bgm/Zerg.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
        this.direction=5;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Zergling",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0],[43,43,43,43,43,43,43],
                    [86,86,86,86,86,86,86],[129,129,129,129,129,129,129],
                    [172,172,172,172,172,172,172],[215,215,215,215,215,215,215],
                    [258,258,258,258,258,258,258],[301,301,301,301,301,301,301],
                    [344,344,344,344,344,344,344],[430,430,430,430,430,430,430],
                    [473,473,473,473,473,473,473],[516,516,516,516,516,516,516],
                    [559,559,559,559,559,559,559],[602,602,602,602,602,602,602],
                    [645,645,645,645,645,645,645],[688,688,688,688,688,688,688]
                ],
                top: [
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252],
                    [0,42,84,126,168,210,252],[0,42,84,126,168,210,252]
                ]
            },
            dock: {
                left: [0,43,86,129,172,215,258,301,344,430,473,516,559,602,645,688],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            attack: {
                left: [
                    [0,0,0,0,0],[43,43,43,43,43],
                    [86,86,86,86,86],[129,129,129,129,129],
                    [172,172,172,172,172],[215,215,215,215,215],
                    [258,258,258,258,258],[301,301,301,301,301],
                    [344,344,344,344,344],[430,430,430,430,430],
                    [473,473,473,473,473],[516,516,516,516,516],
                    [559,559,559,559,559],[602,602,602,602,602],
                    [645,645,645,645,645],[688,688,688,688,688]
                ],
                top: [
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462],
                    [294,336,378,420,462],[294,336,378,420,462]
                ]
            },
            burrow: {
                left: [
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636],
                    [678,-1,504,546,592,636],[678,-1,504,546,592,636]
                ],
                top: [
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512],
                    [512,-1,512,512,512,512],[512,-1,512,512,512,512]
                ]
            },
            unburrow: {
                left: [
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504],
                    [636,592,546,504,504,504],[636,592,546,504,504,504]
                ],
                top: [
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512],
                    [512,512,512,512,512,512],[512,512,512,512,512,512]
                ]
            }
        },
        width: 43,//43N
        height: 42,//42N
        frame: {
            moving: 7,
            dock: 1,
            attack: 5,
            burrow: 1,
            unburrow: 6
        },
        //Only for moving status, override
        speed:13,
        HP: 35,
        damage: 5,
        armor:0,
        sight:175,
        meleeAttack: true,
        attackInterval: 800,
        dieEffect:Burst.ZerglingDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:25,
            man:0.5,
            time:140
        },
        birthCount:2,
        upgrade:['UpgradeMeleeAttacks','EvolveCarapace'],
        items:{
            '9':{name:'Burrow',condition:function(){
                return Magic.Burrow.enabled
            }}
        }
    }
});
Zerg.Overlord=Unit.extends({
    constructorPlus:function(props){
        this.direction=6;
        this.y-=12;//(OverlordBirth.height-Overlord.height)/2
        //Transport
        this.loadedUnits=[];
    },
    prototypePlus: {
        //Add basic unit info
        name: "Overlord",
        imgPos: {
            moving: {
                left: [
                    [0,0,84,84,168,168,252,252],[0,0,84,84,168,168,252,252],
                    [0,0,84,84,168,168,252,252],[0,0,84,84,168,168,252,252],
                    [0,0,84,84,168,168,252,252],[0,0,84,84,168,168,252,252],
                    [0,0,84,84,168,168,252,252],[0,0,84,84,168,168,252,252],
                    [0,0,84,84,168,168,252,252],[588,588,504,504,420,420,336,336],
                    [588,588,504,504,420,420,336,336],[588,588,504,504,420,420,336,336],
                    [588,588,504,504,420,420,336,336],[588,588,504,504,420,420,336,336],
                    [588,588,504,504,420,420,336,336],[588,588,504,504,420,420,336,336]
                ],
                top: [
                    [0,0,0,0,0,0,0,0],[84,84,84,84,84,84,84,84],
                    [168,168,168,168,168,168,168,168],[252,252,252,252,252,252,252,252],
                    [336,336,336,336,336,336,336,336],[420,420,420,420,420,420,420,420],
                    [504,504,504,504,504,504,504,504],[588,588,588,588,588,588,588,588],
                    [672,672,672,672,672,672,672,672],[588,588,588,588,588,588,588,588],
                    [504,504,504,504,504,504,504,504],[420,420,420,420,420,420,420,420],
                    [336,336,336,336,336,336,336,336],[252,252,252,252,252,252,252,252],
                    [168,168,168,168,168,168,168,168],[84,84,84,84,84,84,84,84]
                ]
            },
            dock: {
                left: [0,0,0,0,0,0,0,0,0,588,588,588,588,588,588,588],
                top: [0,84,168,252,336,420,504,588,672,84,168,252,336,420,504,588]
            }
        },
        width: 84,//84N
        height: 84,//84N
        frame: {
            moving: 8,
            dock: 1
        },
        //Only for moving status, override
        speed:2,
        HP: 200,
        armor:0,
        sight:315,
        dieEffect:Burst.BigZergFlyingDeath,
        isFlying:true,
        unitType:Unit.BIG,
        detector:Gobj.detectorBuffer,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:100,
            time:400
        },
        upgrade:['UpgradeFlyerCarapace'],
        manPlus:8,
        items:{
            '8':{name:'Load',condition:function(){
                return Magic.Load.enabled
            }},
            '9':{name:'UnloadAll',condition:function(){
                return Magic.UnloadAll.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        },
        die:function(){
            //Use the same behavior
            Unit.prototype.die.call(this);
            //All passenger will die too
            this.loadedUnits.forEach(function(chara){
                chara.die();
            });
        }
    }
});
Zerg.Hydralisk=AttackableUnit.extends({
    constructorPlus:function(props){
        this.sound.burrow=new Audio(Game.CDN+'bgm/Zerg.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
        this.direction=6;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Hydralisk",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0],[45,45,45,45,45,45,45],
                    [90,90,90,90,90,90,90],[135,135,135,135,135,135,135],
                    [180,180,180,180,180,180,180],[225,225,225,225,225,225,225],
                    [270,270,270,270,270,270,270],[315,315,315,315,315,315,315],
                    [360,360,360,360,360,360,360],[450,450,450,450,450,450,450],
                    [495,495,495,495,495,495,495],[540,540,540,540,540,540,540],
                    [585,585,585,585,585,585,585],[630,630,630,630,630,630,630],
                    [675,675,675,675,675,675,675],[720,720,720,720,720,720,720]
                ],
                top: [
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348],
                    [0,58,116,174,232,290,348],[0,58,116,174,232,290,348]
                ]
            },
            dock: {
                left: [0,45,90,135,180,225,270,315,360,450,495,540,585,630,675,720],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            attack: {
                left: [
                    [0,0,0,0,0],[45,45,45,45,45],
                    [90,90,90,90,90],[135,135,135,135,135],
                    [180,180,180,180,180],[225,225,225,225,225],
                    [270,270,270,270,270],[315,315,315,315,315],
                    [360,360,360,360,360],[450,450,450,450,450],
                    [495,495,495,495,495],[540,540,540,540,540],
                    [585,585,585,585,585],[630,630,630,630,630],
                    [675,675,675,675,675],[720,720,720,720,720]
                ],
                top: [
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638],
                    [406,464,522,580,638],[406,464,522,580,638]
                ]
            },
            burrow: {
                left: [
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418],
                    [464,-1,280,326,374,418],[464,-1,280,326,374,418]
                ],
                top: [
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758],
                    [758,-1,758,758,758,758],[758,-1,758,758,758,758]
                ]
            },
            unburrow: {
                left: [
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280],
                    [418,374,326,280,280,280],[418,374,326,280,280,280]
                ],
                top: [
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758],
                    [758,758,758,758,758,758],[758,758,758,758,758,758]
                ]
            }
        },
        width: 45,//45N
        height: 58,//58N
        frame: {
            moving: 7,
            dock: 1,
            attack: 5,
            burrow: 1,
            unburrow: 6
        },
        //Only for moving status, override
        speed:9,
        HP: 80,
        damage: 10,
        armor:0,
        sight:210,
        attackRange: 140,
        attackInterval: 1500,
        dieEffect:Burst.HydraliskDeath,
        isFlying:false,
        unitType:Unit.MIDDLE,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:75,
            gas:25,
            man:1,
            time:280
        },
        upgrade:['UpgradeMissileAttacks','EvolveCarapace'],
        items:{
            '7':{name:'Lurker',condition:function(){
                return Magic.Lurker.enabled
            }},
            '9':{name:'Burrow',condition:function(){
                return Magic.Burrow.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Zerg.Lurker=Unit.extends({
    constructorPlus:function(props){
        //Same as attackable unit
        this.bullet={};
        this.kill=0;
        this.target={};
        //Idle by default
        this.targetLock=false;
        //Can fire by default
        this.coolDown=true;
        //Add attack sound for AttackableUnit
        this.sound.attack=new Audio(Game.CDN+'bgm/Lurker.attack.wav');
        this.sound.burrow=new Audio(Game.CDN+'bgm/Lurker.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
        this.direction=6;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Lurker",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0],[72,72,72,72,72,72,72],
                    [144,144,144,144,144,144,144],[216,216,216,216,216,216,216],
                    [288,288,288,288,288,288,288],[360,360,360,360,360,360,360],
                    [432,432,432,432,432,432,432],[504,504,504,504,504,504,504],
                    [576,576,576,576,576,576,576],[720,720,720,720,720,720,720],
                    [792,792,792,792,792,792,792],[864,864,864,864,864,864,864],
                    [936,936,936,936,936,936,936],[1008,1008,1008,1008,1008,1008,1008],
                    [1080,1080,1080,1080,1080,1080,1080],[1152,1152,1152,1152,1152,1152,1152]
                ],
                top: [
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403],
                    [1,68,135,202,269,336,403],[1,68,135,202,269,336,403]
                ]
            },
            dock: {
                left: [0,72,144,216,288,360,432,504,576,720,792,864,936,1008,1080,1152],
                top: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
            },
            burrow: {
                left: [
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],
                    [502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444],[502,-1,2,66,130,192,256,2,66,130,192,256,318,380,444]
                ],
                top: [
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],
                    [482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482],[482,-1,482,482,482,482,482,482,482,482,482,482,482,482,482]
                ]
            },
            unburrow: {
                left: [
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764],
                    [450,510,570,632,700,764,764,764],[450,510,570,632,700,764,764,764]
                ],
                top: [
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570],
                    [570,570,570,570,570,570,570,570],[570,570,570,570,570,570,570,570]
                ]
            }
        },
        width: 72,//72N
        height: 67,//67N+1
        frame: {
            moving: 7,
            dock: 1,
            burrow: 1,
            unburrow: 8
        },
        //Only for moving status, override
        speed:14,
        HP: 125,
        damage: 20,
        armor:0,
        sight:280,
        attackRange: 210,
        attackInterval: 3700,
        continuousAttack:{
            count:5,
            layout:function(bullet,num){
                //Reassign location
                bullet.x+=bullet.speed.x*(num);
                bullet.y+=bullet.speed.y*(num);
                //Reassign each action
                bullet.action=(bullet.action+num)%(bullet.frame.moving);
                //Fix action
                bullet.animeFrame=function(){};
            },
            onlyOnce:true
        },
        dieEffect:Burst.LurkerDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.MIDDLE,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        AOE:{
            type:"LINE",
            hasEffect:false,
            radius:35
        },
        cost:{
            mine:50,
            gas:100,
            man:2,
            time:400
        },
        upgrade:['UpgradeMissileAttacks','EvolveCarapace'],
        items:{
            '9':{name:'Burrow'}
        },
        //New type AI for enemy Lurker
        reactionWhenAttackedBy:function(){
            //Will burrow and attack
            if (!Multiplayer.ON && !this.burrowBuffer && this.isEnemy()) Magic.Burrow.spell.call(this);
            Unit.prototype.reactionWhenAttackedBy.apply(this,arguments);
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Zerg.Mutalisk=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=7;
        //Adjust for multi frames
        this.y-=12;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Mutalisk",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0],[67,67,67,67,67],
                    [134,134,134,134,134],[201,201,201,201,201],
                    [268,268,268,268,268],[335,335,335,335,335],
                    [401,401,401,401,401],[468,468,468,468,468],
                    [535,535,535,535,535],[602,602,602,602,602],
                    [669,669,669,669,669],[736,736,736,736,736],
                    [802,802,802,802,802],[869,869,869,869,869],
                    [936,936,936,936,936],[1003,1003,1003,1003,1003]
                ],
                top: [
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300],
                    [0,75,150,225,300],[0,75,150,225,300]
                ]
            }
        },
        width: 66,//67N?
        height: 75,
        frame: {
            moving: 5
        },
        //Only for moving status, override
        speed:16,
        HP: 120,
        damage: 9,
        armor:0,
        sight:245,
        attackRange: 105,
        attackInterval: 2200,//3000
        dieEffect:Burst.SmallZergFlyingDeath,
        isFlying:true,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:100,
            man:2,
            time:400
        },
        upgrade:['UpgradeFlyerAttacks','UpgradeFlyerCarapace'],
        items:{
            '7':{name:'Guardian',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='GreaterSpire';
                })
            }},
            '8':{name:'Devourer',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='GreaterSpire';
                })
            }}
        }
    }
});
Zerg.Guardian=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Guardian",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0],[81,81,81,81,81,81,81],
                    [162,162,162,162,162,162,162],[243,243,243,243,243,243,243],
                    [324,324,324,324,324,324,324],[405,405,405,405,405,405,405],
                    [486,486,486,486,486,486,486],[567,567,567,567,567,567,567],
                    [648,648,648,648,648,648,648],[810,810,810,810,810,810,810],
                    [891,891,891,891,891,891,891],[972,972,972,972,972,972,972],
                    [1053,1053,1053,1053,1053,1053,1053],[1134,1134,1134,1134,1134,1134,1134],
                    [1215,1215,1215,1215,1215,1215,1215],[1296,1296,1296,1296,1296,1296,1296]
                ],
                top: [
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444],
                    [0,74,148,222,296,370,444],[0,74,148,222,296,370,444]
                ]
            }
        },
        width: 81,//81N
        height: 74,//74N
        frame: {
            moving: 7
        },
        //Only for moving status, override
        speed:6,
        HP: 150,
        damage: 20,
        armor:2,
        sight:385,
        attackRange: 280,
        attackInterval: 3000,
        dieEffect:Burst.BigZergFlyingDeath,
        isFlying:true,
        attackLimit:"ground",
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:50,
            gas:100,
            man:2,
            time:400
        },
        upgrade:['UpgradeFlyerAttacks','UpgradeFlyerCarapace'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Zerg.Devourer=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=6;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Devourer",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0],[73,73,73,73,73,73],
                    [146,146,146,146,146,146],[219,219,219,219,219,219],
                    [292,292,292,292,292,292],[365,365,365,365,365,365],
                    [438,438,438,438,438,438],[511,511,511,511,511,511],
                    [584,584,584,584,584,584],[730,730,730,730,730,730],
                    [803,803,803,803,803,803],[876,876,876,876,876,876],
                    [949,949,949,949,949,949],[1022,1022,1022,1022,1022,1022],
                    [1095,1095,1095,1095,1095,1095],[1168,1168,1168,1168,1168,1168]
                ],
                top: [
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430],
                    [0,86,172,258,344,430],[0,86,172,258,344,430]
                ]
            },
            attack: {
                left: [
                    [0,0,0,0,0,0,0,0],[73,73,73,73,73,73,73,73],
                    [146,146,146,146,146,146,146,146],[219,219,219,219,219,219,219,219],
                    [292,292,292,292,292,292,292,292],[365,365,365,365,365,365,365,365],
                    [438,438,438,438,438,438,438,438],[511,511,511,511,511,511,511,511],
                    [584,584,584,584,584,584,584,584],[730,730,730,730,730,730,730,730],
                    [803,803,803,803,803,803,803,803],[876,876,876,876,876,876,876,876],
                    [949,949,949,949,949,949,949,949],[1022,1022,1022,1022,1022,1022,1022,1022],
                    [1095,1095,1095,1095,1095,1095,1095,1095],[1168,1168,1168,1168,1168,1168,1168,1168]
                ],
                top: [
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774],
                    [516,516,602,602,688,688,774,774],[516,516,602,602,688,688,774,774]
                ]
            }
        },
        width: 73,//73N
        height: 86,//86N
        frame: {
            moving: 6,
            attack: 8
        },
        //Only for moving status, override
        speed:12,
        HP: 250,
        damage: 25,
        armor:2,
        sight:350,
        attackRange: 175,//210
        attackInterval: 5000,//10000
        dieEffect:Burst.BigZergFlyingDeath,
        isFlying:true,
        attackLimit:"flying",
        unitType:Unit.BIG,
        attackType:AttackableUnit.BURST_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        AOE:{
            hasEffect:true,
            radius:60
        },
        cost:{
            mine:150,
            gas:50,
            man:2,
            time:400
        },
        upgrade:['UpgradeFlyerAttacks','UpgradeFlyerCarapace'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Zerg.Scourge=AttackableUnit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.attack=this.imgPos.dock=this.imgPos.moving;
        this.frame.attack=this.frame.dock=this.frame.moving;
        this.direction=0;
        //Adjust for multi frames
        this.y-=20;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Scourge",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0],[34,34,34,34,34],
                    [68,68,68,68,68],[102,102,102,102,102],
                    [136,136,136,136,136],[170,170,170,170,170],
                    [204,204,204,204,204],[238,238,238,238,238],
                    [272,272,272,272,272],[340,340,340,340,340],
                    [374,374,374,374,374],[408,408,408,408,408],
                    [442,442,442,442,442],[476,476,476,476,476],
                    [510,510,510,510,510],[544,544,544,544,544]
                ],
                top: [
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120],
                    [0,30,60,90,120],[0,30,60,90,120]
                ]
            }
        },
        width: 34,//34N
        height: 30,//30N
        frame: {
            moving: 5
        },
        //Only for moving status, override
        speed:16,
        HP: 25,
        damage: 110,//Suicide
        armor:0,
        sight:175,
        meleeAttack: true,
        attackRange:35,
        attackInterval: 1000,//Suicide
        dieEffect:Burst.SmallZergFlyingDeath,
        attackEffect:Burst.ScourgeBomb,
        isFlying:true,
        attackLimit:"flying",
        suicide:true,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:12.5,
            gas:37.5,
            man:0.5,
            time:150
        },
        birthCount:2,
        upgrade:['UpgradeFlyerCarapace'],
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.hover.call(this);
        }
    }
});
Zerg.Queen=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.direction=7;
        //Adjust for multi frames
        this.y-=16;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Queen",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0],[78,78,78,78,78],
                    [156,156,156,156,156],[234,234,234,234,234],
                    [312,312,312,312,312],[390,390,390,390,390],
                    [468,468,468,468,468],[546,546,546,546,546],
                    [624,624,624,624,624],[780,780,780,780,780],
                    [858,858,858,858,858],[936,936,936,936,936],
                    [1014,1014,1014,1014,1014],[1092,1092,1092,1092,1092],
                    [1170,1170,1170,1170,1170],[1248,1248,1248,1248,1248]
                ],
                top: [
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284],
                    [0,71,142,213,284],[0,71,142,213,284]
                ]
            }
        },
        width: 78,//78N
        height: 71,//71N
        frame: {
            moving: 5
            //attack: 6//Reserved
        },
        //Only for moving status, override
        speed:16,
        HP: 120,
        armor:0,
        MP: 200,
        sight:350,
        dieEffect:Burst.BigZergFlyingDeath,
        isFlying:true,
        unitType:Unit.MIDDLE,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:100,
            gas:150,
            man:2,
            time:500
        },
        upgrade:['UpgradeFlyerCarapace'],
        items:{
            '6':{name:'InfestTerranCommandCenter'},
            '7':{name:'Parasite'},
            '8':{name:'SpawnBroodlings',condition:function(){
                return Magic.SpawnBroodlings.enabled
            }},
            '9':{name:'Ensnare',condition:function(){
                return Magic.Ensnare.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            Unit.hover.call(this);
        }
    }
});
Zerg.Broodling=AttackableUnit.extends({
    constructorPlus:function(props){
        //Nothing
    },
    prototypePlus: {
        //Add basic unit info
        name: "Broodling",
        imgPos: {
            moving: {
                left: [
                    [5,5,5,5,5,5,5],[53,53,53,53,53,53,53],
                    [101,101,101,101,101,101,101],[149,149,149,149,149,149,149],
                    [197,197,197,197,197,197,197],[245,245,245,245,245,245,245],
                    [293,293,293,293,293,293,293],[341,341,341,341,341,341,341],
                    [389,389,389,389,389,389,389],[485,485,485,485,485,485,485],
                    [533,533,533,533,533,533,533],[581,581,581,581,581,581,581],
                    [629,629,629,629,629,629,629],[677,677,677,677,677,677,677],
                    [725,725,725,725,725,725,725],[773,773,773,773,773,773,773]
                ],
                top: [
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293],
                    [5,53,101,149,197,245,293],[5,53,101,149,197,245,293]
                ]
            },
            dock: {
                left: [5,53,101,149,197,245,293,341,389,485,533,581,629,677,725,773],
                top: [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
            },
            attack: {
                left: [
                    [5,5,5,5,5],[53,53,53,53,53],
                    [101,101,101,101,101],[149,149,149,149,149],
                    [197,197,197,197,197],[245,245,245,245,245],
                    [293,293,293,293,293],[341,341,341,341,341],
                    [389,389,389,389,389],[485,485,485,485,485],
                    [533,533,533,533,533],[581,581,581,581,581],
                    [629,629,629,629,629],[677,677,677,677,677],
                    [725,725,725,725,725],[773,773,773,773,773]
                ],
                top: [
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533],
                    [341,389,437,485,533],[341,389,437,485,533]
                ]
            }
        },
        width: 38,//48N+5
        height: 38,
        frame: {
            moving: 7,
            dock: 1,
            attack: 5
        },
        //Only for moving status, override
        speed:6,
        HP: 30,
        damage: 4,
        armor:0,
        sight:175,
        meleeAttack: true,
        attackInterval: 1500,
        dieEffect:Burst.BroodlingDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.SMALL,
        recover:Building.ZergBuilding.prototype.recover,
        upgrade:['UpgradeMeleeAttacks','EvolveCarapace'],
        attackType:AttackableUnit.NORMAL_ATTACK,
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.walkAround.call(this);
        }
    }
});
Zerg.Ultralisk=AttackableUnit.extends({
    constructorPlus:function(props){
        this.direction=7;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Ultralisk",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0,0],[101,101,101,101,101,101,101,101,101],
                    [202,202,202,202,202,202,202,202,202],[303,303,303,303,303,303,303,303,303],
                    [404,404,404,404,404,404,404,404,404],[606,606,606,606,606,606,606,606,606],
                    [707,707,707,707,707,707,707,707,707],[808,808,808,808,808,808,808,808,808],
                    [909,909,909,909,909,909,909,909,909],[1111,1111,1111,1111,1111,1111,1111,1111,1111],
                    [1212,1212,1212,1212,1212,1212,1212,1212,1212],[1313,1313,1313,1313,1313,1313,1313,1313,1313],
                    [1414,1414,1414,1414,1414,1414,1414,1414,1414],[1616,1616,1616,1616,1616,1616,1616,1616,1616],
                    [1717,1717,1717,1717,1717,1717,1717,1717,1717],[1818,1818,1818,1818,1818,1818,1818,1818,1818]
                ],
                top: [
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864],
                    [0,108,216,324,432,540,648,756,864],[0,108,216,324,432,540,648,756,864]
                ]
            },
            dock: {
                left: [0,101,202,303,404,606,707,808,909,1111,1212,1313,1414,1616,1717,1818],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            attack: {
                left: [
                    [0,0,0,0,0,0],[101,101,101,101,101,101],
                    [202,202,202,202,202,202],[303,303,303,303,303,303],
                    [404,404,404,404,404,404],[606,606,606,606,606,606],
                    [707,707,707,707,707,707],[808,808,808,808,808,808],
                    [909,909,909,909,909,909],[1111,1111,1111,1111,1111,1111],
                    [1212,1212,1212,1212,1212,1212],[1313,1313,1313,1313,1313,1313],
                    [1414,1414,1414,1414,1414,1414],[1616,1616,1616,1616,1616,1616],
                    [1717,1717,1717,1717,1717,1717],[1818,1818,1818,1818,1818,1818]
                ],
                top: [
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512],
                    [972,1080,1188,1296,1404,1512],[972,1080,1188,1296,1404,1512]
                ]
            }
        },
        width: 101,//101N
        height: 108,//108N
        frame: {
            moving: 9,
            dock: 1,
            attack: 6
        },
        //Only for moving status, override
        speed:12,
        HP: 400,
        damage: 20,
        armor:1,
        sight:245,
        meleeAttack: true,
        attackInterval: 1500,
        dieEffect:Burst.UltraliskDeath,
        isFlying:false,
        attackLimit:"ground",
        unitType:Unit.BIG,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:200,
            gas:200,
            man:6,
            time:600
        },
        upgrade:['UpgradeMeleeAttacks','EvolveCarapace']
    }
});
Zerg.Defiler=Unit.extends({
    constructorPlus:function(props){
        //Same action mapping
        this.imgPos.dock=this.imgPos.moving;
        this.frame.dock=this.frame.moving;
        this.sound.burrow=new Audio(Game.CDN+'bgm/Zerg.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
        this.direction=6;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Defiler",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[72,72,72,72,72,72,72,72],
                    [144,144,144,144,144,144,144,144],[216,216,216,216,216,216,216,216],
                    [288,288,288,288,288,288,288,288],[360,360,360,360,360,360,360,360],
                    [432,432,432,432,432,432,432,432],[504,504,504,504,504,504,504,504],
                    [576,576,576,576,576,576,576,576],[720,720,720,720,720,720,720,720],
                    [792,792,792,792,792,792,792,792],[864,864,864,864,864,864,864,864],
                    [936,936,936,936,936,936,936,936],[1008,1008,1008,1008,1008,1008,1008,1008],
                    [1080,1080,1080,1080,1080,1080,1080,1080],[1152,1152,1152,1152,1152,1152,1152,1152]
                ],
                top: [
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434],
                    [0,62,124,186,248,310,372,434],[0,62,124,186,248,310,372,434]
                ]
            },
            burrow: {
                left: [
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216],
                    [288,-1,0,72,144,216],[288,-1,0,72,144,216]
                ],
                top: [
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496],
                    [496,-1,496,496,496,496],[496,-1,496,496,496,496]
                ]
            },
            unburrow: {
                left: [
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0],
                    [216,144,72,0,0,0],[216,144,72,0,0,0]
                ],
                top: [
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496],
                    [496,496,496,496,496,496],[496,496,496,496,496,496]
                ]
            }
        },
        width: 72,//72N
        height: 62,//62N
        frame: {
            moving: 8,
            burrow: 1,
            unburrow: 6
        },
        //Only for moving status, override
        speed:10,
        HP: 80,
        armor:1,
        MP: 200,
        sight:350,
        dieEffect:Burst.DefilerDeath,
        isFlying:false,
        unitType:Unit.MIDDLE,
        recover:Building.ZergBuilding.prototype.recover,
        cost:{
            mine:50,
            gas:150,
            man:2,
            time:500
        },
        upgrade:['EvolveCarapace'],
        items:{
            '6':{name:'Consume',condition:function(){
                return Magic.Consume.enabled
            }},
            '7':{name:'DarkSwarm'},
            '8':{name:'Plague',condition:function(){
                return Magic.Plague.enabled
            }},
            '9':{name:'Burrow',condition:function(){
                return Magic.Burrow.enabled
            }}
        }
    }
});
Zerg.InfestedTerran=AttackableUnit.extends({
    constructorPlus:function(props){
        this.sound.burrow=new Audio(Game.CDN+'bgm/Zerg.burrow.wav');
        this.sound.unburrow=new Audio(Game.CDN+'bgm/Zerg.unburrow.wav');
    },
    prototypePlus: {
        //Add basic unit info
        name: "InfestedTerran",
        imgPos: {
            moving: {
                left: [
                    [0,0,0,0,0,0,0,0],[41,41,41,41,41,41,41,41],
                    [82,82,82,82,82,82,82,82],[123,123,123,123,123,123,123,123],
                    [164,164,164,164,164,164,164,164],[205,205,205,205,205,205,205,205],
                    [246,246,246,246,246,246,246,246],[287,287,287,287,287,287,287,287],
                    [328,328,328,328,328,328,328,328],[410,410,410,410,410,410,410,410],
                    [451,451,451,451,451,451,451,451],[492,492,492,492,492,492,492,492],
                    [533,533,533,533,533,533,533,533],[574,574,574,574,574,574,574,574],
                    [615,615,615,615,615,615,615,615],[656,656,656,656,656,656,656,656]
                ],
                top: [
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378],
                    [0,54,108,162,216,270,324,378],[0,54,108,162,216,270,324,378]
                ]
            },
            dock: {
                left: [0,41,82,123,164,205,246,287,328,410,451,492,533,574,615,656],
                top: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            },
            burrow: {
                left: [
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576],
                    [616,-1,410,452,494,535,576],[616,-1,410,452,494,535,576]
                ],
                top: [
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436],
                    [436,-1,436,436,436,436,436],[436,-1,436,436,436,436,436]
                ]
            },
            unburrow: {
                left: [
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410],
                    [576,535,494,452,410,410,410],[576,535,494,452,410,410,410]
                ],
                top: [
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436],
                    [436,436,436,436,436,436,436],[436,436,436,436,436,436,436]
                ]
            }
        },
        width: 41,//41N
        height: 44,//54N
        frame: {
            moving: 8,
            dock: 1,
            burrow: 1,
            unburrow: 7
        },
        //Only for moving status, override
        speed:10,
        HP: 60,
        damage: 500,//Suicide
        armor:0,
        sight:175,
        meleeAttack: true,
        attackRange:35,
        attackInterval: 1000,//Suicide
        dieEffect:Burst.HumanDeath,
        attackEffect:Burst.InfestedBomb,
        isFlying:false,
        attackLimit:"ground",
        suicide:true,
        unitType:Unit.SMALL,
        attackType:AttackableUnit.NORMAL_ATTACK,
        recover:Building.ZergBuilding.prototype.recover,
        AOE:{
            hasEffect:false,
            radius:80
        },
        cost:{
            mine:100,
            gas:50,
            man:1,
            time:400
        },
        upgrade:['EvolveCarapace'],
        items:{
            '9':{name:'Burrow',condition:function(){
                return Magic.Burrow.enabled
            }}
        },
        //Override
        dock:function(){
            //Use the same behavior
            AttackableUnit.turnAround.call(this);
        }
    }
});
Zerg.Larva=Unit.extends({
    constructorPlus:function(props){
        this.imgPos.dock=this.imgPos.moving;
        //Cannot leave from this point
        this.originX=this.posX();
        this.originY=this.posY();
        this.moved=false;
    },
    prototypePlus: {
        //Add basic unit info
        name: "Larva",
        imgPos: {
            moving: {
                left: [
                    [1,1,1,1,1],[34,34,34,34,34],
                    [67,67,67,67,67],[100,100,100,100,100],
                    [133,133,133,133,133],[166,166,166,166,166],
                    [199,199,199,199,199],[232,232,232,232,232],
                    [265,265,265,265,265],[298,298,298,298,298],
                    [331,331,331,331,331],[364,364,364,364,364],
                    [397,397,397,397,397],[430,430,430,430,430],
                    [463,463,463,463,463],[496,496,496,496,496]
                ],
                top: [
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117],
                    [1,30,59,88,117],[1,30,59,88,117]
                ]
            }
        },
        width: 32,//33X+1 (0~15)
        height: 28,//29X+1
        frame: {
            moving: 5,
            dock: 1
        },
        //Only for moving status, override
        speed:4,
        HP: 25,
        armor:10,
        sight:70,
        dieEffect:Burst.LarvaDeath,
        unitType:Unit.SMALL,
        isFlying:false,
        recover:Building.ZergBuilding.prototype.recover,
        upgrade:['EvolveCarapace'],
        items:{
            '1':{name:'Drone'},
            '2':{name:'Zergling',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='SpawningPool';
                })
            }},
            '3':{name:'Overlord'},
            '4':{name:'Hydralisk',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='HydraliskDen';
                })
            }},
            '5':{name:'Mutalisk',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && (chara.name=='Spire' || chara.name=='GreaterSpire');
                })
            }},
            '6':{name:'Scourge',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && (chara.name=='Spire' || chara.name=='GreaterSpire');
                })
            }},
            '7':{name:'Queen',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='QueenNest';
                })
            }},
            '8':{name:'Ultralisk',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='UltraliskCavern';
                })
            }},
            '9':{name:'Defiler',condition:function(){
                return Building.allBuildings.some(function(chara){
                    return !(chara.isEnemy()) && chara.name=='DefilerMound';
                })
            }}
        },
        //Prevent user control moving
        moveTo:function(){},
        moveToward:function(){},
        //Override
        dock:function(){
            Unit.walkAroundLarva.call(this);
        }
    }
});

/***/ }),
/* 17 */
/***/ (function(module, exports) {

var keyController={
	shift:false,
    ctrl:false,
    disable:false,
    start:function(){
        //Keyboard settings
        window.onkeydown=function(event){
            //Will not switch page by Ctrl+N,cannot debug
            //event.preventDefault();
            //Sometimes need to disable shortcut key
            if (keyController.disable && event.keyCode!=13) return;
            switch (event.keyCode){
                //Press SHIFT down
                case 16:
                    keyController.shift=true;
                    break;
                //Press CTRL down
                case 17:
                    keyController.ctrl=true;
                    break;
                //Press number
                case 48:case 49:case 50:case 51:case 52:
                case 53:case 54:case 55:case 56:case 57:
                    var teamNum=String.fromCharCode(event.keyCode);
                    //Building team
                    if (keyController.ctrl) {
                        Game.addSelectedIntoTeam(teamNum);
                    }
                    //Call team
                    else {
                        Game.callTeam(teamNum);
                    }
                    break;
                //Move map
                case 37:
                    Map.needRefresh="LEFT";
                    break;
                case 38:
                    Map.needRefresh="TOP";
                    break;
                case 39:
                    Map.needRefresh="RIGHT";
                    break;
                case 40:
                    Map.needRefresh="BOTTOM";
                    break;
                //Replay speed control
                case 107:
                case 33:
                    //Speed up + or pageUp
                    Button.speedUpHandler();
                    break;
                case 109:
                case 34:
                    //Slow down - or pageDown
                    Button.slowDownHandler();
                    break;
                //Shortcut keys:
                //Press M
                case 77:
                    if ($.makeArray($('div.panel_Control button')).some(function(btn){
                        return btn.className=='move'
                    })) Button.moveHandler();
                    break;
                //Press S
                case 83:
                    if ($.makeArray($('div.panel_Control button')).some(function(btn){
                        return btn.className=='stop'
                    })) Button.stopHandler();
                    break;
                //Press A
                case 65:
                    if ($.makeArray($('div.panel_Control button')).some(function(btn){
                        return btn.className=='attack'
                    })) Button.attackHandler();
                    break;
                //Press P
                case 80:
                    if ($.makeArray($('div.panel_Control button')).some(function(btn){
                        return btn.className=='patrol'
                    })) Button.patrolHandler();
                    break;
                //Press H
                case 72:
                    if ($.makeArray($('div.panel_Control button')).some(function(btn){
                        return btn.className=='hold'
                    })) Button.holdHandler();
                    break;
                //Press ENTER
                case 13:
                    Cheat.handler();
                    break;
            }
        };
        window.onkeyup=function(event){
            switch (event.keyCode){
                //Press SHIFT up
                case 16:
                    keyController.shift=false;
                    break;
                //Press CTRL up
                case 17:
                    keyController.ctrl=false;
                    break;
            }
        };
    }
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

var mouseController={
    down:false,
    drag:false,
    startPoint:{x:0,y:0},
    endPoint:{x:0,y:0},
    isMultiSelect:function(){
      return keyController.shift;
    },
    isJoinTeam:function(){
        return keyController.ctrl;
    },
    leftClick:function(event){
        //Mouse at (clickX,clickY)
        var offset=$('#fogCanvas').offset();
        var clickX=event.pageX-offset.left;
        var clickY=event.pageY-offset.top;
        //Intercept event inside infoBox
        if (clickY>Game.infoBox.y) return;
        //Selection mode
        if (Button.callback==null) {
            //Find selected one, convert position
            var selectedOne=Game.getSelectedOne(clickX+Map.offsetX,clickY+Map.offsetY);
            //Cannot select enemy invisible unit
            if ((selectedOne instanceof Gobj) && selectedOne['isInvisible'+Game.team] && selectedOne.isEnemy()) return;
            //Single select will unselect all units and only choose selected one
            //Multi select will keep selected status and do nothing
            if (!mouseController.isMultiSelect())
                Game.unselectAll();
            //If has selected one
            if (selectedOne instanceof Gobj) {
                //Sound effect
                if (!(selectedOne.isEnemy())) selectedOne.sound.selected.play();
                //Cannot multiSelect with enemy
                if (selectedOne.isEnemy() || (Game.selectedUnit.isEnemy && Game.selectedUnit.isEnemy()))
                    Game.unselectAll();
                //Only selected one to show portrait
                Game.changeSelectedTo(selectedOne);
                //Add into allSelected if not included
                Game.addIntoAllSelected(selectedOne);
            }
            else {
                //Click null
                Game.changeSelectedTo({});
                Game.unselectAll();
            }
        }
        //Button mode
        else {
            //Callback
            Button.execute(event);
        }
        //Hide tooltip when click
        $('div.tooltip_Box').hide();
        //Login user statistic
        if (Multiplayer.statistic!=null) Multiplayer.statistic.left++;
    },
    rightClick:function(event,unlock,btn){
        //Mouse at (clickX,clickY)
        var offset=$('#fogCanvas').offset();
        var clickX=event.pageX-offset.left;
        var clickY=event.pageY-offset.top;
        //Intercept event inside infoBox
        if (clickY>Game.infoBox.y) return;
        //Show right click cursor
        var pos={x:(clickX+Map.offsetX),y:(clickY+Map.offsetY)};
        new Burst.RightClickCursor(pos);
        var charas=Game.allSelected.filter(function(chara){
            //Can only control our alive unit
            return chara.team==Game.team && chara.status!="dead";
        });
        //Handle user right click
        Multiplayer.cmds.push(JSON.stringify({
            uids:Multiplayer.getUIDs(charas),
            type:'rightClick',
            pos:pos,
            unlock:Boolean(unlock),
            btn:btn
        }));
        //Login user statistic
        if (Multiplayer.statistic!=null) Multiplayer.statistic.right++;
    },
    rightClickHandler:function(charas,pos,unlock,btn){
        //Find selected one or nothing
        var selectedEnemy=(charas.length>0)?Game.getSelectedOne(pos.x,pos.y,charas[0].team.toString()):null;
        charas.forEach(function(chara){
            //Sound effect
            if (!chara.isEnemy() && chara.sound.moving) chara.sound.moving.play();
            //Interrupt old destination routing
            if (chara.destination) {
                //Break possible dead lock
                if (chara.destination.next) chara.destination.next=null;
                delete chara.destination;
            }
            //Cancel possible hold
            if (chara.hold) {
                delete chara.AI;
                delete chara.findNearbyTargets;
                delete chara.hold;
                Button.refreshButtons();
            }
            //Unit cannot attack will always choose move mode
            var attackOrMove=(chara.attack)?(selectedEnemy instanceof Gobj):false;
            //Attack mode
            if (attackOrMove) {
                if (chara.cannotMove() && !(chara.isInAttackRange(selectedEnemy))) return;
                //Intercept invisible enemy
                if (selectedEnemy['isInvisible'+Game.team]) {
                    if (!chara.isEnemy()) Referee.voice('pError').play();
                    return;
                }
                chara.targetLock=true;
                chara.attack(selectedEnemy);
            }
            //Move mode
            else {
                if (chara.cannotMove()) return;
                //Only attackable units can stop attack
                if (chara.attack) chara.stopAttack();
                //Lock destination by default
                chara.targetLock=!unlock;
                chara.moveTo(pos.x,pos.y);
                //Record destination
                if (btn=='attack') {
                    chara.destination={x:pos.x,y:pos.y};
                }
                if (btn=='patrol') {
                    //Patrol dead lock
                    chara.destination={x:pos.x,y:pos.y};
                    chara.destination.next={x:chara.posX(),y:chara.posY(),next:chara.destination};
                }
            }
        });
    },
    dblClick:function(){
        //Multi select same type units
        if (!(Game.selectedUnit.isEnemy && Game.selectedUnit.isEnemy())) {
            var charas=Unit.allUnits.filter(function(chara){
                return !(chara.isEnemy()) && chara.insideScreen() && (chara.name==Game.selectedUnit.name);
            });
            Game.addIntoAllSelected(charas);
        }
    },
    //Can control all units
    toControlAll:function(){
        //For desktop
        if (!Game.isApp){
            //Mouse left click
            $('#fogCanvas')[0].onclick=function(event){
                event.preventDefault();
                if (mouseController.drag) {
                    //End drag, onclick triggered after onmouseup, don't do default left click action
                    mouseController.drag=false;
                }
                else {
                    mouseController.leftClick(event);
                }
            };
            //Mouse right click
            $('#fogCanvas')[0].oncontextmenu=function(event){
                //Prevent context menu show
                event.preventDefault();
                //Should not control units during replay
                if (Game.replayFlag) return;
                mouseController.rightClick(event);
                //Cancel pointer
                $('div.GameLayer').removeAttr('status');
                //Cancel callback
                Button.callback=null;
            };
            //Double click
            $('#fogCanvas')[0].ondblclick=function(event){
                //Prevent screen select
                event.preventDefault();
                mouseController.dblClick();
            };
            //Mouse click start
            $('#fogCanvas')[0].onmousedown=function(event){
                event.preventDefault();
                //Do not allow rectangular-multi-select with right click, only left clicks
                if (event.which === 3){
                    return;
                }
                if (!mouseController.down) {
                    //Mouse at (clickX,clickY)
                    var clickX=event.pageX-$('#fogCanvas').offset().left;
                    var clickY=event.pageY-$('#fogCanvas').offset().top;
                    mouseController.startPoint={x:clickX,y:clickY};
                    mouseController.down=true;
                }
            };
            //Mouse drag
            $('#fogCanvas')[0].onmousemove=function(event){
                event.preventDefault();
                if (mouseController.down) {
                    //Mouse at (clickX,clickY)
                    var clickX=event.pageX-$('#fogCanvas').offset().left;
                    var clickY=event.pageY-$('#fogCanvas').offset().top;
                    mouseController.endPoint={x:clickX,y:clickY};
                    if (Math.abs(clickX-mouseController.startPoint.x)>5 &&
                        Math.abs(clickY-mouseController.startPoint.y)>5) {
                        mouseController.drag=true;
                    }
                }
            };
            //Global client refresh map
            window.onmousemove=function(event){
                event.preventDefault();
                //Mouse at (clickX,clickY)
                mouseController.mouseX=event.clientX;
                mouseController.mouseY=event.clientY;
            };
            //Mouse click end
            $('#fogCanvas')[0].onmouseup=function(event){
                event.preventDefault();
                mouseController.down=false;
                if (mouseController.drag) {
                    //Multi select inside rect
                    Game.multiSelectInRect();
                }
            };
        }
        //For mobile
        else {
            $('#fogCanvas')[0].ontouchstart=function(event){
                event.preventDefault();
                //Drag rectangle
                if (event.touches.length==2){
                    var offsetX=$('#fogCanvas').offset().left;
                    var offsetY=$('#fogCanvas').offset().top;
                    mouseController.drag=true;
                    mouseController.startPoint={x:event.touches[0].pageX-offsetX,y:event.touches[0].pageY-offsetY};
                    mouseController.endPoint={x:event.touches[1].pageX-offsetX,y:event.touches[1].pageY-offsetY};
                }
            };
            $('#fogCanvas')[0].ontouchend=function(event){
                event.preventDefault();
                if (mouseController.drag) {
                    //Multi select inside rect
                    Game.multiSelectInRect();
                    //End drag
                    mouseController.drag=false;
                }
            };
            mouseController.mobileScreen=new Hammer(window);
            mouseController.canvasScreen=new Hammer($('#fogCanvas')[0]);
            mouseController.canvasScreen.on('tap',function(event){
                event.preventDefault();
                //Callback
                mouseController.leftClick(event.pointers[0]);
            });
            mouseController.canvasScreen.on('doubletap',function(event){
                event.preventDefault();
                mouseController.dblClick();
            });
            mouseController.canvasScreen.on('press',function(event){
                //Prevent context menu show
                event.preventDefault();
                //Should not control units during replay
                if (Game.replayFlag) return;
                mouseController.rightClick(event.changedPointers[0]);
                //Cancel handler
                $('div.GameLayer').removeAttr('status');
                Button.callback=null;
            });
            mouseController.canvasScreen.on('panleft',function(event){
                Map.needRefresh="RIGHT";
            });
            mouseController.canvasScreen.on('panright',function(event){
                Map.needRefresh="LEFT";
            });
            mouseController.mobileScreen.on('panup',function(event){
                Map.needRefresh="BOTTOM";
            });
            mouseController.mobileScreen.on('pandown',function(event){
                Map.needRefresh="TOP";
            });
        }
        //Both sides
        $('div#GamePlay div').on('contextmenu',function(event){
            event.preventDefault();
        });
        $('canvas[name="mini_map"]').on('click',function(event){
            event.preventDefault();
            Map.clickHandler(event);
        });
        $('canvas[name="mini_map"]').on('contextmenu',function(event){
            event.preventDefault();
            Map.dblClickHandler(event);
        });
    }
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

var Cheat={
    isShown:false,
    cwal:false,
    gathering:false,
    manUnlimited:false,
    handler:function(){
        if (Cheat.isShown){
            if (Multiplayer.ON){
                Multiplayer.webSocket.send(JSON.stringify({
                    type:'chat',
                    from:Game.team,
                    msg:$('input#cheatInput').val()
                }));
            }
            else {
                //Forbid cheating during replay
                if (!Game.replayFlag){
                    var cheatFlag=Cheat.execute($('input#cheatInput').val().toLowerCase());
                    if (cheatFlag) {
                        //Refresh control panel
                        Game.changeSelectedTo(Game.selectedUnit);
                        Game.showMessage('Cheat enabled');
                    }
                }
            }
            $('#cheat_Box').hide();
            $('input#cheatInput').val('');
            Cheat.isShown=false;
            keyController.disable=false;
        }
        else {
            $('#cheat_Box').show();
            $('input#cheatInput').focus();
            Cheat.isShown=true;
            keyController.disable=true;
        }
    },
    execute:function(cheatCode){
        //Forbid cheating when multiplayer mode
        if (Multiplayer.ON) return;
        var cheatFlag=true;
        switch (cheatCode){
            case "show me the money":
                Resource[Game.team].mine+=10000;
                Resource[Game.team].gas+=10000;
                break;
            case "black sheep wall":
                //Switch between show fog or not show
                Map.fogFlag=!Map.fogFlag;
                if (Map.fogFlag==false){
                    //Clear old fog on screen
                    Game.fogCxt.clearRect(0,0,Game.HBOUND,Game.VBOUND);
                    //Redraw mini-map
                    Map.drawFogAndMinimap();
                }
                break;
            case "something for nothing":
                //Upgrade all grades
                for (var grade in Upgrade){
                    Upgrade[grade].effect(Game.team);
                }
                break;
            case "full recovery":
                Unit.allOurUnits().concat(Building.ourBuildings()).forEach(function(chara){
                    chara.life=chara.get('HP');
                    if (chara.SP) chara.shield=chara.get('SP');
                    if (chara.MP) chara.magic=chara.get('MP');
                });
                break;
            case "staying alive":
                Referee.winCondition=Referee.loseCondition=function(){
                    return false;
                };
                break;
            case "operation cwal":
                Cheat.cwal=!(Cheat.cwal);
                break;
            case "the gathering":
                Cheat.gathering=!(Cheat.gathering);
                break;
            case "food for thought":
                Cheat.manUnlimited=!(Cheat.manUnlimited);
                break;
            case "power overwhelming":
                if (Cheat.oldCalculateDamageBy){
                    var tempCalculateDamageBy= $.extend([],Cheat.oldCalculateDamageBy);
                    Cheat.oldCalculateDamageBy=[Unit.prototype.calculateDamageBy,Building.prototype.calculateDamageBy];
                    Unit.prototype.calculateDamageBy=tempCalculateDamageBy[0];
                    Building.prototype.calculateDamageBy=tempCalculateDamageBy[1];
                }
                else {
                    Cheat.oldCalculateDamageBy=[Unit.prototype.calculateDamageBy,Building.prototype.calculateDamageBy];
                    Unit.prototype.calculateDamageBy=function(enemyObj){
                        if (enemyObj.isEnemy && enemyObj.isEnemy()) return 0;
                        else return Cheat.oldCalculateDamageBy[0].call(this,enemyObj);
                    };
                    Building.prototype.calculateDamageBy=function(enemyObj){
                        if (enemyObj.isEnemy && enemyObj.isEnemy()) return 0;
                        else return Cheat.oldCalculateDamageBy[1].call(this,enemyObj);
                    };
                }
                break;
            case "big daddy":
                var daddy=new Hero.HeroCruiser({x:Map.offsetX+Game.HBOUND/2,y:Map.offsetY+Game.VBOUND/2});
                Game.changeSelectedTo(daddy);
                break;
            case "big mommy":
                var mommy=new Hero.Sarah({x:Map.offsetX+Game.HBOUND/2,y:Map.offsetY+Game.VBOUND/2});
                Game.changeSelectedTo(mommy);
                break;
            case "game over man":
            case "gg":
                Game.lose();
                break;
            case "there is no cow level":
            case "your gg":
                Game.win();
                break;
            case "fuck your mother":
                Unit.allEnemyUnits().concat(Building.enemyBuildings()).forEach(function(chara){
                    chara.die();
                });
                break;
            case "fuck my asshole":
                Unit.allOurUnits().concat(Building.ourBuildings()).forEach(function(chara){
                    chara.die();
                });
                break;
            case "liuda is god":
                Cheat.execute('black sheep wall');
                Referee.winCondition=Referee.loseCondition=function(){
                    return false;
                };
                Unit.allUnits.concat(Building.allBuildings).forEach(function(chara){
                    chara.die();
                });
                break;
            default:
                //Not match any of above cheating code
                cheatFlag=false;
                break;
        }
        return cheatFlag;
    }
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var Levels=[
    {
        level:1,
        load:function(){
            //Load map
            Map.setCurrentMap('Switchback');
            //Choose side and apply race style
            var races=['Terran','Zerg'];
            var startPoint=[{x:50,y:50},{x:200,y:50}];
            if (!Game.replayFlag) Game.team=Math.random()*2>>0;
            Game.race.choose(races[Game.team]);
            Map.offsetX=startPoint[Game.team].x;
            Map.offsetY=startPoint[Game.team].y;
            //Load units
            new Terran.BattleCruiser({x:100,y:100});
            new Terran.Wraith({x:200,y:100});
            new Terran.BattleCruiser({x:100,y:200});
            new Terran.Wraith({x:200,y:200});
            new Terran.BattleCruiser({x:100,y:300});
            new Terran.Wraith({x:200,y:300});
            new Terran.SCV({x:100,y:400});
            new Building.TerranBuilding.MissileTurret({x:100,y:150});
            new Building.ProtossBuilding.PhotonCannon({x:100,y:250});
            //Add enemy
            new Zerg.Drone({x:600,y:400,team:1});
            new Zerg.Mutalisk({x:700,y:100,team:1});
            new Zerg.Devourer({x:800,y:100,team:1});
            new Zerg.Guardian({x:900,y:100,team:1});
            new Zerg.Mutalisk({x:700,y:200,team:1});
            new Zerg.Devourer({x:800,y:200,team:1});
            new Zerg.Guardian({x:900,y:200,team:1});
            new Zerg.Mutalisk({x:700,y:300,team:1});
            new Zerg.Devourer({x:800,y:300,team:1});
            new Zerg.Guardian({x:900,y:300,team:1});
            //Apply cheat for testing
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
            },0);
        }
    },
    {
        level:2,
        load:function(){
            //Test multiplayer
            if (!Game.replayFlag && confirm('Want enter multiplayer mode?')){
                //Enable multiplayer
                Multiplayer.enable();//Has fog for level2
            }
            //Load map
            Map.setCurrentMap('Volcanis');
            Map.offsetX=120;
            Map.offsetY=50;
            //Apply race style
            Game.race.choose('Zerg');
            //Load units
            new Zerg.Overlord({x:100,y:100});
            new Zerg.Guardian({x:100,y:200});
            new Zerg.Devourer({x:100,y:300});
            new Zerg.Mutalisk({x:200,y:100});
            new Zerg.Devourer({x:200,y:200});
            new Zerg.Guardian({x:200,y:300});
            new Zerg.Mutalisk({x:300,y:100});
            new Zerg.Devourer({x:300,y:200});
            new Zerg.Guardian({x:300,y:300});
            new Building.ZergBuilding.SporeColony({x:100,y:200});
            //Add enemy
            new Terran.Wraith({x:700,y:100,team:1});
            new Terran.Wraith({x:800,y:100,team:1});
            new Terran.Wraith({x:900,y:100,team:1});
            new Terran.Civilian({x:700,y:200,team:1});
            new Terran.Civilian({x:800,y:200,team:1});
            new Terran.Civilian({x:900,y:200,team:1});
            new Terran.BattleCruiser({x:700,y:300,team:1});
            new Terran.BattleCruiser({x:800,y:300,team:1});
            new Terran.BattleCruiser({x:900,y:300,team:1});
        }
    },
    {
        level:3,
        load:function(){
            //Load map
            Map.setCurrentMap('TrenchWars');
            //Apply race style
            Game.race.choose('Zerg');
            //Load units
            new Neutral.Ragnasaur({x:100,y:100});
            new Neutral.Rhynsdon({x:200,y:100});
            new Neutral.Ursadon({x:100,y:200});
            new Neutral.Bengalaas({x:200,y:200});
            new Neutral.Scantid({x:100,y:300});
            new Neutral.Kakaru({x:200,y:300});
            new Zerg.Hydralisk({x:150,y:100});
            new Zerg.Lurker({x:150,y:200});
            new Zerg.Ultralisk({x:150,y:300});
            //Add enemy
            new Neutral.Ragnasaur({x:700,y:100,team:1});
            new Neutral.Rhynsdon({x:700,y:200,team:1});
            new Neutral.Ursadon({x:700,y:300,team:1});
            new Neutral.Bengalaas({x:800,y:100,team:1});
            new Neutral.Scantid({x:800,y:200,team:1});
            new Neutral.Kakaru({x:800,y:300,team:1});
        }
    },
    {
        level:4,
        load:function(){
            //Test multiplayer
            /*if (!Game.replayFlag && confirm('Want enter multiplayer mode?')){
                //Enable multiplayer
                Multiplayer.enable();
                Game.commandTimeout(function(){
                    //Upgrade all grades
                    for (var grade in Upgrade){
                        Upgrade[grade].effect(0);
                        Upgrade[grade].effect(1);
                    }
                    Resource[0].mine=Resource[1].mine=10000;
                    Resource[0].gas=Resource[1].gas=10000;
                },0);
                Cheat.manUnlimited=true;
                Map.fogFlag=false;
            }*/
            //Load map
            Map.setCurrentMap('BloodBath');
            //Choose side and apply race style
            var races=['Zerg','Terran'];
            var startPoint=[{x:0,y:50},{x:200,y:50}];
            if (!Game.replayFlag) Game.team=Math.random()*2>>0;
            Game.race.choose(races[Game.team]);
            Map.offsetX=startPoint[Game.team].x;
            Map.offsetY=startPoint[Game.team].y;
            //Load units
            new Zerg.Drone({x:100,y:100});
            new Zerg.Zergling({x:200,y:100});
            new Zerg.Hydralisk({x:100,y:200});
            new Zerg.Scourge({x:200,y:200});
            new Zerg.Lurker({x:100,y:300});
            new Zerg.Ultralisk({x:200,y:300});
            new Zerg.Broodling({x:100,y:400});
            new Zerg.InfestedTerran({x:200,y:400});
            new Zerg.Queen({x:100,y:50});
            new Zerg.Defiler({x:200,y:50});
            new Hero.Sarah({x:100,y:150});
            new Zerg.Mutalisk({x:50,y:50});
            new Zerg.Guardian({x:50,y:150});
            new Zerg.Devourer({x:50,y:250});
            new Zerg.Overlord({x:50,y:350});
            //Add enemy
            new Terran.Marine({x:700,y:100,team:1});
            new Terran.Firebat({x:700,y:200,team:1});
            new Terran.Vulture({x:700,y:300,team:1});
            new Terran.Tank({x:800,y:100,team:1});
            new Terran.Goliath({x:800,y:200,team:1});
            new Terran.Dropship({x:800,y:300,team:1});
            new Terran.Ghost({x:700,y:50,team:1});
            new Terran.Vessel({x:700,y:150,team:1});
            new Terran.Valkyrie({x:700,y:250,team:1});
            new Terran.Medic({x:750,y:50,team:1});
            new Terran.Wraith({x:750,y:150,team:1});
            new Terran.BattleCruiser({x:750,y:250,team:1});
            new Terran.SCV({x:750,y:300,team:1});
            //Apply cheat for testing
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
                Cheat.execute('something for nothing');
                Cheat.execute('full recovery');
            },0);
        }
    },
    {
        level:5,
        load:function(){
            //Load map
            Map.setCurrentMap('OrbitalRelay');
            //Choose side and apply race style
            var races=['Terran','Protoss'];
            var startPoint=[{x:0,y:50},{x:200,y:50}];
            if (!Game.replayFlag) Game.team=Math.random()*2>>0;
            Game.race.choose(races[Game.team]);
            Map.offsetX=startPoint[Game.team].x;
            Map.offsetY=startPoint[Game.team].y;
            //Load units
            new Terran.Marine({x:100,y:100});
            new Terran.Firebat({x:200,y:100});
            new Terran.Ghost({x:100,y:200});
            new Terran.Vulture({x:200,y:200});
            new Terran.Tank({x:100,y:300});
            new Terran.Goliath({x:200,y:300});
            new Terran.Medic({x:100,y:400});
            new Terran.Dropship({x:200,y:400});
            new Terran.Vessel({x:100,y:50});
            new Terran.Valkyrie({x:200,y:50});
            new Hero.Kerrigan({x:100,y:150});
            new Terran.Wraith({x:200,y:150});
            new Terran.SCV({x:50,y:250});
            new Terran.BattleCruiser({x:150,y:250});
            //Add enemy
            new Protoss.Probe({x:700,y:100,team:1});
            new Protoss.Zealot({x:700,y:200,team:1});
            new Protoss.Dragoon({x:700,y:300,team:1});
            new Protoss.Templar({x:800,y:100,team:1});
            new Protoss.DarkTemplar({x:800,y:200,team:1});
            new Protoss.Observer({x:800,y:300,team:1});
            new Protoss.Reaver({x:800,y:300,team:1});
            new Protoss.Arbiter({x:700,y:250,team:1});
            new Protoss.Scout({x:750,y:250,team:1});
            new Protoss.Carrier({x:700,y:150,team:1});
            new Protoss.Corsair({x:700,y:200,team:1});
            new Protoss.Archon({x:750,y:50,team:1});
            new Protoss.DarkArchon({x:750,y:150,team:1});
            new Protoss.Shuttle({x:850,y:150,team:1});
            new Protoss.Observer({x:850,y:250,team:1});
            //Apply cheat for testing magic
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
                Cheat.execute('something for nothing');
                Cheat.execute('full recovery');
            },0);
        }
    },
    {
        level:6,
        load:function(){
            //Load map
            Map.setCurrentMap('ThinIce');
            //Choose side and apply race style
            var races=['Protoss','Zerg'];
            var startPoint=[{x:0,y:50},{x:200,y:50}];
            if (!Game.replayFlag) Game.team=Math.random()*2>>0;
            Game.race.choose(races[Game.team]);
            Map.offsetX=startPoint[Game.team].x;
            Map.offsetY=startPoint[Game.team].y;
            //Load units
            new Protoss.Probe({x:100,y:100});
            new Protoss.Zealot({x:200,y:100});
            new Protoss.Dragoon({x:100,y:200});
            new Protoss.Templar({x:200,y:200});
            new Protoss.DarkTemplar({x:100,y:300});
            new Protoss.Reaver({x:200,y:300});
            new Protoss.Archon({x:100,y:400});
            new Protoss.DarkArchon({x:200,y:400});
            new Protoss.Shuttle({x:100,y:50});
            new Protoss.Observer({x:200,y:50});
            new Protoss.Observer({x:200,y:100});
            new Protoss.Arbiter({x:100,y:150});
            new Protoss.Scout({x:200,y:150});
            new Protoss.Carrier({x:100,y:250});
            new Protoss.Corsair({x:200,y:250});
            //Add enemy
            new Zerg.Drone({x:700,y:100,team:1});
            new Zerg.Zergling({x:700,y:200,team:1});
            new Zerg.Hydralisk({x:700,y:300,team:1});
            new Zerg.Scourge({x:800,y:100,team:1});
            new Zerg.Lurker({x:800,y:200,team:1});
            new Zerg.Ultralisk({x:800,y:300,team:1});
            new Zerg.Broodling({x:700,y:150,team:1});
            new Zerg.InfestedTerran({x:700,y:250,team:1});
            new Zerg.Queen({x:800,y:150,team:1});
            new Zerg.Defiler({x:800,y:250,team:1});
            new Zerg.Mutalisk({x:750,y:50,team:1});
            new Zerg.Guardian({x:750,y:150,team:1});
            new Zerg.Devourer({x:750,y:250,team:1});
            new Zerg.Overlord({x:850,y:150,team:1});
            //Apply cheat for testing magic
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
                Cheat.execute('something for nothing');
                Cheat.execute('full recovery');
            },0);
        }
    },
    {
        level:7,
        load:function(){
            //Load map
            Map.setCurrentMap('BigGameHunters');
            //Apply race style
            Game.race.choose('Protoss');
            //Add buildings
            //Zerg buildings
            new Building.ZergBuilding.Hatchery({x:0,y:520});
            new Building.ZergBuilding.Lair({x:0,y:670}).life=150;
            new Building.ZergBuilding.Hive({x:0,y:820});
            new Building.ZergBuilding.CreepColony({x:150,y:520});
            new Building.ZergBuilding.SunkenColony({x:150,y:670});
            new Building.ZergBuilding.SporeColony({x:150,y:820,team:1});
            new Building.ZergBuilding.Extractor({x:300,y:520});
            new Building.ZergBuilding.SpawningPool({x:300,y:670});
            new Building.ZergBuilding.EvolutionChamber({x:300,y:820});
            new Building.ZergBuilding.HydraliskDen({x:450,y:520});
            new Building.ZergBuilding.Spire({x:450,y:670});
            new Building.ZergBuilding.GreaterSpire({x:450,y:820});
            new Building.ZergBuilding.QueenNest({x:600,y:520});
            new Building.ZergBuilding.NydusCanal({x:600,y:670});
            new Building.ZergBuilding.UltraliskCavern({x:600,y:820});
            new Building.ZergBuilding.DefilerMound({x:750,y:520});
            new Building.ZergBuilding.InfestedBase({x:750,y:670});
            new Building.ZergBuilding.OvermindI({x:750,y:820});
            new Building.ZergBuilding.OvermindII({x:900,y:520});
            //Terran buildings
            new Building.TerranBuilding.CommandCenter({x:0,y:1020,team:1}).life=375;
            new Building.TerranBuilding.SupplyDepot({x:0,y:1170,team:1});
            new Building.TerranBuilding.Refinery({x:0,y:1320});
            new Building.TerranBuilding.Barracks({x:150,y:1020});
            new Building.TerranBuilding.EngineeringBay({x:150,y:1170});
            new Building.TerranBuilding.MissileTurret({x:150,y:1320});
            new Building.TerranBuilding.Academy({x:300,y:1020});
            new Building.TerranBuilding.Bunker({x:300,y:1170});
            new Building.TerranBuilding.Factory({x:300,y:1320});
            new Building.TerranBuilding.Starport({x:450,y:1020});
            new Building.TerranBuilding.ScienceFacility({x:450,y:1170});
            new Building.TerranBuilding.Armory({x:450,y:1320});
            new Building.TerranBuilding.ComstatStation({x:600,y:1020});
            new Building.TerranBuilding.NuclearSilo({x:600,y:1170});
            new Building.TerranBuilding.MachineShop({x:600,y:1320});
            new Building.TerranBuilding.ControlTower({x:750,y:1020});
            new Building.TerranBuilding.PhysicsLab({x:750,y:1170});
            new Building.TerranBuilding.ConvertOps({x:750,y:1320});
            new Building.TerranBuilding.CrashCruiser({x:900,y:1020});
            new Building.TerranBuilding.BigCannon({x:900,y:1170});
            //Protoss buildings
            new Building.ProtossBuilding.Nexus({x:0,y:20}).life=150;
            new Building.ProtossBuilding.Pylon({x:0,y:170,team:1});
            new Building.ProtossBuilding.Assimilator({x:0,y:320});
            new Building.ProtossBuilding.Gateway({x:150,y:20});
            new Building.ProtossBuilding.Forge({x:150,y:170});
            new Building.ProtossBuilding.PhotonCannon({x:150,y:320});
            new Building.ProtossBuilding.CyberneticsCore({x:300,y:20});
            new Building.ProtossBuilding.ShieldBattery({x:300,y:170});
            new Building.ProtossBuilding.RoboticsFacility({x:300,y:320});
            new Building.ProtossBuilding.StarGate({x:450,y:20});
            new Building.ProtossBuilding.CitadelOfAdun({x:450,y:170});
            new Building.ProtossBuilding.RoboticsSupportBay({x:450,y:320});
            new Building.ProtossBuilding.FleetBeacon({x:600,y:20});
            new Building.ProtossBuilding.TemplarArchives({x:600,y:170});
            new Building.ProtossBuilding.Observatory({x:600,y:320});
            new Building.ProtossBuilding.ArbiterTribunal({x:750,y:20});
            new Building.ProtossBuilding.TeleportGate({x:750,y:170});
            new Building.ProtossBuilding.Pyramid({x:750,y:320});
            new Building.ProtossBuilding.TeleportPoint({x:900,y:20});
            //Apply cheat for testing magic
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
            },0);
        }
    },
    {
        level:8,
        label:'Campaign',
        load:function(){
            //Load map
            Map.setCurrentMap('TheHunters');
            Map.offsetX=0;
            Map.offsetY=3424;
            //Multiplayer
            Game.playerNum=4;
            //Choose side and apply race style
            var races=['Terran','Zerg','Terran','Protoss'];
            var startPoint=[{x:100,y:4000-innerHeight},{x:4000-innerWidth,y:4000-innerHeight},{x:100,y:100},{x:4000-innerWidth,y:100}];
            if (!Game.replayFlag) Game.team=Math.random()*4>>0;
            Game.race.choose(races[Game.team]);
            Map.offsetX=startPoint[Game.team].x;
            Map.offsetY=startPoint[Game.team].y;
            //Apply cheat
            Cheat.execute('black sheep wall');
            //Our buildings and units
            new Building.ZergBuilding.OvermindI({x:662,y:3828});
            new Building.ZergBuilding.OvermindII({x:300,y:3694});
            new Building.TerranBuilding.CrashCruiser({x:820,y:3600});
            new Building.TerranBuilding.BigCannon({x:260,y:3560});
            new Building.ProtossBuilding.Pyramid({x:560,y:3690});
            new Building.ProtossBuilding.TeleportGate({x:560,y:3558});
            new Building.ProtossBuilding.TeleportPoint({x:534,y:3884});
            new Hero.HeroCruiser({x:300,y:3455});
            new Hero.HeroCruiser({x:690,y:3500});
            new Hero.HeroCruiser({x:866,y:3744});
            new Hero.Sarah({x:434,y:3600});
            new Hero.Sarah({x:700,y:3730});
            new Hero.Kerrigan({x:464,y:3568});
            new Hero.Kerrigan({x:694,y:3690});
            new Protoss.Observer({x:484,y:3824});
            new Protoss.Observer({x:524,y:3824});
            //Zerg
            new Building.ZergBuilding.Hatchery({x:3470,y:3720,team:1});
            new Building.ZergBuilding.Lair({x:3265,y:3795,team:1});
            new Building.ZergBuilding.Hive({x:3650,y:3700,team:1});
            new Building.ZergBuilding.CreepColony({x:3488,y:3552,team:1});
            new Building.ZergBuilding.CreepColony({x:3264,y:3552,team:1});
            new Building.ZergBuilding.SunkenColony({x:3328,y:3552,team:1});
            new Building.ZergBuilding.SunkenColony({x:3392,y:3552,team:1});
            new Building.ZergBuilding.SporeColony({x:3136,y:3552,team:1});
            new Building.ZergBuilding.Extractor({x:3420,y:3800,team:1});
            new Building.ZergBuilding.SpawningPool({x:3440,y:3616,team:1});
            new Building.ZergBuilding.EvolutionChamber({x:3248,y:3616,team:1});
            new Building.ZergBuilding.HydraliskDen({x:3344,y:3616,team:1});
            new Building.ZergBuilding.Spire({x:3744,y:3552,team:1});
            new Building.ZergBuilding.GreaterSpire({x:3808,y:3616,team:1});
            new Building.ZergBuilding.QueenNest({x:3728,y:3616,team:1});
            new Building.ZergBuilding.NydusCanal({x:3200,y:3552,team:1});
            new Building.ZergBuilding.UltraliskCavern({x:3824,y:3520,team:1});
            new Building.ZergBuilding.DefilerMound({x:3104,y:3776,team:1});
            new Building.ZergBuilding.InfestedBase({x:3264,y:3920,team:1});
            new Zerg.Drone({x:3828,y:3724,team:1});
            new Zerg.Drone({x:3832,y:3826,team:1});
            new Zerg.Drone({x:3700,y:3850,team:1});
            new Zerg.Zergling({x:3473,y:3500,team:1});
            new Zerg.Zergling({x:3541,y:3535,team:1});
            new Zerg.Hydralisk({x:3314,y:3500,team:1});
            new Zerg.Hydralisk({x:3353,y:3500,team:1});
            new Zerg.Overlord({x:3044,y:3632,team:1});
            new Zerg.Overlord({x:3522,y:3438,team:1});
            new Zerg.Mutalisk({x:3135,y:3615,team:1});
            new Zerg.Mutalisk({x:3870,y:3596,team:1});
            new Zerg.Devourer({x:3292,y:3675,team:1});
            new Zerg.Devourer({x:3644,y:3535,team:1});
            new Zerg.Guardian({x:3138,y:3675,team:1});
            new Zerg.Guardian({x:3580,y:3585,team:1});
            new Zerg.Scourge({x:3154,y:3490,team:1});
            new Zerg.Scourge({x:3213,y:3668,team:1});
            new Zerg.Lurker({x:3260,y:3500,team:1});
            new Zerg.Lurker({x:3408,y:3500,team:1});
            new Zerg.Ultralisk({x:3638,y:3463,team:1});
            new Zerg.Broodling({x:3602,y:3666,team:1});
            new Zerg.InfestedTerran({x:3184,y:3950,team:1});
            new Zerg.Queen({x:3647,y:3610,team:1});
            new Zerg.Defiler({x:3047,y:3710,team:1});
            //Terran
            new Building.TerranBuilding.CommandCenter({x:320,y:180,team:2});
            new Building.TerranBuilding.ComstatStation({x:434,y:220,team:2});
            new Building.TerranBuilding.SupplyDepot({x:368,y:416,team:2});
            new Building.TerranBuilding.SupplyDepot({x:464,y:416,team:2});
            new Building.TerranBuilding.SupplyDepot({x:368,y:480,team:2});
            new Building.TerranBuilding.SupplyDepot({x:464,y:480,team:2});
            new Building.TerranBuilding.Refinery({x:96,y:246,team:2});
            new Building.TerranBuilding.Barracks({x:576,y:432,team:2});
            new Building.TerranBuilding.EngineeringBay({x:576,y:336,team:2});
            new Building.TerranBuilding.MissileTurret({x:384,y:576,team:2});
            new Building.TerranBuilding.MissileTurret({x:544,y:576,team:2});
            new Building.TerranBuilding.Academy({x:272,y:416,team:2});
            new Building.TerranBuilding.Bunker({x:636,y:556,team:2});
            new Building.TerranBuilding.Bunker({x:764,y:460,team:2});
            new Building.TerranBuilding.Factory({x:732,y:220,team:2});
            new Building.TerranBuilding.MachineShop({x:832,y:256,team:2});
            new Building.TerranBuilding.Starport({x:732,y:316,team:2});
            new Building.TerranBuilding.ControlTower({x:832,y:352,team:2});
            new Building.TerranBuilding.ScienceFacility({x:60,y:390,team:2});
            new Building.TerranBuilding.PhysicsLab({x:160,y:416,team:2});
            new Building.TerranBuilding.Armory({x:272,y:480,team:2});
            new Terran.SCV({x:246,y:116,team:2});
            new Terran.SCV({x:400,y:114,team:2});
            new Terran.SCV({x:222,y:220,team:2});
            new Terran.Marine({x:816,y:528,team:2});
            new Terran.Marine({x:726,y:590,team:2});
            new Terran.Firebat({x:692,y:618,team:2});
            new Terran.Firebat({x:846,y:526,team:2});
            new Terran.Ghost({x:690,y:530,team:2});
            new Terran.Medic({x:725,y:528,team:2});
            new Terran.Vulture({x:918,y:373,team:2});
            new Terran.Vulture({x:920,y:512,team:2});
            new Terran.Tank({x:922,y:325,team:2});
            new Terran.Tank({x:920,y:468,team:2});
            new Terran.Goliath({x:918,y:270,team:2});
            new Terran.Goliath({x:940,y:420,team:2});
            new Terran.Wraith({x:672,y:400,team:2});
            new Terran.Wraith({x:728,y:400,team:2});
            new Terran.Dropship({x:475,y:548,team:2});
            new Terran.Vessel({x:692,y:472,team:2});
            new Terran.BattleCruiser({x:500,y:326,team:2});
            new Terran.BattleCruiser({x:580,y:510,team:2});
            new Terran.Valkyrie({x:790,y:400,team:2});
            new Terran.Valkyrie({x:854,y:400,team:2});
            new Terran.Civilian({x:400,y:350,team:2});
            new Terran.Civilian({x:580,y:250,team:2});
            //Protoss
            new Building.ProtossBuilding.Nexus({x:3614,y:222,team:3});
            new Building.ProtossBuilding.Pylon({x:3296,y:512,team:3});
            new Building.ProtossBuilding.Pylon({x:3424,y:288,team:3});
            new Building.ProtossBuilding.Pylon({x:3648,y:512,team:3});
            new Building.ProtossBuilding.Assimilator({x:3582,y:86,team:3});
            new Building.ProtossBuilding.Gateway({x:3648,y:624,team:3});
            new Building.ProtossBuilding.Forge({x:3504,y:448,team:3});
            new Building.ProtossBuilding.PhotonCannon({x:3200,y:448,team:3});
            new Building.ProtossBuilding.PhotonCannon({x:3200,y:608,team:3});
            new Building.ProtossBuilding.PhotonCannon({x:3392,y:608,team:3});
            new Building.ProtossBuilding.CyberneticsCore({x:3760,y:448,team:3});
            new Building.ProtossBuilding.ShieldBattery({x:3728,y:544,team:3});
            new Building.ProtossBuilding.RoboticsFacility({x:3344,y:224,team:3});
            new Building.ProtossBuilding.StarGate({x:3232,y:304,team:3});
            new Building.ProtossBuilding.CitadelOfAdun({x:3632,y:408,team:3});
            new Building.ProtossBuilding.RoboticsSupportBay({x:3344,y:384,team:3});
            new Building.ProtossBuilding.FleetBeacon({x:3438,y:182,team:3});
            new Building.ProtossBuilding.TemplarArchives({x:3504,y:544,team:3});
            new Building.ProtossBuilding.Observatory({x:3504,y:320,team:3});
            new Building.ProtossBuilding.ArbiterTribunal({x:3216,y:192,team:3});
            new Protoss.Probe({x:3668,y:202,team:3});
            new Protoss.Probe({x:3794,y:244,team:3});
            new Protoss.Probe({x:3796,y:338,team:3});
            new Protoss.Zealot({x:3535,y:640,team:3});
            new Protoss.Zealot({x:3635,y:736,team:3});
            new Protoss.Dragoon({x:3536,y:688,team:3});
            new Protoss.Dragoon({x:3585,y:720,team:3});
            new Protoss.Templar({x:3472,y:655,team:3});
            new Protoss.DarkTemplar({x:3730,y:712,team:3});
            new Protoss.Reaver({x:3358,y:475,team:3});
            new Protoss.Archon({x:3478,y:722,team:3});
            new Protoss.DarkArchon({x:3780,y:636,team:3});
            new Protoss.Shuttle({x:3296,y:612,team:3});
            new Protoss.Observer({x:3250,y:398,team:3});
            new Protoss.Observer({x:3378,y:692,team:3});
            new Protoss.Arbiter({x:3350,y:296,team:3});
            new Protoss.Scout({x:3132,y:390,team:3});
            new Protoss.Scout({x:3100,y:636,team:3});
            new Protoss.Carrier({x:3102,y:470,team:3});
            new Protoss.Corsair({x:3106,y:580,team:3});
            new Protoss.Corsair({x:3838,y:544,team:3});
            //Apply cheat for testing magic
            Game.commandTimeout(function(){
                Cheat.execute('show me the money');
            },0);
        }
    },
    {
        level:9,
        label:'ProtectAthena',
        load:function(){
            //Load map
            Map.setCurrentMap('OrbitalRelay');
            Map.offsetX=(1536-Game.HBOUND/2)>>0;
            Map.offsetY=(1536-Game.VBOUND/2)>>0;
            Map.fogFlag=false;
            //Apply race style
            Game.race.choose('Protoss');
            //Single player
            Multiplayer.ON=false;
            //Add our buildings and units
            //Override
            Building.ProtossBuilding.Pyramid.prototype.HP=3000;
            Building.ProtossBuilding.Pyramid.prototype.SP=3000;
            Building.ProtossBuilding.Pyramid.prototype.detector=Gobj.detectorBuffer;
            //Patch: Overlord speed up
            Game.commandTimeout(function() {
                Upgrade.EvolvePneumatizedCarapace.effect(1);
                Upgrade.IncreaseCarrierCapacity.effect(1);
            },0);
            //Patch: Larva can move
            Zerg.Larva.prototype.moveTo=Unit.prototype.moveTo;
            Zerg.Larva.prototype.moveToward=Unit.prototype.moveToward;
            var Pyramid=new Building.ProtossBuilding.Pyramid({x:1450,y:1480});
            for (var N=0;N<6;N++){
                new Hero.HeroCruiser({x:1470,y:1500});
            }
            //Override win and lose condition
            Referee.winCondition=function(){
                return false;
            };
            Referee.loseCondition=function(){
                return Pyramid.status=='dead';//Closure
            };
            //Enemy coming
            var offsets=[{x:1536,y:36},{x:1536,y:3036},{x:36,y:1536},{x:3036,y:1536},
                {x:486,y:486},{x:486,y:2586},{x:2586,y:486},{x:2586,y:2586}];
            var num=0, wave=1;
            var interval=20000;//20 seconds per wave
            _$.traverse([Neutral,Zerg,Terran,Protoss],function(enemyType){
                Game.commandTimeout(function(){
                    offsets.forEach(function(offset){
                        offset.team=1;
                        new enemyType(offset).attackGround({x:1536,y:1536});
                    });
                    Game.showWarning('Wave '+ wave++ +': '+enemyType.prototype.name);
                },interval*num++);
            });
            //Game win when time reach
            Game.commandTimeout(function(){
                Game.win();
            },interval*num+interval);
        }
    },
    {
        level:10,
        label:'HUNTERxHUNTER',
        /*Once upon a time there was a young hunter lost in strange jungle, and was warmly welcome by forest friends.
        # About 200 units in the map, designed for stress test
        # You have 6 random kinds of magic, and will refresh when you killed each 50 units
        # You can use magic freely without MP consumption
        # Kill 10 units will upgrade, enemies will upgrade every 1 minute
        # Infinite enemy number and unlimited upgrade level
        # Two different modes: easy and nightmare*/
        load:function(){
            /*var isNightmare=confirm('Want challenge nightmare mode?');
            if (!isNightmare){
                //Make it easy
                Hero.DevilHunter.prototype.HP=9999;
                Hero.DevilHunter.prototype.SP=9999;
                Hero.DevilHunter.prototype.MP=999;
                Hero.DevilHunter.prototype.damage=50;
                Hero.DevilHunter.prototype.isInvisible=true;
            }*/
            var isNightmare=true;
            //Load map
            Map.setCurrentMap('Grass');
            var mapSize=Map.getCurrentMap();
            Map.offsetX=(mapSize.width-Game.HBOUND)/2>>0;
            Map.offsetY=(mapSize.height-Game.VBOUND)/2>>0;
            //Apply race style
            Game.race.choose('Zerg');
            //Single player
            Multiplayer.ON=false;
            //Show me the money
            Game.commandTimeout(function(){
                Resource[0].mine=Resource[0].gas=9999;
            },0);
            //Fulfill nuclear bombs
            Magic.NuclearStrike.enabled=999;
            //Change kill to EXP:
            $('p.kill').html('<b style="color:red">EXP:</b><span></span>');
            //Magic infinite
            Cheat.execute('the gathering');
            //Patch: Overlord speed up
            Game.commandTimeout(function(){
                Upgrade.EvolvePneumatizedCarapace.effect(1);
                Upgrade.IncreaseCarrierCapacity.effect(1);
            },0);
            //Override win and lose condition
            Referee.winCondition=function(){
                //Infinite enemies
                if (Unit.allUnits.length<150) {
                    Game.showWarning('Refreshing...');
                    Levels.enemyWave();
                    Levels.refreshMagic();
                }
                //Upgrade your hunter
                var curLevel=Levels.DevilHunter.kill/10>>0;
                if (curLevel>Levels.DevilHunter.level){
                    for (var N=0;N<curLevel-Levels.DevilHunter.level;N++){
                        //Upgraded
                        if (isNightmare){
                            Hero.DevilHunter.prototype.HP[0]+=100;
                            Hero.DevilHunter.prototype.SP[0]+=100;
                            Hero.DevilHunter.prototype.MP[0]+=10;
                        }
                        Cheat.execute("something for nothing");
                        Cheat.execute("full recovery");
                        Levels.DevilHunter.level=curLevel;
                        Game.refreshInfo();
                        Referee.voice('upgrade')[Game.race.selected].play();
                        Game.showMessage('Upgrade complete');
                    }
                }
                return false;
            };
            //Random magics for hunter
            Levels.refreshMagic=function(){
                var magics=["Parasite","SpawnBroodlings","Ensnare","DarkSwarm","Plague","StimPacks","Lockdown","NuclearStrike",
                    "Restoration","OpticalFlare","DefensiveMatrix","EMPShockwave","Irradiate","Yamato","ScannerSweep","PsionicStorm",
                    "Hallucination","Feedback","MindControl","MaelStorm","Recall","StasisField","DisruptionWeb","RechargeShields"];
                var items={};
                for (var N=4;N<=9;N++){
                    //Doesn't affect replay here
                    var index=Math.random()*magics.length>>0;
                    items[N]={name:magics[index]};
                    magics.splice(index,1);
                }
                Hero.DevilHunter.prototype.items=items;
                Button.refreshButtons();
            };
            Levels.refreshMagic();
            //Add units on map
            Levels.DevilHunter=new Hero.DevilHunter({x:mapSize.width/2,y:mapSize.height/2});
            Levels.DevilHunter.level=0;
            Game.commandTimeout(function(){
                Game.changeSelectedTo(Levels.DevilHunter);
            },0);
            //Enemy coming
            Levels.enemyWave=function(){
                var pos={team:1};
                _$.traverse([Neutral,Zerg,Terran,Protoss],function(enemyType){
                    pos.x=(Game.getNextRandom()*mapSize.width)>>0;
                    pos.y=(Game.getNextRandom()*mapSize.height)>>0;
                    var enemy=new enemyType(pos);
                    if (enemy.attack){
                        enemy.attackLimit=null;
                    }
                });
            };
            for(var N=0;N<4;N++){
                Levels.enemyWave();
            }
            //Enemies will becomes stronger and stronger
            Game.commandInterval(function(){
                Game.showWarning('Enemies become stronger!');
                //Upgrade all grades for enemy
                for (var grade in Upgrade){
                    Upgrade[grade].effect(1);
                }
            },isNightmare?90000:60000);
            //Baby hunter will talk every 30s
            var speech=[
                "What the hell is going on? Where am I?",
                "This world is weird! There must be some mistake!",
                "Hey, gloomyson, you sent me to the wrong game!",
                "I'm so scared! I want my mummy!",
                "Let me out! I wanna go home! Plz!",
                "You dare fool me? I'm blind not deaf!",
                "Do you know who I am? My papa is GinBliz!",
                "Let me out of here! Or I'll tell papa to sue you!",
                "At least let me pass hunter exam and get license first!",
                "Nen power, release!",
                "Help me, Killua, Kurapika!",
                "(T_T) cry~~~"
            ];
            for (var N=0;N<speech.length;N++){
                (function(n){
                    Game.commandTimeout(function(){
                        Game.showMessage('HunterBoy: '+speech[n],5000);
                    },n*30000+10000);
                })(N);
            }
        }
    },
    {
        level:11,
        label:'TowerDefense',
        load:function(){
            //Load map
            Map.setCurrentMap('TowerDefense');
            Map.offsetX=4096-Game.HBOUND;
            Map.offsetY=3072-Game.VBOUND;
            Map.fogFlag=false;
            //Apply race style
            Game.race.choose('Terran');
            //Single player
            Multiplayer.ON=false;
            //Patch
            Game.commandTimeout(function(){
                Upgrade.EvolvePneumatizedCarapace.effect(1);
            },0);
            Building.prototype.sight=1000;
            Map.drawMud=function(){};
            Zerg.Lurker.prototype.reactionWhenAttackedBy=Unit.prototype.reactionWhenAttackedBy;
            Zerg.Larva.prototype.moveTo=Unit.prototype.moveTo;
            Zerg.Larva.prototype.moveToward=Unit.prototype.moveToward;
            //Missile fixed duration, original behavior
            Bullets.Spore.prototype.duration=500;
            delete Bullets.Spore.prototype.speedVal;
            Bullets.SingleMissile.prototype.duration=600;
            delete Bullets.SingleMissile.prototype.speedVal;
            Bullets.DragoonBall.prototype.duration=800;
            delete Bullets.DragoonBall.prototype.speedVal;
            //Upgrade utility
            Building.ProtossBuilding.TeleportPoint.prototype.items={
                '1':{name:'UpgradeSunkenDamage'},
                '2':{name:'EnlargeSunkenArea'},
                '3':{name:'UpgradeSporeDamage'},
                '4':{name:'EnlargeSporeChain'},
                '5':{name:'UpgradeMissileDamage'},
                '6':{name:'IncreaseMissileCount'},
                '7':{name:'UpgradePhotonCannonDamage'},
                '8':{name:'IncreasePhotonCannonCount'},
                '9':{name:'CleanScreen'}
            };
            //#######Transform defensing tower#######
            //Circle attack: 1 VS N
            Building.ZergBuilding.SunkenColony.prototype.AOE={
                type:"CIRCLE",
                hasEffect:true,
                radius:50
            };
            Building.ZergBuilding.SunkenColony.prototype.upgrade=['UpgradeSunkenDamage','EnlargeSunkenArea'];
            Building.ZergBuilding.SporeColony.prototype.upgrade=['UpgradeSporeDamage','EnlargeSporeChain'];
            Building.TerranBuilding.MissileTurret.prototype.upgrade=['UpgradeMissileDamage','IncreaseMissileCount'];
            Building.ProtossBuilding.PhotonCannon.prototype.upgrade=['UpgradePhotonCannonDamage','IncreasePhotonCannonCount'];
            //Chain attack: 1 VS 1+1+1
            Bullets.Spore.prototype.fire=function(){
                this.life=this.traceTimes;
                Bullets.prototype.fire.apply(this,arguments);
            };
            Bullets.Spore.prototype.die=Bullets.Darts.prototype.die;
            Bullets.Spore.prototype.traceTimes=1;
            Bullets.Spore.prototype.traceRadius=100;
            Bullets.Spore.prototype.noDamage=true;
            //Multiple bullets attack: N VS N
            Building.TerranBuilding.MissileTurret.prototype.AOE={
                type:"MULTIPLE",
                hasEffect:false,
                radius:150,
                count:1
            };
            //Multiple times attack: N VS 1
            Building.ProtossBuilding.PhotonCannon.prototype.continuousAttack={
                count:1,
                layout:function(bullet,num){
                    //Reassign location
                    if (Math.abs(bullet.speed.x)>Math.abs(bullet.speed.y)){
                        if (bullet.speed.x>0) {
                            bullet.x+=(20*num);
                            bullet.y+=(20*num*bullet.speed.y/bullet.speed.x)>>0;
                        }
                        else {
                            bullet.x-=(20*num);
                            bullet.y-=(20*num*bullet.speed.y/bullet.speed.x)>>0;
                        }
                    }
                    else {
                        if (bullet.speed.y>0) {
                            bullet.y+=(20*num);
                            bullet.x+=(20*num*bullet.speed.x/bullet.speed.y)>>0;
                        }
                        else {
                            bullet.y-=(20*num);
                            bullet.x-=(20*num*bullet.speed.x/bullet.speed.y)>>0;
                        }
                    }
                }
            };
            //Add our buildings
            Building.ZergBuilding.SunkenColony.prototype.attackLimit=null;
            Building.ZergBuilding.SunkenColony.prototype.attackRange=700;
            Building.ZergBuilding.SunkenColony.prototype.HP=9999;
            new Building.ZergBuilding.SunkenColony({x:2524,y:452});
            new Building.ZergBuilding.SunkenColony({x:60,y:1500});
            new Building.ZergBuilding.SunkenColony({x:2438,y:2320});
            Building.ZergBuilding.SporeColony.prototype.attackLimit=null;
            Building.ZergBuilding.SporeColony.prototype.attackRange=700;
            Building.ZergBuilding.SporeColony.prototype.HP=9999;
            new Building.ZergBuilding.SporeColony({x:3980,y:1500});
            new Building.ZergBuilding.SporeColony({x:1476,y:452});
            new Building.ZergBuilding.SporeColony({x:1240,y:2956});
            Building.TerranBuilding.MissileTurret.prototype.attackLimit=null;
            Building.TerranBuilding.MissileTurret.prototype.attackRange=700;
            Building.TerranBuilding.MissileTurret.prototype.HP=9999;
            new Building.TerranBuilding.MissileTurret({x:3228,y:2632});
            new Building.TerranBuilding.MissileTurret({x:2000,y:80});
            new Building.TerranBuilding.MissileTurret({x:784,y:2320});
            Building.ProtossBuilding.PhotonCannon.prototype.attackLimit=null;
            Building.ProtossBuilding.PhotonCannon.prototype.attackRange=700;
            Building.ProtossBuilding.PhotonCannon.prototype.SP=9999;
            new Building.ProtossBuilding.PhotonCannon({x:3228,y:1054});
            new Building.ProtossBuilding.PhotonCannon({x:784,y:1054});
            new Building.ProtossBuilding.PhotonCannon({x:1684,y:2320});
            Building.ProtossBuilding.TeleportPoint.prototype.SP=9999;
            new Building.ProtossBuilding.TeleportPoint({x:2060,y:1586});
            //Add our unit
            new Hero.Tassadar({x:3200,y:3072-Game.VBOUND/2}).magic=999;
            //Override win and lose condition
            var killCount=0;//Closure
            Referee.winCondition=function(){
                var kills=0;
                Building.ourBuildings().forEach(function(build){
                    if (build.kill) kills+=build.kill;
                });
                if (kills>killCount){
                    Resource[0].mine+=(kills-killCount);
                    killCount=kills;
                }
                return (wave>num && Unit.allEnemyUnits().length==0);
            };
            var LIFE=20;
            Referee.loseCondition=function(){
                //Closure LIFE
                Unit.allEnemyUnits().forEach(function(chara){
                    if (chara.inside({centerX:2048,centerY:1536,radius:200})){
                        LIFE--;
                        Game.showMessage('Remaining life: '+LIFE);
                        chara.die();
                    }
                });
                return (LIFE<=0);
            };
            //Enemy coming
            var num=0, wave=1;
            var interval=30000;//30 seconds per wave
            _$.traverse([Neutral,Zerg,Terran,Protoss],function(enemyType){
                Game.commandTimeout(function(){
                    for (var N=0;N<15;N++){
                        (function(n){
                            Game.commandTimeout(function(){
                                var enemy=new enemyType({x:3622,y:2916,team:1});
                                //Focus on routing
                                if (enemy.attack) enemy.attack=function(){
                                    this.targetLock=true;
                                };
                                //Enemies route
                                Game.commandTimeout(function(){
                                    enemy.targetLock=true;
                                    enemy.destination={x:3622,y:280};
                                    enemy.destination.next={x:422,y:280};
                                    enemy.destination.next.next={x:422,y:2800};
                                    enemy.destination.next.next.next={x:2100,y:2800};
                                    enemy.destination.next.next.next.next={x:2100,y:1500};
                                },0);
                            },n*1000);
                        })(N);
                    }
                    Game.showWarning('Wave '+ wave++ +': '+enemyType.prototype.name);
                },interval*num++);
            });
            //Game win when time reach
            Game.commandTimeout(function(){
                Game.win();
            },interval*num+60000);
        }
    },
    {
        level:12,
        label:'Replay',
        load:function(){
            //Load replay
            var lastReplay=localStorage.getItem('lastReplay');
            if (lastReplay!=null){
                Game.replayFlag=true;
                //Map.fogFlag=false;
                // Should not click buttons or trigger key control during replay
                Button.equipButtonsFor=function(){};
                //Equip with replay buttons
                Button.equipButtonsForReplay();
                //Parse last replay data
                lastReplay=JSON.parse(lastReplay);
                //Select same team
                if (lastReplay.hasOwnProperty('team')) Game.team=lastReplay.team;
                Levels[lastReplay.level-1].load();
                Game.replayLevel=lastReplay.level;
                //Parse user moves
                var recordCmds=lastReplay.cmds;
                for (var tick in recordCmds){
                    Multiplayer.parseTickCmd({tick:parseInt(tick),cmds:recordCmds[tick]});
                }
                //Replay ends
                Game.endTick=lastReplay.end;
                Game.commandTimeout(function(){
                    Game.stopAnimation();
                    $('div.panel_Control button').attr('disabled',true);
                    Game.showMessage('Replay ended...',10000);
                },100*Game.endTick);
            }
            else {
                alert('Cannot find any replay!');
                //Error occurs
                delete Game.level;
                return true;
            }
        }
    }
];

/***/ }),
/* 21 */
/***/ (function(module, exports) {

var Multiplayer={
    ON:false,//by default
    webSocket:null,
    cmds:[],
    snapshotFlag:false,
    replaySnapshotFlag:true,
    getSocket:function(){
        if (window.WebSocket) {
            //ServerList: (1)HongKong:nvhae.com (3)Canada:104.128.82.12
            var webSocket=Multiplayer.webSocket=new WebSocket('ws://nvhae.com:28082');
            webSocket.onerror=function(){
                //Offline flag for Store&Forward
                Game.offline=true;
            };
            return webSocket;
        }
        else return null;
    },
    sendUserInfo:function(){
        var webSocket=Multiplayer.getSocket();
        if (webSocket) {
            webSocket.onopen=function(){
                webSocket.send(JSON.stringify({type:'login',level:Game.level,team:Game.team,version:navigator.userAgent,
                    platform:navigator.platform,language:navigator.language,size:{x:innerWidth,y:innerHeight}}));
                Multiplayer.statistic={left:0,right:0};
                //Test parse info
                var url = 'http://chaxun.1616.net/s.php?type=ip&output=json&callback=?&_='+Math.random();
                $.getJSON(url, function(data){
                    webSocket.send(JSON.stringify({
                        type:'log',log:"Isp("+data.Isp+"), Browser("+data.Browser+"), OS("+data.OS+")"}));
                });
                //Test snapshot
                if (Multiplayer.snapshotFlag){
                    var N=1;
                    setInterval(function(){
                        webSocket.send(JSON.stringify({
                            type:'snapshot',
                            units:Unit.allUnits.sort(function(u1,u2){
                                if (u1.team==u2.team) return u1.name.localeCompare(u2.name);
                                else return u1.team-u2.team;
                            }).map(function(chara){
                                var result=(chara.name+' HP'+chara.life+' T'+chara.team+' ['+(chara.x>>0)+','+(chara.y>>0)+']');
                                if (chara.magic!=null) result+=' M'+chara.magic;
                                return result;
                            }),
                            buildings:Building.allBuildings.sort(function(b1,b2){
                                if (b1.team==b2.team) return b1.name.localeCompare(b2.name);
                                else return b1.team-b2.team;
                            }).map(function(chara){
                                return chara.name+' HP'+chara.life+' T'+chara.team+' ['+(chara.x>>0)+','+(chara.y>>0)+']';
                            }),
                            click:{left:Multiplayer.statistic.left,right:Multiplayer.statistic.right},
                            count:{ourUnits:Unit.allOurUnits().length,enemyUnits:Unit.allEnemyUnits().length,
                                ourBuildings:Building.ourBuildings().length,enemyBuildings:Building.enemyBuildings().length},
                            num:N
                        }));
                        //Reset click statistic
                        Multiplayer.statistic={left:0,right:0};
                        N++;
                    },60000);
                }
                //Test replay record every 10 seconds
                if (Multiplayer.replaySnapshotFlag) {
                    setInterval(function(){
                        webSocket.send(JSON.stringify({
                            type:'replaySnapshot',
                            replaySnapshot:{
                                team:Game.team,
                                level:Game.level,
                                cmds:Game.replay,
                                end:Game.mainTick
                            }
                        }));
                    },10000);
                }
            };
        }
    },
    enable:function(){
        var webSocket=Multiplayer.getSocket();
        if (webSocket) {
            webSocket.onopen=function(){
                Game.showMessage("Already connected to server!");
            };
            webSocket.onclose=function(){
                Game.showMessage("You've disconnected from server!");
            };
            webSocket.onerror=function(){
                Game.showMessage("Cannot connect to server...");
            };
            webSocket.onmessage=function(message){
                var msgObj=JSON.parse(message.data);
                switch(msgObj.type){
                    case "ping":
                        Multiplayer.webSocket.send(JSON.stringify({type:'pong'}));
                        console.log('Receive ping');
                        break;
                    case "notice":
                        Game.showMessage(msgObj.msg);
                        break;
                    case "start":
                        //Choose team
                        Game.team=msgObj.team;
                        //Bind controller
                        mouseController.toControlAll();//Can control all units
                        keyController.start();//Start monitor
                        Game.animation();
                        break;
                    case "replay":
                        Game.saveReplay(msgObj.replay);
                        break;
                    case "tick":
                        Game.serverTick=msgObj.tick;
                        Multiplayer.parseTickCmd(msgObj);
                        break;
                }
            };
            Multiplayer.ON=true;
        }
        else {
            Game.showMessage("Your browser doesn't support WebSocket...");
        }
    },
    parseTickCmd:function(msgObj){
        if (msgObj.cmds){
            if (!Game.commands[msgObj.tick]) Game.commands[msgObj.tick]=[];
            msgObj.cmds.forEach(function(cmdStr){
                var cmd=JSON.parse(cmdStr);
                switch (cmd.type){
                    case 'rightClick':
                        Game.commands[msgObj.tick].push(function(){
                            //Closures
                            var uids=cmd.uids;
                            var pos=cmd.pos;
                            var unlock=cmd.unlock;
                            var btn=cmd.btn;
                            return function(){
                                var charas=Multiplayer.getUnitsByUIDs(uids);
                                mouseController.rightClickHandler(charas,pos,unlock,btn);
                            };
                        }());
                        break;
                    case 'stop':
                        Game.commands[msgObj.tick].push(function(){
                            //Closures
                            var uids=cmd.uids;
                            return function(){
                                var charas=Multiplayer.getUnitsByUIDs(uids);
                                Button.stopHandler(charas);
                            };
                        }());
                        break;
                    case 'hold':
                        Game.commands[msgObj.tick].push(function(){
                            //Closures
                            var uids=cmd.uids;
                            return function(){
                                var charas=Multiplayer.getUnitsByUIDs(uids);
                                Button.holdHandler(charas);
                            };
                        }());
                        break;
                    case 'magic':
                        //Scarab and Interceptor
                        if (cmd.duration){
                            Game.commands[msgObj.tick].push(function(){
                                //Closures
                                var uids=cmd.uids;
                                var name=cmd.name;
                                var duration=cmd.duration;
                                return function(){
                                    var owner=Multiplayer.getUnitsByUIDs(uids)[0];
                                    if (owner && Resource.paypal.call(owner,Resource.getCost(name))){
                                        //Cheat: Operation cwal
                                        if (Cheat.cwal) duration=0;
                                        Game.commandTimeout(function(){
                                            Magic[name].spell.call(owner);
                                            delete owner.processing;
                                        },duration*100);
                                        //Occupy flag
                                        owner.processing={
                                            name:name,
                                            startTime:Game.mainTick,
                                            time:duration
                                        };
                                    }
                                };
                            }());
                        }
                        //Normal magic
                        else {
                            Game.commands[msgObj.tick].push(function(){
                                //Closures
                                var uids=cmd.uids;
                                var name=cmd.name;
                                var pos=cmd.pos;
                                var creditBill=cmd.creditBill;
                                return function(){
                                    var owner=Multiplayer.getUnitsByUIDs(uids)[0];
                                    if (owner){
                                        //Need callback with location
                                        if (pos) {
                                            //Spell magic with location in multiplayer mode
                                            if (creditBill) owner.creditBill=creditBill;
                                            Magic[name].spell.call(owner,pos);
                                        }
                                        //Execute magic immediately
                                        else {
                                            if (Resource.paypal.call(owner,Resource.getCost(name))){
                                                Magic[name].spell.call(owner);
                                            }
                                        }
                                    }
                                };
                            }());
                        }
                        break;
                    case 'upgrade':
                        if (cmd.duration){
                            Game.commands[msgObj.tick].push(function(){
                                //Closures
                                var uids=cmd.uids;
                                var name=cmd.name;
                                var duration=cmd.duration;
                                var team=cmd.team;
                                return function(){
                                    var owner=Multiplayer.getUnitsByUIDs(uids)[0];
                                    //Still owner alive and can afford payment
                                    if (owner && Resource.paypal.call(owner,Resource.getCost(name))){
                                        //Cheat: Operation cwal
                                        if (Cheat.cwal) duration=0;
                                        Game.commandTimeout(function(){
                                            Upgrade[name].effect(team);
                                            delete owner.processing;
                                            if (team==Game.team){
                                                Referee.voice('upgrade')[Game.race.selected].play();
                                                Game.refreshInfo();
                                                Game.showMessage('Upgrade complete');
                                            }
                                        },duration*100);
                                        //Occupy flag
                                        owner.processing={
                                            name:name,
                                            startTime:Game.mainTick,
                                            time:duration
                                        };
                                    }
                                };
                            }());
                        }
                        else {
                            Game.commands[msgObj.tick].push(function(){
                                //Closures
                                var team=cmd.team;
                                var name=cmd.name;
                                return function(){
                                    //Will effect immediately
                                    Upgrade[name].effect(team);
                                };
                            }());
                        }
                        break;
                    case 'unit':
                        if (cmd.evolve){
                            Game.commands[msgObj.tick].push(function(){
                                //Closures
                                var uids=cmd.uids;
                                var unitType=cmd.name;
                                var duration=cmd.duration;
                                switch (cmd.evolve){
                                    case 'archon':
                                        return function(){
                                            var chara=Multiplayer.getUnitsByUIDs(uids)[0];
                                            if (chara && Resource.paypal.call(chara,Resource.getCost(unitType))){
                                                //Evolve as Archon or DarkArchon
                                                var evolve=chara.evolveTo({type:Building.ProtossBuilding[unitType+'Evolve']});
                                                Game.commandTimeout(function(){
                                                    if (evolve.status!='dead'){
                                                        evolve.evolveTo({type:Protoss[unitType],burstArr:[unitType+'Birth']});
                                                    }
                                                },duration*100);
                                                //Processing flag
                                                evolve.processing={
                                                    name:unitType,
                                                    startTime:Game.mainTick,
                                                    time:duration
                                                };
                                            }
                                        };
                                    case 'zerg':
                                        var exceptions=['Guardian','Devourer'];//Closure
                                        return function(){
                                            var chara=Multiplayer.getUnitsByUIDs(uids)[0];
                                            if (chara && Resource.paypal.call(chara,Resource.getCost(unitType))){
                                                //Evolve as egg
                                                var egg;
                                                //Clossure: which base larvas belong to
                                                var base=chara.owner;
                                                //Evolve as cocoon
                                                if (exceptions.indexOf(unitType)!=-1){
                                                    egg=chara.evolveTo({type:Building.ZergBuilding.Cocoon});
                                                }
                                                else {
                                                    egg=chara.evolveTo({type:Building.ZergBuilding.Egg});
                                                    if (unitType=='Lurker') egg.action=18;
                                                }
                                                //Cheat: Operation cwal
                                                if (Cheat.cwal) duration=0;
                                                Game.commandTimeout(function(){
                                                    if (egg.status!='dead'){
                                                        //Evolve
                                                        if (exceptions.indexOf(unitType)!=-1){
                                                            //Cocoon
                                                            egg.evolveTo({type:Zerg[unitType],burstArr:[unitType+'Birth']});
                                                        }
                                                        else {
                                                            //Egg
                                                            egg.evolveTo({type:Zerg[unitType],burstArr:['EggBirth',unitType+'Birth'],rallyPoint:base?base.rallyPoint:null});
                                                        }
                                                    }
                                                },duration*100);
                                                //Processing flag on egg
                                                egg.processing={
                                                    name:unitType,
                                                    startTime:Game.mainTick,//new Date().getTime()
                                                    time:duration
                                                };
                                            }
                                        };
                                }
                            }());
                        }
                        else Game.commands[msgObj.tick].push(function(){
                            //Closures
                            var uids=cmd.uids;
                            var unitType=cmd.name;
                            var duration=cmd.duration;
                            //Find unit name from which race
                            var Race;
                            [Zerg,Terran,Protoss,Hero].forEach(function(race){
                                if (race[unitType]!=null) Race=race;
                            });
                            return function(){
                                var owner=Multiplayer.getUnitsByUIDs(uids)[0];
                                if (owner && Resource.paypal.call(owner,Resource.getCost(unitType))){
                                    //Cheat: Operation cwal
                                    if (Cheat.cwal) duration=0;
                                    Game.commandTimeout(function(){
                                        var trainedUnit;
                                        if (Race[unitType].prototype.isFlying)
                                            trainedUnit=new Race[unitType]({x:owner.x,y:owner.y,team:owner.team});
                                        else
                                            trainedUnit=new Race[unitType]({x:owner.x,y:owner.y+owner.height,team:owner.team});
                                        delete owner.processing;
                                        if (owner.rallyPoint) trainedUnit.destination=owner.rallyPoint;
                                    },duration*100);
                                    //Occupy flag
                                    owner.processing={
                                        name:unitType,
                                        startTime:Game.mainTick,
                                        time:duration
                                    };
                                }
                            };
                        }());
                        break;
                    case 'build':
                        Game.commands[msgObj.tick].push(function(){
                            //Closures
                            var uids=cmd.uids;
                            var buildName=cmd.name;
                            var BuildType=cmd.buildType;
                            var pos=cmd.pos;
                            return function(){
                                var farmer=Multiplayer.getUnitsByUIDs(uids)[0];
                                if (farmer && Resource.paypal.call(farmer,Resource.getCost(buildName))){
                                    //Destination building name
                                    farmer.buildName=buildName;
                                    //Farmer build with location
                                    if (pos) farmer['build'+BuildType](pos);
                                    //Evolve to another building
                                    else farmer['build'+BuildType]();
                                }
                            };
                        }());
                        break;
                }
            });
        }
    },
    getUIDs:function(charas){
        return charas.map(function(chara){
            return chara.id;
        });
    },
    getUnitsByUIDs:function(uids){
        return Unit.allUnits.concat(Building.allBuildings).filter(function(chara){
            //Need filter out dead units to execute commands
            return uids.indexOf(chara.id)!=-1 && chara.status!='dead';
        });
    }
};

/***/ }),
/* 22 */
/***/ (function(module, exports) {

var Referee={
    ourDetectedUnits:[],//Detected enemies
    enemyDetectedUnits:[],//Detected ours
    _pos:[[-1,0],[1,0],[0,-1],[0,1]],//Collision avoid
    tasks:['judgeArbiter','judgeDetect','judgeCollision','judgeRecover','judgeDying','judgeMan',
        'addLarva','coverFog','alterSelectionMode','judgeBuildingInjury','judgeWinLose','saveReplaySnapshot'],
    voice:(function(){
        var voice;
        return function(name){
            //Single instance pattern
            if (!voice) voice={
                pError:new Audio(Game.CDN+'bgm/PointError.wav'),
                button:new Audio(Game.CDN+'bgm/Button.wav'),
                resource:{
                    Zerg:{
                        mine:new Audio(Game.CDN+'bgm/mine.Zerg.wav'),
                        gas:new Audio(Game.CDN+'bgm/gas.Zerg.wav'),
                        man:new Audio(Game.CDN+'bgm/man.Zerg.wav'),
                        magic:new Audio(Game.CDN+'bgm/magic.Zerg.wav')
                    },
                    Terran:{
                        mine:new Audio(Game.CDN+'bgm/mine.Terran.wav'),
                        gas:new Audio(Game.CDN+'bgm/gas.Terran.wav'),
                        man:new Audio(Game.CDN+'bgm/man.Terran.wav'),
                        magic:new Audio(Game.CDN+'bgm/magic.Terran.wav')
                    },
                    Protoss:{
                        mine:new Audio(Game.CDN+'bgm/mine.Protoss.wav'),
                        gas:new Audio(Game.CDN+'bgm/gas.Protoss.wav'),
                        man:new Audio(Game.CDN+'bgm/man.Protoss.wav'),
                        magic:new Audio(Game.CDN+'bgm/magic.Protoss.wav')
                    }
                },
                upgrade:{
                    Zerg:new Audio(Game.CDN+'bgm/upgrade.Zerg.wav'),
                    Terran:new Audio(Game.CDN+'bgm/upgrade.Terran.wav'),
                    Protoss:new Audio(Game.CDN+'bgm/upgrade.Protoss.wav')
                }
            };
            return voice[name];
        }
    })(),
    winCondition:function(){
        //By default: All our units and buildings are killed
        return (Unit.allEnemyUnits().length==0 && Building.enemyBuildings().length==0);
    },
    loseCondition:function(){
        //By default: All enemies and buildings are killed
        return (Unit.allOurUnits().length==0 && Building.ourBuildings().length==0);
    },
    judgeArbiter:function(){
        //Every 0.4 sec
        if (Game.mainTick%4==0){
            //Special skill: make nearby units invisible
            var arbiterBuffer=Protoss.Arbiter.prototype.bufferObj;
            var allArbiters=Game.getPropArray([]);
            Unit.allUnits.forEach(function(chara){
                if (chara.name=='Arbiter') allArbiters[chara.team].push(chara);
            });
            //Clear old units' Arbiter buffer
            Referee.underArbiterUnits.forEach(function(charas){
                charas.forEach(function(chara){
                    chara.removeBuffer(arbiterBuffer);
                });
            });
            Referee.underArbiterUnits=Game.getPropArray([]);
            allArbiters.forEach(function(arbiters,N){
                //Find new under arbiter units
                arbiters.forEach(function(arbiter){
                    //Find targets: same team units inside Arbiter sight, exclude Arbiter
                    var targets=Game.getInRangeOnes(arbiter.posX(),arbiter.posY(),arbiter.get('sight'),N,true,null,function(chara){
                        return arbiters.indexOf(chara)==-1;
                    });
                    Referee.underArbiterUnits[N]=Referee.underArbiterUnits[N].concat(targets);
                });
                $.unique(Referee.underArbiterUnits[N]);
            });
            //Arbiter buffer effect on these units
            Referee.underArbiterUnits.forEach(function(charas){
                charas.forEach(function(chara){
                    chara.addBuffer(arbiterBuffer);
                });
            });
        }
    },
    //detectorBuffer are reverse of arbiterBuffer
    judgeDetect:function(){
        //Every 0.4 sec
        if (Game.mainTick%4==0){
            //Same detector buffer reference
            var detectorBuffer=Gobj.detectorBuffer;
            var allDetectors=Game.getPropArray([]);
            Unit.allUnits.forEach(function(chara){
                if (chara.detector) allDetectors[chara.team].push(chara);
            });
            //Clear old units detected buffer
            Referee.detectedUnits.forEach(function(charas,team){
                //For each team
                charas.forEach(function(chara){
                    chara.removeBuffer(detectorBuffer[team]);
                });
            });
            Referee.detectedUnits=Game.getPropArray([]);
            allDetectors.forEach(function(detectors,N){
                //Find new under detector units
                detectors.forEach(function(detector){
                    //Find targets: enemy invisible units inside detector sight
                    var targets=Game.getInRangeOnes(detector.posX(),detector.posY(),detector.get('sight'),N+'',true,null,function(chara){
                        return chara['isInvisible'+Game.team];
                    });
                    Referee.detectedUnits[N]=Referee.detectedUnits[N].concat(targets);
                });
                $.unique(Referee.detectedUnits[N]);
            });
            //Detector buffer effect on these units
            Referee.detectedUnits.forEach(function(charas,team){
                //For each team
                charas.forEach(function(chara){
                    chara.addBuffer(detectorBuffer[team]);
                });
            });
            //PurpleEffect, RedEffect and GreenEffect are also detector, override invisible
            Animation.allEffects.filter(function(effect){
                return (effect instanceof Animation.PurpleEffect) ||
                    (effect instanceof Animation.RedEffect) ||
                    (effect instanceof Animation.GreenEffect)
            }).forEach(function(effect){
                var target=effect.target;
                for (var team=0;team<Game.playerNum;team++){
                    //Make already invisible units to visible by all teams
                    if (target['isInvisible'+team]) target['isInvisible'+team]=false;
                }
            });
        }
    },
    judgeReachDestination:function(chara){
        //Idle but has destination
        if (chara.destination && chara.isIdle()) {
            //Already here
            if (chara.insideSquare({centerX:chara.destination.x,centerY:chara.destination.y,radius:Unit.moveRange})) {
                //Has next destination
                if (chara.destination.next) {
                    chara.destination=chara.destination.next;
                    chara.moveTo(chara.destination.x,chara.destination.y);
                    chara.targetLock=false;
                }
                //No more destination
                else {
                    delete chara.destination;
                }
            }
            //Continue moving
            else {
                chara.moveTo(chara.destination.x,chara.destination.y);
                chara.targetLock=false;
            }
        }
    },
    judgeRecover:function(){
        //Every 1 sec
        if (Game.mainTick%10==0){
            Unit.allUnits.concat(Building.allBuildings).forEach(function(chara){
                if (chara.recover) chara.recover();
            });
        }
    },
    judgeDying:function(){
        //Kill die survivor every 1 sec
        if (Game.mainTick%10==0){
            Unit.allUnits.concat(Building.allBuildings).filter(function(chara){
                return chara.life<=0 && chara.status!='dead';
            }).forEach(function(chara){
                chara.die();
            });
        }
    },
    //Avoid collision
    judgeCollision:function(){
        //N*N->N
        var units=Unit.allGroundUnits().concat(Building.allBuildings);
        for(var N=0;N<units.length;N++) {
            var chara1 = units[N];
            for(var M=N+1;M<units.length;M++) {
                var chara2 = units[M];
                var dist=chara1.distanceFrom(chara2);
                //Ground unit collision limit
                var distLimit;
                if (chara2 instanceof Unit){
                    distLimit=(chara1.radius()+chara2.radius())*0.5;
                    if (distLimit<Unit.meleeRange) distLimit=Unit.meleeRange;//Math.max
                }
                //Collision with Building
                else{
                    distLimit=(chara1.radius()+chara2.radius())*0.8;
                }
                //Separate override ones
                if (dist==0) {
                    var colPos=Referee._pos[Game.getNextRandom()*4>>0];
                    if (chara1 instanceof Unit){
                        chara1.x+=colPos[0];
                        chara1.y+=colPos[1];
                        dist=1;
                    }
                    else {
                        if (chara2 instanceof Unit){
                            chara2.x+=colPos[0];
                            chara2.y+=colPos[1];
                            dist=1;
                        }
                    }
                }
                if (dist<distLimit) {
                    //Collision flag
                    chara1.collision=chara2;
                    chara2.collision=chara1;
                    //Adjust ratio
                    var K=(distLimit-dist)/dist/2;
                    var adjustX=K*(chara1.x-chara2.x)>>0;
                    var adjustY=K*(chara1.y-chara2.y)>>0;
                    //Adjust location
                    var interactRatio1=0;
                    var interactRatio2=0;
                    if (chara1 instanceof Building){
                        interactRatio1=0;
                        //Building VS Unit
                        if (chara2 instanceof Unit) interactRatio2=2;
                        //Building VS Building
                        else interactRatio2=0;
                    }
                    else {
                        //Unit VS Unit
                        if (chara2 instanceof Unit) {
                            if (chara1.status=="moving"){
                                //Move VS Move
                                if (chara2.status=="moving"){
                                    interactRatio1=1;
                                    interactRatio2=1;
                                }
                                //Move VS Dock
                                else {
                                    interactRatio1=2;
                                    interactRatio2=0;
                                }
                            }
                            else {
                                //Dock VS Move
                                if (chara2.status=="moving"){
                                    interactRatio1=0;
                                    interactRatio2=2;
                                }
                                //Dock VS Dock
                                else {
                                    interactRatio1=1;
                                    interactRatio2=1;
                                }
                            }
                        }
                        //Unit VS Building
                        else {
                            interactRatio1=2;
                            interactRatio2=0;
                        }
                    }
                    chara1.x+=interactRatio1*adjustX;
                    chara1.y+=interactRatio1*adjustY;
                    chara2.x-=interactRatio2*adjustX;
                    chara2.y-=interactRatio2*adjustY;
                }
            }
        }
        units=Unit.allFlyingUnits();
        for(var N=0;N<units.length;N++) {
            var chara1 = units[N];
            for(var M=N+1;M<units.length;M++) {
                var chara2 = units[M];
                var dist=chara1.distanceFrom(chara2);
                //Flying unit collision limit
                var distLimit=Unit.meleeRange;
                //Separate override ones
                if (dist==0) {
                    var colPos=Referee._pos[Game.getNextRandom()*4>>0];
                    chara1.x+=colPos[0];
                    chara1.y+=colPos[1];
                    dist=1;
                }
                if (dist<distLimit) {
                    //Adjust ratio
                    var K=(distLimit-dist)/dist/2;
                    var adjustX=K*(chara1.x-chara2.x)>>0;
                    var adjustY=K*(chara1.y-chara2.y)>>0;
                    //Adjust location
                    chara1.x+=adjustX;
                    chara1.y+=adjustY;
                    chara2.x-=adjustX;
                    chara2.y-=adjustY;
                }
            }
        }
    },
    coverFog:function(){
        //No need to set interval as 1sec
        if (Game.mainTick%10==0) Map.drawFogAndMinimap();
    },
    alterSelectionMode:function(){
        //GC after some user changes
        $.extend([],Game.allSelected).forEach(function(chara){
            if (chara.status=='dead' || (chara['isInvisible'+Game.team] && chara.isEnemy()))
                Game.allSelected.splice(Game.allSelected.indexOf(chara),1);
        });
        //Alter info UI: Multi selection mode
        if (Game.allSelected.length>1){
            //Need minor refresh or big move
            if (_$.arrayEqual(Game.allSelected,Game._oldAllSelected)){
                //Only refresh
                Game.refreshMultiSelectBox();
            }
            else {
                //Redraw multiSelection div
                Game.drawMultiSelectBox();
                //Record this operation
                Game._oldAllSelected=_$.mixin([],Game.allSelected);
            }
            //Show multiSelection box
            $('div.override').show();
            $('div.override div.multiSelection').show();
        }
        //Alter info UI: Single selection mode
        else {
            $('div.override').hide();
            $('div.override div.multiSelection').hide();
        }
    },
    addLarva:function(){
        //Every 20 sec
        if (Game.mainTick%200==0){
            Building.allBuildings.filter(function(build){
                return build.produceLarva;
            }).forEach(function(build){
                //Can give birth to 3 larvas
                for(var N=0;N<3;N++){
                    if (build.larvas[N]==null || build.larvas[N].status=="dead"){
                        build.larvas[N]=new Zerg.Larva({x:(build.x+N*48),y:(build.y+build.height+4),team:build.team});
                        //Which base larva belongs to
                        build.larvas[N].owner=build;
                        break;
                    }
                }
            });
        }
    },
    judgeBuildingInjury:function(){
        //Every 1 sec
        if (Game.mainTick%10==0){
            Building.allBuildings.filter(function(build){
                return build.injuryOffsets;
            }).forEach(function(build){
                var injuryLevel=(1-build.life/build.HP)/0.25>>0;
                if (injuryLevel>3) injuryLevel=3;
                var curLevel=build.injuryAnimations.length;
                if (injuryLevel>curLevel){
                    var offsets=build.injuryOffsets;
                    var scale=build.injuryScale?build.injuryScale:1;
                    for (var N=curLevel;N<injuryLevel;N++){
                        //Add injury animations
                        build.injuryAnimations.push(new Animation[build.injuryNames[N]]({target:build,offset:offsets[N],scale:scale}));
                    }
                    if ((build instanceof Building.TerranBuilding) || (build instanceof Building.ProtossBuilding)){
                        if (injuryLevel>1) build.sound.selected=build.sound.onfire;
                    }
                }
                if (injuryLevel<curLevel){
                    for (var N=curLevel;N>injuryLevel;N--){
                        //Clear injury animations
                        build.injuryAnimations.pop().die();
                    }
                    if ((build instanceof Building.TerranBuilding) || (build instanceof Building.ProtossBuilding)){
                        if (injuryLevel<=1) build.sound.selected=build.sound.normal;
                    }
                }
            });
        }
    },
    judgeMan:function(){
        //Update current man and total man for all teams
        //?We may only need to judge our team's man for client consume use
        var curMan=Game.getPropArray(0),totalMan=Game.getPropArray(0);
        Unit.allUnits.concat(Building.allBuildings).forEach(function(chara){
            if (chara.cost && chara.cost.man) (curMan[chara.team])+=chara.cost.man;
            if (chara.manPlus) (totalMan[chara.team])+=chara.manPlus;
            //Transport
            if (chara.loadedUnits) {
                chara.loadedUnits.forEach(function(passenger){
                    if (passenger.cost && passenger.cost.man) (curMan[passenger.team])+=passenger.cost.man;
                });
            }
        });
        for (var N=0;N<Game.playerNum;N++){
            Resource[N].curMan=curMan[N];
            Resource[N].totalMan=totalMan[N];
        }
    },
    judgeWinLose:function(){
        //Every 1 sec
        if (Game.mainTick%10==0){
            if (Referee.loseCondition())
                Game.lose();
            if (Referee.winCondition())
                Game.win();
        }
    },
    saveReplaySnapshot:function(){
        //Save replay snapshot every 3 sec
        if (Game.mainTick%30==0){
            Game.saveReplay();
        }
    }
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

var Resource={
    init:function(){
        for (var N=0;N<Game.playerNum;N++){
            Resource[N]={
                mine:50,
                gas:0,
                curMan:0,
                totalMan:0
            };
        }
    },
    getCost:function(name,team){
        var cost,count;
        if (!team) team=Game.team;
        [Zerg,Terran,Protoss,Building.ZergBuilding,Building.TerranBuilding,Building.ProtossBuilding,Magic,Upgrade].forEach(function(Type){
            //Not found yet
            if (!cost) {
                for (var item in Type){
                    //Filter out noise
                    if (item=='inherited' || item=='super' || item=='extends') continue;
                    if (item==name){
                        if (typeof(Type[item])=='function'){
                            cost=Type[item].prototype.cost;
                            count=Type[item].prototype.birthCount;
                        }
                        else cost=Type[item].cost;
                        //Resolve array cost
                        if (cost) {
                            //Clone fetched cost object, but sometimes undefined
                            cost=_$.clone(cost);
                            ['mine','gas','man','magic','time'].forEach(function(res){
                                if (cost[res]){
                                    if (cost[res] instanceof Array){
                                        cost[res]=cost[res][Type[item].level[team]];
                                    }
                                    if (count){
                                        cost[res]*=count;
                                    }
                                }
                            });
                        }
                        break;
                    }
                }
            }
        });
        return cost;
    },
    //Check if paid successfully
    paypal:function(cost){
        if (cost){
            var oweFlag=false;
            if (Cheat.gathering) cost.magic=0;
            var team=(this.team!=null)?this.team:Game.team;
            if(cost['mine'] && cost['mine']>Resource[team].mine){
                oweFlag=true;
                Game.showMessage('Not enough minerals...mine more minerals');
                //Advisor voice
                Referee.voice('resource')[Game.race.selected].mine.play();
            }
            if(cost['gas'] && cost['gas']>Resource[team].gas){
                oweFlag=true;
                Game.showMessage('Not enough Vespene gases...harvest more gas');
                //Advisor voice
                Referee.voice('resource')[Game.race.selected].gas.play();
            }
            if(cost['man'] && cost['man']>(Resource[team].totalMan-Resource[team].curMan) && !Cheat.manUnlimited){
                oweFlag=true;
                switch(Game.race.selected){
                    case 'Zerg':
                        Game.showMessage('Too many underlings...create more Overlords');
                        break;
                    case 'Terran':
                        Game.showMessage('Not enough supplies...build more Supply Depots');
                        break;
                    case 'Protoss':
                        Game.showMessage('Not enough psi...build more Pylons');
                        break;
                }
                //Advisor voice
                Referee.voice('resource')[Game.race.selected].man.play();
            }
            if(cost['magic'] && cost['magic']>this.magic){
                oweFlag=true;
                Game.showMessage('Not enough energy');
                //Advisor voice
                Referee.voice('resource')[Game.race.selected].magic.play();
            }
            if (oweFlag){
                //Payment failed
                return false;
            }
            else {
                if (!this.creditBill){
                    //Pay immediately
                    if(cost['mine']){
                        Resource[team].mine-=cost['mine'];
                    }
                    if(cost['gas']){
                        Resource[team].gas-=cost['gas'];
                    }
                    if(cost['magic']){
                        this.magic-=cost['magic'];
                    }
                }
                //Already paid
                return true;
            }
        }
        //No bill
        else return true;
    },
    //Pay credit card bill
    payCreditBill:function(){
        var cost=this.creditBill;
        //Paid credit bill, no longer owe money this time
        delete this.creditBill;
        return Resource.paypal.call(this,cost);
    }
};

/***/ }),
/* 24 */
/***/ (function(module, exports) {

//gFrame namespace: DOM selector function
var _$=function(selector){
    var selectors=selector.trim().split(' ');
    var result=document;//Overall
    for (var N=0;N<selectors.length;N++){
        var curSelector=selectors[N];
        var filter,filterIndex=curSelector.indexOf('[');
        if (filterIndex!=-1) {
            filter=curSelector.substring(filterIndex+1,curSelector.indexOf(']')).trim();
            curSelector=curSelector.substring(0,filterIndex);
        }
        if (curSelector.contains('#')) {
            var id=curSelector.split('#')[1];
            if (result.length) {
                var _result=[];
                for (var M=0;M<result.length;M++){
                    _result.push(result[M].getElementById(id));
                }
                result=_result;
            }
            else result=result.getElementById(id);
        }
        else {
            var TagName=curSelector.contains('.')?curSelector.split('.')[0]:curSelector;
            var className=curSelector.split('.')[1];
            var tagResult, classResult;
            if (TagName){
                if (result.length) {
                    var _result=[];
                    for (var M=0;M<result.length;M++){
                        _result=_result.concat(_$.toArray(result[M].getElementsByTagName(TagName)));
                    }
                    tagResult=_result;
                }
                else tagResult=_$.toArray(result.getElementsByTagName(TagName));
            }
            if (className){
                if (result.length) {
                    var _result=[];
                    for (var M=0;M<result.length;M++){
                        _result=_result.concat(_$.toArray(result[M].getElementsByClassName(className)));
                    }
                    classResult=_result;
                }
                else classResult=_$.toArray(result.getElementsByClassName(className));
            }
            if (TagName && !className) result=tagResult;
            if (!TagName && className) result=classResult;
            if (TagName && className) {
                //The intersection of tagResult and classResult
                result=tagResult.filter(function(item){
                    return (classResult.indexOf(item)!=-1);
                });
            }
        }
        //Apply filter
        if (filter){
            //Attribute value filter
            if (filter.indexOf('=')!=-1){
                var attr=filter.split('=')[0];
                var val=eval(filter.split('=')[1]);
                result=result.filter(function(item){
                    return item.getAttribute(attr)==val;
                });
            }
            //Has attribute filter
            else {
                var attr=filter;
                result=result.filter(function(item){
                    return item.getAttribute(attr)!=null;
                });
            }
        }
    }
    return result;
};

String.prototype.contains=function(str){
    //return this.search(str)!=-1;
    return this.indexOf(str)!=-1;
};

window.requestAnimationFrame=requestAnimationFrame || webkitRequestAnimationFrame ||
    mozRequestAnimationFrame || msRequestAnimationFrame || oRequestAnimationFrame;
/*window.cancelRequestAnimationFrame=cancelRequestAnimationFrame || webkitCancelRequestAnimationFrame ||
    mozCancelRequestAnimationFrame || msCancelRequestAnimationFrame || oCancelRequestAnimationFrame;*/

//Gobj is game object,initial by only one parameter props
Function.prototype.extends=function(addInObject){
    //father call extends to produce child
    var father=this;
    //Create child self as constructor function
    var child=function(props){
        //If props==null, will throw errors during construction
        if (props){
            //Execute old constructor
            father.call(this,props);
            //Add new into child constructor
            addInObject.constructorPlus.call(this,props);//this.constructorPlus(props)
        }
    };
    //Inherit prototype from father, clear redundant properties inside father constructor
    var fatherClean=function(){};
    fatherClean.prototype=father.prototype;
    child.prototype=new fatherClean();
    child.prototype.constructor=child;
    /*//We don't need properties constructed by {}, constructor not changed;
    child.prototype.__proto__=father.prototype;//__proto__ isn't supported by IE9 and IE10, IE11 supports*/
    //Add new functions into child.prototype
    for (var attr in addInObject.prototypePlus){
        child.prototype[attr]=addInObject.prototypePlus[attr];
    }
    /*****Add super&inherited pointer for instance*****/
    //The upper constructor is super
    child.prototype.super=father;
    //Behaviors including constructor are inherited by child, can find depreciated
    child.prototype.inherited=father.prototype;//Behavior always in prototype
    /*****Generate super&inherited pointer link*****/
    child.super=father;
    child.inherited=father.prototype;
    //Below is constructor link:
    //Mutalisk.constructor.(prototype.constructor).(prototype.constructor)
    return child;
};

//Extend Audio
Audio.prototype.playFromStart=function(){
    this.pause();
    this.currentTime=0;
    this.play();
};

/**************** Add to _$ namespace *******************/

_$.requestAnimationFrame=requestAnimationFrame || webkitRequestAnimationFrame ||
    mozRequestAnimationFrame || msRequestAnimationFrame || oRequestAnimationFrame;

_$.extends=function(fathers,addInObject){
    //Create child self as constructor function
    var child=function(props){
        if (fathers instanceof Array){
            var myself=this;
            fathers.forEach(function(father){
                father.call(myself,props);
            });
            //Add new into child constructor
            addInObject.constructorPlus.call(this,props);
        }
        else throw('_$.extends need array type parameter fathers!');
    };
    if (fathers.length>0){
        var mixinProto=fathers[0].prototype;
        for (N=1;N<fathers.length;N++){
            //Mixin interfaces
            mixinProto=_$.delegate(mixinProto,fathers[N].prototype);
            //Still instanceof interface == false
            mixinProto.constructor=fathers[N];
        }
        child.prototype=_$.delegate(mixinProto,addInObject.prototypePlus);
        child.prototype.constructor=child;
    }
    else {
        //Original method
        for (var attr in addInObject.prototypePlus){
            child.prototype[attr]=addInObject.prototypePlus[attr];
        }
    }
    return child;
};

//_$.mixin == $.extend
_$.mixin=function(){
    switch (arguments.length){
        case 0:
            return {};
        default:
            var dist=arguments[0];
            for (var N=1;N<arguments.length;N++){
                var addIn=arguments[N];
                for (var attr in addIn){
                    dist[attr]=addIn[attr];
                }
            }
            return dist;
    }
};
//Can only copy one level, copy reference
_$.copy=function(obj){
    //Auto detect obj/array
    return _$.mixin(new obj.constructor(),obj);
};
//Full traverse copy, copy one level when ref=true
_$.clone=function(obj,ref){
    //Auto detect obj/array
    var dist=new obj.constructor();
    for (var attr in obj){
        //Cannot just assign pointer if it's object type
        if (typeof(obj[attr])=="object" && !ref) {
            dist[attr]=_$.clone(obj[attr]);
        }
        //Can only assign simple type(number/boolean/string)
        else dist[attr]=obj[attr];
        //dist[attr]=(typeof(obj[attr])=="object")?_$.clone(obj[attr]):obj[attr];
    }
    return dist;
};

//Template
_$.templates={
    src:{},
    //register ?id as ?tempStr
    register:function(id,tempStr){
        var tempObj={};
        tempObj.tempStr=tempStr;
        //Auto search for params
        tempObj.params=tempStr.match(/\${2}\w{1,}\${2}/g);// /RegExp/go,NoStop
        _$.templates.src[id]=tempObj;
    },
    //apply template ?id with ?values
    applyOn: function(id,values) {
        var valueArray=[].concat(values);//Convert to array
        var src=_$.templates.src[id];//Get src template object
        var result=src.tempStr;//Get original template
        for (var N=0;N<Math.min(valueArray.length,src.params.length);N++){
            result=result.replace(src.params[N],valueArray[N]);
        }
        return result;
    }
};

_$.traverse=function(obj,func){
    for (var attr in obj){
        if (typeof(obj[attr])=="object"){
            _$.traverse(obj[attr],func);
        }
        else {
            //Callback
            func(obj[attr]);
        }
    }
};

_$.matrixOperation=function(matrix,operation){
    for (var attr in matrix){
        if (typeof(matrix[attr])=="object"){//array or object
            _$.matrixOperation(matrix[attr],operation);
        }
        else {
            matrix[attr]=operation(matrix[attr]);
        }
    }
};

//Map traverse for array
_$.mapTraverse=function(array,operation){
    var operationTraverse=function(n){
        if (n instanceof Array) return n.map(operationTraverse);
        else return operation(n);
    };
    return array.map(operationTraverse);
};

//Array equals array
_$.arrayEqual=function(arr1,arr2){
    if (arr1.length==arr2.length){
        for (var n=0;n<arr1.length;n++){
            //Content not same
            if (arr1[n]!=arr2[n]) return false;
        }
        return true;
    }
    //Length not same
    else return false;
};

/**********Dojo relative**********/
_$.modules={};
//Script loader
_$.sourceLoader={
    sources:{},
    sourceNum:0,
    loadedNum:0,
    allLoaded:true,
    load:function(pathName){
        _$.sourceLoader.sourceNum++;
        _$.sourceLoader.allLoaded=false;
        //Type=="script"
        var node=document.createElement('script');
        node.onload=function(){
            //Load builder
            _$.modules[pathName]=_$.define.loadedBuilders.shift();
            _$.sourceLoader.loaded();
        };
        //Block this module, should not load again
        _$.modules[pathName]=true;
        node.src=pathName+'.js';
        document.getElementsByTagName('head')[0].appendChild(node);
    },
    loaded:function(){
        _$.sourceLoader.loadedNum++;
        if(_$.sourceLoader.loadedNum==_$.sourceLoader.sourceNum){
            _$.sourceLoader.allLoaded=true;
        }
    },
    allOnLoad:function(callback){
        if (_$.sourceLoader.allLoaded) {
            callback();
        }
        else {
            setTimeout(function(){
                _$.sourceLoader.allOnLoad(callback);
            },100);
        }
    }
};
//Async instantiate
_$.instModule=function(name){
    //Add module instantiate stack
    _$.instModule.refStack.push(name);
    //Instantiate module constructor
    var module=_$.modules[name];
    //Now instantiate builder function
    if (module._$isBuilder){
        var refObjs=[];
        if (module.refArr) {
            module.refArr.forEach(function(ref){
                //Recursion instantiate
                if (ref[0]=='=') {
                    //Closure
                    var loc=ref.substr(1);
                    refObjs.push(function(){
                        return _$.modules[loc];
                    });
                }
                else {
                    if (_$.instModule.refStack.indexOf(ref)!=-1) {
                        //Auto detect loop reference
                        throw 'Loop reference found: '+name+' --> '+ref;
                    }
                    refObjs.push(_$.instModule(ref));
                }
            });
        }
        //Override module function with instance
        _$.modules[name]=module.apply(window,refObjs);
    }
    _$.instModule.refStack.pop();
    return _$.modules[name];
};
_$.instModule.refStack=[];
//Register module builder function into _$.modules
_$.define=function(refArr,builderFunc){
    refArr.forEach(function(ref){
        if (ref[0]=='=') return;
        //Recursion loading if that module not loaded
        if (!_$.modules[ref]) _$.sourceLoader.load(ref);
    });
    //Builder loaded
    builderFunc.refArr=refArr;
    builderFunc._$isBuilder=true;
    _$.define.loadedBuilders.push(builderFunc);
    //_$.modules[pathName]=builderFunc;
};
_$.define.loadedBuilders=[];
//Run callback functions with module references
_$.require=function(refArr,callback){
    refArr.forEach(function(ref){
        if (ref[0]=='=') return;
        //Recursion loading if that module not loaded
        if (!_$.modules[ref]) _$.sourceLoader.load(ref);
    });
    _$.sourceLoader.allOnLoad(function(){
        var refObjs=[];
        refArr.forEach(function(ref){
            //Recursion instantiate
            refObjs.push(_$.instModule(ref));
        });
        callback.apply(window,refObjs);
    });
};
//Constructor extension: changed to multiple inherit
_$.declare=function(globalName,fathers,plusObj){
    if (arguments.length==2){
        plusObj=fathers;
        fathers=globalName;
        globalName=null;
    }
    if (!fathers) fathers=[];
    var constructPlus=plusObj.constructor;
    delete plusObj.constructor;
    var protoPlus=plusObj;
    var child=_$.extends(fathers,{constructorPlus:constructPlus,prototypePlus:protoPlus});
    if (globalName) window[globalName]=child;
    return child;
};

//Publish & Subscribe topic
_$.topic={};
_$.subscribe=function(topic,callback){
    if (!_$.topic[topic]) _$.topic[topic]={callbacks:[]};
    _$.topic[topic].callbacks.push(callback);
};
//Need add .owner on callback to identify who is subscriber
_$.unSubscribe=function(topic,callback){
    if (_$.topic[topic] && _$.topic[topic].callbacks){
        var index=_$.topic[topic].callbacks.indexOf(callback);
        _$.topic[topic].callbacks.splice(index,1);
    }
};
_$.publish=function(topic,msgObj){
    if (_$.topic[topic]){
        _$.topic[topic].callbacks.forEach(function(callback){
            callback.call(window,msgObj);
        })
    }
};

//lang.delegate:cover with one proto layer
_$.delegate=function(chara,bufferObj){
    var func=function(){};
    func.prototype=chara;
    return _$.mixin(new func(),bufferObj);
};

//lang.hitch:bind context this with function
_$.hitch=function(func,thisP){
    //Higher-order function: compress this pointer into closure here
    return function() {
        func.apply(thisP,arguments);
    };
};

//Convert array-like to real array
_$.toArray=function(arr){
    var result=[];
    for (var N=0;N<arr.length;N++){
        result.push(arr[N]);
    }
    return result;
};

//To replace Math.hypot
_$.hypot=function(vector){
    var result=0;
    vector.forEach(function(n){
        result+=(n*n);
    });
    return Math.pow(result,0.5);
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v1.11.2 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.2",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=hb(),z=hb(),A=hb(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},eb=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fb){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function gb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+rb(o[l]);w=ab.test(a)&&pb(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function hb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ib(a){return a[u]=!0,a}function jb(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function kb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function lb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function nb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function ob(a){return ib(function(b){return b=+b,ib(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pb(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=gb.support={},f=gb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=gb.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",eb,!1):e.attachEvent&&e.attachEvent("onunload",eb)),p=!f(g),c.attributes=jb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=jb(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=jb(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(jb(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),jb(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&jb(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return lb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?lb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},gb.matches=function(a,b){return gb(a,null,null,b)},gb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return gb(b,n,null,[a]).length>0},gb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},gb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},gb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},gb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=gb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=gb.selectors={cacheLength:50,createPseudo:ib,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||gb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&gb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=gb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||gb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ib(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ib(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ib(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ib(function(a){return function(b){return gb(a,b).length>0}}),contains:ib(function(a){return a=a.replace(cb,db),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ib(function(a){return W.test(a||"")||gb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:ob(function(){return[0]}),last:ob(function(a,b){return[b-1]}),eq:ob(function(a,b,c){return[0>c?c+b:c]}),even:ob(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:ob(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:ob(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:ob(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=mb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=nb(b);function qb(){}qb.prototype=d.filters=d.pseudos,d.setFilters=new qb,g=gb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?gb.error(a):z(a,i).slice(0)};function rb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function tb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ub(a,b,c){for(var d=0,e=b.length;e>d;d++)gb(a,b[d],c);return c}function vb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wb(a,b,c,d,e,f){return d&&!d[u]&&(d=wb(d)),e&&!e[u]&&(e=wb(e,f)),ib(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ub(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:vb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=vb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=vb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sb(function(a){return a===b},h,!0),l=sb(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sb(tb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wb(i>1&&tb(m),i>1&&rb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xb(a.slice(i,e)),f>e&&xb(a=a.slice(e)),f>e&&rb(a))}m.push(c)}return tb(m)}function yb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=vb(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&gb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ib(f):f}return h=gb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,yb(e,d)),f.selector=a}return f},i=gb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&pb(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&rb(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&pb(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=jb(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),jb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||kb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&jb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||kb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),jb(function(a){return null==a.getAttribute("disabled")})||kb(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),gb}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;
return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb=/ jQuery\d+="(?:null|\d+)"/g,gb=new RegExp("<(?:"+eb+")[\\s/>]","i"),hb=/^\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb=/<([\w:]+)/,kb=/<tbody/i,lb=/<|&#?\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\s*(?:[^=]|=\s*.checked.)/i,ob=/^$|\/(?:java|ecma)script/i,pb=/^true\/(.*)/,qb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sb=db(y),tb=sb.appendChild(y.createElement("div"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xb(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,"script"),d.length>0&&zb(d,!i&&ub(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(jb.exec(f)||["",""])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f="table"!==i||kb.test(f)?"<table>"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,"input"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),"script"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,""):void 0;if(!("string"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ib,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,"script"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qb,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),"none"!==c&&c||(Cb=(Cb||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight),b.removeChild(i)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\([^)]*\)/i,Nb=/opacity\s*=\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp("^("+S+")(.*)$","i"),Qb=new RegExp("^([+-])=("+S+")","i"),Rb={position:"absolute",visibility:"hidden",display:"block"},Sb={letterSpacing:"0",fontWeight:"400"},Tb=["Webkit","O","Moz","ms"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fb(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Yb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),"normal"===f&&b in Sb&&(f=Sb[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Mb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+" "+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Jb,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)
}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cc=/queueHooks$/,dc=[ic],ec={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fb(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fb(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc("show"),slideUp:gc("hide"),slideToggle:gc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lc=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lc,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var uc=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(uc," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vc=m.now(),wc=/\?/,xc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\/\//,Gc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc={},Ic={},Jc="*/".concat("*");try{zc=location.href}catch(Kc){zc=y.createElement("a"),zc.href="",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:"GET",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+"").replace(Ac,"").replace(Fc,yc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yc[3]||("http:"===yc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=m.event&&k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,"$1_="+vc++):e+(wc.test(e)?"&":"?")+"_="+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\[\]$/,Sc=/\r?\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vc(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join("&").replace(Qc,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,"\r\n")}}):{name:b.name,value:c.replace(Sc,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&"withCredentials"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_c.pop()||m.expando+"_"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ad.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,"$1"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"=="function"&&__webpack_require__(28)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return m}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});
//# hammer.min.js
!function(a,b,c,d){"use strict";function e(a,b,c){return setTimeout(j(a,c),b)}function f(a,b,c){return Array.isArray(a)?(g(a,c[b],c),!0):!1}function g(a,b,c){var e;if(a)if(a.forEach)a.forEach(b,c);else if(a.length!==d)for(e=0;e<a.length;)b.call(c,a[e],e,a),e++;else for(e in a)a.hasOwnProperty(e)&&b.call(c,a[e],e,a)}function h(b,c,d){var e="DEPRECATED METHOD: "+c+"\n"+d+" AT \n";return function(){var c=new Error("get-stack-trace"),d=c&&c.stack?c.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",f=a.console&&(a.console.warn||a.console.log);return f&&f.call(a.console,e,d),b.apply(this,arguments)}}function i(a,b,c){var d,e=b.prototype;d=a.prototype=Object.create(e),d.constructor=a,d._super=e,c&&ha(d,c)}function j(a,b){return function(){return a.apply(b,arguments)}}function k(a,b){return typeof a==ka?a.apply(b?b[0]||d:d,b):a}function l(a,b){return a===d?b:a}function m(a,b,c){g(q(b),function(b){a.addEventListener(b,c,!1)})}function n(a,b,c){g(q(b),function(b){a.removeEventListener(b,c,!1)})}function o(a,b){for(;a;){if(a==b)return!0;a=a.parentNode}return!1}function p(a,b){return a.indexOf(b)>-1}function q(a){return a.trim().split(/\s+/g)}function r(a,b,c){if(a.indexOf&&!c)return a.indexOf(b);for(var d=0;d<a.length;){if(c&&a[d][c]==b||!c&&a[d]===b)return d;d++}return-1}function s(a){return Array.prototype.slice.call(a,0)}function t(a,b,c){for(var d=[],e=[],f=0;f<a.length;){var g=b?a[f][b]:a[f];r(e,g)<0&&d.push(a[f]),e[f]=g,f++}return c&&(d=b?d.sort(function(a,c){return a[b]>c[b]}):d.sort()),d}function u(a,b){for(var c,e,f=b[0].toUpperCase()+b.slice(1),g=0;g<ia.length;){if(c=ia[g],e=c?c+f:b,e in a)return e;g++}return d}function v(){return qa++}function w(b){var c=b.ownerDocument||b;return c.defaultView||c.parentWindow||a}function x(a,b){var c=this;this.manager=a,this.callback=b,this.element=a.element,this.target=a.options.inputTarget,this.domHandler=function(b){k(a.options.enable,[a])&&c.handler(b)},this.init()}function y(a){var b,c=a.options.inputClass;return new(b=c?c:ta?M:ua?P:sa?R:L)(a,z)}function z(a,b,c){var d=c.pointers.length,e=c.changedPointers.length,f=b&Aa&&d-e===0,g=b&(Ca|Da)&&d-e===0;c.isFirst=!!f,c.isFinal=!!g,f&&(a.session={}),c.eventType=b,A(a,c),a.emit("hammer.input",c),a.recognize(c),a.session.prevInput=c}function A(a,b){var c=a.session,d=b.pointers,e=d.length;c.firstInput||(c.firstInput=D(b)),e>1&&!c.firstMultiple?c.firstMultiple=D(b):1===e&&(c.firstMultiple=!1);var f=c.firstInput,g=c.firstMultiple,h=g?g.center:f.center,i=b.center=E(d);b.timeStamp=na(),b.deltaTime=b.timeStamp-f.timeStamp,b.angle=I(h,i),b.distance=H(h,i),B(c,b),b.offsetDirection=G(b.deltaX,b.deltaY);var j=F(b.deltaTime,b.deltaX,b.deltaY);b.overallVelocityX=j.x,b.overallVelocityY=j.y,b.overallVelocity=ma(j.x)>ma(j.y)?j.x:j.y,b.scale=g?K(g.pointers,d):1,b.rotation=g?J(g.pointers,d):0,b.maxPointers=c.prevInput?b.pointers.length>c.prevInput.maxPointers?b.pointers.length:c.prevInput.maxPointers:b.pointers.length,C(c,b);var k=a.element;o(b.srcEvent.target,k)&&(k=b.srcEvent.target),b.target=k}function B(a,b){var c=b.center,d=a.offsetDelta||{},e=a.prevDelta||{},f=a.prevInput||{};(b.eventType===Aa||f.eventType===Ca)&&(e=a.prevDelta={x:f.deltaX||0,y:f.deltaY||0},d=a.offsetDelta={x:c.x,y:c.y}),b.deltaX=e.x+(c.x-d.x),b.deltaY=e.y+(c.y-d.y)}function C(a,b){var c,e,f,g,h=a.lastInterval||b,i=b.timeStamp-h.timeStamp;if(b.eventType!=Da&&(i>za||h.velocity===d)){var j=b.deltaX-h.deltaX,k=b.deltaY-h.deltaY,l=F(i,j,k);e=l.x,f=l.y,c=ma(l.x)>ma(l.y)?l.x:l.y,g=G(j,k),a.lastInterval=b}else c=h.velocity,e=h.velocityX,f=h.velocityY,g=h.direction;b.velocity=c,b.velocityX=e,b.velocityY=f,b.direction=g}function D(a){for(var b=[],c=0;c<a.pointers.length;)b[c]={clientX:la(a.pointers[c].clientX),clientY:la(a.pointers[c].clientY)},c++;return{timeStamp:na(),pointers:b,center:E(b),deltaX:a.deltaX,deltaY:a.deltaY}}function E(a){var b=a.length;if(1===b)return{x:la(a[0].clientX),y:la(a[0].clientY)};for(var c=0,d=0,e=0;b>e;)c+=a[e].clientX,d+=a[e].clientY,e++;return{x:la(c/b),y:la(d/b)}}function F(a,b,c){return{x:b/a||0,y:c/a||0}}function G(a,b){return a===b?Ea:ma(a)>=ma(b)?0>a?Fa:Ga:0>b?Ha:Ia}function H(a,b,c){c||(c=Ma);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return Math.sqrt(d*d+e*e)}function I(a,b,c){c||(c=Ma);var d=b[c[0]]-a[c[0]],e=b[c[1]]-a[c[1]];return 180*Math.atan2(e,d)/Math.PI}function J(a,b){return I(b[1],b[0],Na)+I(a[1],a[0],Na)}function K(a,b){return H(b[0],b[1],Na)/H(a[0],a[1],Na)}function L(){this.evEl=Pa,this.evWin=Qa,this.allow=!0,this.pressed=!1,x.apply(this,arguments)}function M(){this.evEl=Ta,this.evWin=Ua,x.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function N(){this.evTarget=Wa,this.evWin=Xa,this.started=!1,x.apply(this,arguments)}function O(a,b){var c=s(a.touches),d=s(a.changedTouches);return b&(Ca|Da)&&(c=t(c.concat(d),"identifier",!0)),[c,d]}function P(){this.evTarget=Za,this.targetIds={},x.apply(this,arguments)}function Q(a,b){var c=s(a.touches),d=this.targetIds;if(b&(Aa|Ba)&&1===c.length)return d[c[0].identifier]=!0,[c,c];var e,f,g=s(a.changedTouches),h=[],i=this.target;if(f=c.filter(function(a){return o(a.target,i)}),b===Aa)for(e=0;e<f.length;)d[f[e].identifier]=!0,e++;for(e=0;e<g.length;)d[g[e].identifier]&&h.push(g[e]),b&(Ca|Da)&&delete d[g[e].identifier],e++;return h.length?[t(f.concat(h),"identifier",!0),h]:void 0}function R(){x.apply(this,arguments);var a=j(this.handler,this);this.touch=new P(this.manager,a),this.mouse=new L(this.manager,a)}function S(a,b){this.manager=a,this.set(b)}function T(a){if(p(a,db))return db;var b=p(a,eb),c=p(a,fb);return b&&c?db:b||c?b?eb:fb:p(a,cb)?cb:bb}function U(a){this.options=ha({},this.defaults,a||{}),this.id=v(),this.manager=null,this.options.enable=l(this.options.enable,!0),this.state=gb,this.simultaneous={},this.requireFail=[]}function V(a){return a&lb?"cancel":a&jb?"end":a&ib?"move":a&hb?"start":""}function W(a){return a==Ia?"down":a==Ha?"up":a==Fa?"left":a==Ga?"right":""}function X(a,b){var c=b.manager;return c?c.get(a):a}function Y(){U.apply(this,arguments)}function Z(){Y.apply(this,arguments),this.pX=null,this.pY=null}function $(){Y.apply(this,arguments)}function _(){U.apply(this,arguments),this._timer=null,this._input=null}function aa(){Y.apply(this,arguments)}function ba(){Y.apply(this,arguments)}function ca(){U.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function da(a,b){return b=b||{},b.recognizers=l(b.recognizers,da.defaults.preset),new ea(a,b)}function ea(a,b){this.options=ha({},da.defaults,b||{}),this.options.inputTarget=this.options.inputTarget||a,this.handlers={},this.session={},this.recognizers=[],this.element=a,this.input=y(this),this.touchAction=new S(this,this.options.touchAction),fa(this,!0),g(this.options.recognizers,function(a){var b=this.add(new a[0](a[1]));a[2]&&b.recognizeWith(a[2]),a[3]&&b.requireFailure(a[3])},this)}function fa(a,b){var c=a.element;c.style&&g(a.options.cssProps,function(a,d){c.style[u(c.style,d)]=b?a:""})}function ga(a,c){var d=b.createEvent("Event");d.initEvent(a,!0,!0),d.gesture=c,c.target.dispatchEvent(d)}var ha,ia=["","webkit","Moz","MS","ms","o"],ja=b.createElement("div"),ka="function",la=Math.round,ma=Math.abs,na=Date.now;ha="function"!=typeof Object.assign?function(a){if(a===d||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var e=arguments[c];if(e!==d&&null!==e)for(var f in e)e.hasOwnProperty(f)&&(b[f]=e[f])}return b}:Object.assign;var oa=h(function(a,b,c){for(var e=Object.keys(b),f=0;f<e.length;)(!c||c&&a[e[f]]===d)&&(a[e[f]]=b[e[f]]),f++;return a},"extend","Use `assign`."),pa=h(function(a,b){return oa(a,b,!0)},"merge","Use `assign`."),qa=1,ra=/mobile|tablet|ip(ad|hone|od)|android/i,sa="ontouchstart"in a,ta=u(a,"PointerEvent")!==d,ua=sa&&ra.test(navigator.userAgent),va="touch",wa="pen",xa="mouse",ya="kinect",za=25,Aa=1,Ba=2,Ca=4,Da=8,Ea=1,Fa=2,Ga=4,Ha=8,Ia=16,Ja=Fa|Ga,Ka=Ha|Ia,La=Ja|Ka,Ma=["x","y"],Na=["clientX","clientY"];x.prototype={handler:function(){},init:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(w(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&n(this.element,this.evEl,this.domHandler),this.evTarget&&n(this.target,this.evTarget,this.domHandler),this.evWin&&n(w(this.element),this.evWin,this.domHandler)}};var Oa={mousedown:Aa,mousemove:Ba,mouseup:Ca},Pa="mousedown",Qa="mousemove mouseup";i(L,x,{handler:function(a){var b=Oa[a.type];b&Aa&&0===a.button&&(this.pressed=!0),b&Ba&&1!==a.which&&(b=Ca),this.pressed&&this.allow&&(b&Ca&&(this.pressed=!1),this.callback(this.manager,b,{pointers:[a],changedPointers:[a],pointerType:xa,srcEvent:a}))}});var Ra={pointerdown:Aa,pointermove:Ba,pointerup:Ca,pointercancel:Da,pointerout:Da},Sa={2:va,3:wa,4:xa,5:ya},Ta="pointerdown",Ua="pointermove pointerup pointercancel";a.MSPointerEvent&&!a.PointerEvent&&(Ta="MSPointerDown",Ua="MSPointerMove MSPointerUp MSPointerCancel"),i(M,x,{handler:function(a){var b=this.store,c=!1,d=a.type.toLowerCase().replace("ms",""),e=Ra[d],f=Sa[a.pointerType]||a.pointerType,g=f==va,h=r(b,a.pointerId,"pointerId");e&Aa&&(0===a.button||g)?0>h&&(b.push(a),h=b.length-1):e&(Ca|Da)&&(c=!0),0>h||(b[h]=a,this.callback(this.manager,e,{pointers:b,changedPointers:[a],pointerType:f,srcEvent:a}),c&&b.splice(h,1))}});var Va={touchstart:Aa,touchmove:Ba,touchend:Ca,touchcancel:Da},Wa="touchstart",Xa="touchstart touchmove touchend touchcancel";i(N,x,{handler:function(a){var b=Va[a.type];if(b===Aa&&(this.started=!0),this.started){var c=O.call(this,a,b);b&(Ca|Da)&&c[0].length-c[1].length===0&&(this.started=!1),this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:va,srcEvent:a})}}});var Ya={touchstart:Aa,touchmove:Ba,touchend:Ca,touchcancel:Da},Za="touchstart touchmove touchend touchcancel";i(P,x,{handler:function(a){var b=Ya[a.type],c=Q.call(this,a,b);c&&this.callback(this.manager,b,{pointers:c[0],changedPointers:c[1],pointerType:va,srcEvent:a})}}),i(R,x,{handler:function(a,b,c){var d=c.pointerType==va,e=c.pointerType==xa;if(d)this.mouse.allow=!1;else if(e&&!this.mouse.allow)return;b&(Ca|Da)&&(this.mouse.allow=!0),this.callback(a,b,c)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var $a=u(ja.style,"touchAction"),_a=$a!==d,ab="compute",bb="auto",cb="manipulation",db="none",eb="pan-x",fb="pan-y";S.prototype={set:function(a){a==ab&&(a=this.compute()),_a&&this.manager.element.style&&(this.manager.element.style[$a]=a),this.actions=a.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var a=[];return g(this.manager.recognizers,function(b){k(b.options.enable,[b])&&(a=a.concat(b.getTouchAction()))}),T(a.join(" "))},preventDefaults:function(a){if(!_a){var b=a.srcEvent,c=a.offsetDirection;if(this.manager.session.prevented)return void b.preventDefault();var d=this.actions,e=p(d,db),f=p(d,fb),g=p(d,eb);if(e){var h=1===a.pointers.length,i=a.distance<2,j=a.deltaTime<250;if(h&&i&&j)return}if(!g||!f)return e||f&&c&Ja||g&&c&Ka?this.preventSrc(b):void 0}},preventSrc:function(a){this.manager.session.prevented=!0,a.preventDefault()}};var gb=1,hb=2,ib=4,jb=8,kb=jb,lb=16,mb=32;U.prototype={defaults:{},set:function(a){return ha(this.options,a),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(a){if(f(a,"recognizeWith",this))return this;var b=this.simultaneous;return a=X(a,this),b[a.id]||(b[a.id]=a,a.recognizeWith(this)),this},dropRecognizeWith:function(a){return f(a,"dropRecognizeWith",this)?this:(a=X(a,this),delete this.simultaneous[a.id],this)},requireFailure:function(a){if(f(a,"requireFailure",this))return this;var b=this.requireFail;return a=X(a,this),-1===r(b,a)&&(b.push(a),a.requireFailure(this)),this},dropRequireFailure:function(a){if(f(a,"dropRequireFailure",this))return this;a=X(a,this);var b=r(this.requireFail,a);return b>-1&&this.requireFail.splice(b,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(a){return!!this.simultaneous[a.id]},emit:function(a){function b(b){c.manager.emit(b,a)}var c=this,d=this.state;jb>d&&b(c.options.event+V(d)),b(c.options.event),a.additionalEvent&&b(a.additionalEvent),d>=jb&&b(c.options.event+V(d))},tryEmit:function(a){return this.canEmit()?this.emit(a):void(this.state=mb)},canEmit:function(){for(var a=0;a<this.requireFail.length;){if(!(this.requireFail[a].state&(mb|gb)))return!1;a++}return!0},recognize:function(a){var b=ha({},a);return k(this.options.enable,[this,b])?(this.state&(kb|lb|mb)&&(this.state=gb),this.state=this.process(b),void(this.state&(hb|ib|jb|lb)&&this.tryEmit(b))):(this.reset(),void(this.state=mb))},process:function(a){},getTouchAction:function(){},reset:function(){}},i(Y,U,{defaults:{pointers:1},attrTest:function(a){var b=this.options.pointers;return 0===b||a.pointers.length===b},process:function(a){var b=this.state,c=a.eventType,d=b&(hb|ib),e=this.attrTest(a);return d&&(c&Da||!e)?b|lb:d||e?c&Ca?b|jb:b&hb?b|ib:hb:mb}}),i(Z,Y,{defaults:{event:"pan",threshold:10,pointers:1,direction:La},getTouchAction:function(){var a=this.options.direction,b=[];return a&Ja&&b.push(fb),a&Ka&&b.push(eb),b},directionTest:function(a){var b=this.options,c=!0,d=a.distance,e=a.direction,f=a.deltaX,g=a.deltaY;return e&b.direction||(b.direction&Ja?(e=0===f?Ea:0>f?Fa:Ga,c=f!=this.pX,d=Math.abs(a.deltaX)):(e=0===g?Ea:0>g?Ha:Ia,c=g!=this.pY,d=Math.abs(a.deltaY))),a.direction=e,c&&d>b.threshold&&e&b.direction},attrTest:function(a){return Y.prototype.attrTest.call(this,a)&&(this.state&hb||!(this.state&hb)&&this.directionTest(a))},emit:function(a){this.pX=a.deltaX,this.pY=a.deltaY;var b=W(a.direction);b&&(a.additionalEvent=this.options.event+b),this._super.emit.call(this,a)}}),i($,Y,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[db]},attrTest:function(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.scale-1)>this.options.threshold||this.state&hb)},emit:function(a){if(1!==a.scale){var b=a.scale<1?"in":"out";a.additionalEvent=this.options.event+b}this._super.emit.call(this,a)}}),i(_,U,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[bb]},process:function(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime>b.time;if(this._input=a,!d||!c||a.eventType&(Ca|Da)&&!f)this.reset();else if(a.eventType&Aa)this.reset(),this._timer=e(function(){this.state=kb,this.tryEmit()},b.time,this);else if(a.eventType&Ca)return kb;return mb},reset:function(){clearTimeout(this._timer)},emit:function(a){this.state===kb&&(a&&a.eventType&Ca?this.manager.emit(this.options.event+"up",a):(this._input.timeStamp=na(),this.manager.emit(this.options.event,this._input)))}}),i(aa,Y,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[db]},attrTest:function(a){return this._super.attrTest.call(this,a)&&(Math.abs(a.rotation)>this.options.threshold||this.state&hb)}}),i(ba,Y,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ja|Ka,pointers:1},getTouchAction:function(){return Z.prototype.getTouchAction.call(this)},attrTest:function(a){var b,c=this.options.direction;return c&(Ja|Ka)?b=a.overallVelocity:c&Ja?b=a.overallVelocityX:c&Ka&&(b=a.overallVelocityY),this._super.attrTest.call(this,a)&&c&a.offsetDirection&&a.distance>this.options.threshold&&a.maxPointers==this.options.pointers&&ma(b)>this.options.velocity&&a.eventType&Ca},emit:function(a){var b=W(a.offsetDirection);b&&this.manager.emit(this.options.event+b,a),this.manager.emit(this.options.event,a)}}),i(ca,U,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[cb]},process:function(a){var b=this.options,c=a.pointers.length===b.pointers,d=a.distance<b.threshold,f=a.deltaTime<b.time;if(this.reset(),a.eventType&Aa&&0===this.count)return this.failTimeout();if(d&&f&&c){if(a.eventType!=Ca)return this.failTimeout();var g=this.pTime?a.timeStamp-this.pTime<b.interval:!0,h=!this.pCenter||H(this.pCenter,a.center)<b.posThreshold;this.pTime=a.timeStamp,this.pCenter=a.center,h&&g?this.count+=1:this.count=1,this._input=a;var i=this.count%b.taps;if(0===i)return this.hasRequireFailures()?(this._timer=e(function(){this.state=kb,this.tryEmit()},b.interval,this),hb):kb}return mb},failTimeout:function(){return this._timer=e(function(){this.state=mb},this.options.interval,this),mb},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==kb&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),da.VERSION="2.0.6",da.defaults={domEvents:!1,touchAction:ab,enable:!0,inputTarget:null,inputClass:null,preset:[[aa,{enable:!1}],[$,{enable:!1},["rotate"]],[ba,{direction:Ja}],[Z,{direction:Ja},["swipe"]],[ca],[ca,{event:"doubletap",taps:2},["tap"]],[_]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var nb=1,ob=2;ea.prototype={set:function(a){return ha(this.options,a),a.touchAction&&this.touchAction.update(),a.inputTarget&&(this.input.destroy(),this.input.target=a.inputTarget,this.input.init()),this},stop:function(a){this.session.stopped=a?ob:nb},recognize:function(a){var b=this.session;if(!b.stopped){this.touchAction.preventDefaults(a);var c,d=this.recognizers,e=b.curRecognizer;(!e||e&&e.state&kb)&&(e=b.curRecognizer=null);for(var f=0;f<d.length;)c=d[f],b.stopped===ob||e&&c!=e&&!c.canRecognizeWith(e)?c.reset():c.recognize(a),!e&&c.state&(hb|ib|jb)&&(e=b.curRecognizer=c),f++}},get:function(a){if(a instanceof U)return a;for(var b=this.recognizers,c=0;c<b.length;c++)if(b[c].options.event==a)return b[c];return null},add:function(a){if(f(a,"add",this))return this;var b=this.get(a.options.event);return b&&this.remove(b),this.recognizers.push(a),a.manager=this,this.touchAction.update(),a},remove:function(a){if(f(a,"remove",this))return this;if(a=this.get(a)){var b=this.recognizers,c=r(b,a);-1!==c&&(b.splice(c,1),this.touchAction.update())}return this},on:function(a,b){var c=this.handlers;return g(q(a),function(a){c[a]=c[a]||[],c[a].push(b)}),this},off:function(a,b){var c=this.handlers;return g(q(a),function(a){b?c[a]&&c[a].splice(r(c[a],b),1):delete c[a]}),this},emit:function(a,b){this.options.domEvents&&ga(a,b);var c=this.handlers[a]&&this.handlers[a].slice();if(c&&c.length){b.type=a,b.preventDefault=function(){b.srcEvent.preventDefault()};for(var d=0;d<c.length;)c[d](b),d++}},destroy:function(){this.element&&fa(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ha(da,{INPUT_START:Aa,INPUT_MOVE:Ba,INPUT_END:Ca,INPUT_CANCEL:Da,STATE_POSSIBLE:gb,STATE_BEGAN:hb,STATE_CHANGED:ib,STATE_ENDED:jb,STATE_RECOGNIZED:kb,STATE_CANCELLED:lb,STATE_FAILED:mb,DIRECTION_NONE:Ea,DIRECTION_LEFT:Fa,DIRECTION_RIGHT:Ga,DIRECTION_UP:Ha,DIRECTION_DOWN:Ia,DIRECTION_HORIZONTAL:Ja,DIRECTION_VERTICAL:Ka,DIRECTION_ALL:La,Manager:ea,Input:x,TouchAction:S,TouchInput:P,MouseInput:L,PointerEventInput:M,TouchMouseInput:R,SingleTouchInput:N,Recognizer:U,AttrRecognizer:Y,Tap:ca,Pan:Z,Swipe:ba,Pinch:$,Rotate:aa,Press:_,on:m,off:n,each:g,merge:pa,extend:oa,assign:ha,inherit:i,bindFn:j,prefixed:u});var pb="undefined"!=typeof a?a:"undefined"!=typeof self?self:{};pb.Hammer=da, true?!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return da}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"undefined"!=typeof module&&module.exports?module.exports=da:a[c]=da}(window,document,"Hammer");


/***/ }),
/* 26 */
/***/ (function(module, exports) {

var sourceLoader={
    sources:{},
    sourceNum:0,
    loadedNum:0,
    allLoaded:true,
    load:function(type,src,id){
        sourceLoader.sourceNum++;
        sourceLoader.allLoaded=false;
        var source;
        var loaded=function(){
            sourceLoader.loadedNum++;
            if(sourceLoader.loadedNum==sourceLoader.sourceNum){
                sourceLoader.allLoaded=true;
            }
        };//Code copy
        if (type=='img'){
            source=new Image();
            source.src=src;
            source.onload=loaded;
            sourceLoader.sources[id]=source;
        }
        if (type=='audio'){
            source=new Audio();
            source.addEventListener('canplaythrough',loaded,false);
            //source.oncanplaythrough=loaded;
            source.src=src;//Pose after listener to prevent fired early
            sourceLoader.sources[id]=source;
        }
        //For my Dojo: src==pathName
        if (type=='js'){
            var node=document.createElement('script');
            node.onload=function(){
                //Load builder
                _$.modules[src]=_$.define.loadedBuilders.shift();
                loaded();
            };
            node.src=src+'.js';
            document.getElementsByTagName('head')[0].appendChild(node);
        }
    },
    allOnLoad:function(callback){
        if (sourceLoader.allLoaded) {
            callback();
        }
        else {
            //Show Load Process
            $('div.LoadedBlock').css('width',(Math.round(100*sourceLoader.loadedNum/sourceLoader.sourceNum)+"%"));
            //Recursion
            setTimeout(function(){
                sourceLoader.allOnLoad(callback);
            },100);
        }
    }
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v1.11.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-17T15:27Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.2",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25);
__webpack_require__(24);
__webpack_require__(26);
__webpack_require__(7);
__webpack_require__(5);
__webpack_require__(2);
__webpack_require__(14);
__webpack_require__(9);
__webpack_require__(15);
__webpack_require__(3);
__webpack_require__(16);
__webpack_require__(13);
__webpack_require__(12);
__webpack_require__(11);
__webpack_require__(8);
__webpack_require__(4);
__webpack_require__(6);
__webpack_require__(10);
__webpack_require__(21);
__webpack_require__(23);
__webpack_require__(22);
__webpack_require__(0);
__webpack_require__(20);
__webpack_require__(19);
__webpack_require__(18);
__webpack_require__(17);
module.exports = __webpack_require__(1);


/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map